void <init>()
void <init>(java.lang.String)
void glGetPointerv(int,java.nio.Buffer[])
android.content.pm.IPackageManager getPackageManager()
android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)
java.lang.Integer valueOf(int)
java.lang.String format(java.lang.String,java.lang.Object[])
int e(java.lang.String,java.lang.String)
boolean allowIndirectBuffers(java.lang.String)
int remaining()
void glColorPointerBounds(int,int,int,java.nio.Buffer,int)
void glColorPointer(int,int,int,java.nio.Buffer)
java.lang.String _glGetString(int)
java.lang.String glGetString(int)
void glNormalPointerBounds(int,int,java.nio.Buffer,int)
void glNormalPointer(int,int,java.nio.Buffer)
void glTexCoordPointerBounds(int,int,int,java.nio.Buffer,int)
void glTexCoordPointer(int,int,int,java.nio.Buffer)
void glVertexPointerBounds(int,int,int,java.nio.Buffer,int)
void glVertexPointer(int,int,int,java.nio.Buffer)
void glPointSizePointerOESBounds(int,int,java.nio.Buffer,int)
void glPointSizePointerOES(int,int,java.nio.Buffer)
void glMatrixIndexPointerOESBounds(int,int,int,java.nio.Buffer,int)
void glMatrixIndexPointerOES(int,int,int,java.nio.Buffer)
void glWeightPointerOESBounds(int,int,int,java.nio.Buffer,int)
void glWeightPointerOES(int,int,int,java.nio.Buffer)
void _nativeClassInit()
void <clinit>()
void <init>(int)
int get()
int _eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,javax.microedition.khronos.egl.EGLContext,int[])
javax.microedition.khronos.egl.EGLContext eglCreateContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,javax.microedition.khronos.egl.EGLContext,int[])
int _eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[])
javax.microedition.khronos.egl.EGLSurface eglCreatePbufferSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int[])
void _eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])
javax.microedition.khronos.egl.EGLSurface eglCreatePixmapSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])
android.view.SurfaceHolder getHolder()
android.view.Surface getSurface()
int _eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])
javax.microedition.khronos.egl.EGLSurface eglCreateWindowSurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object,int[])
int _eglGetDisplay(java.lang.Object)
javax.microedition.khronos.egl.EGLDisplay eglGetDisplay(java.lang.Object)
int _eglGetCurrentContext()
javax.microedition.khronos.egl.EGLContext eglGetCurrentContext()
int _eglGetCurrentDisplay()
javax.microedition.khronos.egl.EGLDisplay eglGetCurrentDisplay()
int _eglGetCurrentSurface(int)
javax.microedition.khronos.egl.EGLSurface eglGetCurrentSurface(int)
javax.microedition.khronos.opengles.GL getGL()
boolean contains(java.lang.Object)
boolean isSupportedType(java.lang.String)
boolean isImageType(java.lang.String)
boolean isSupportedImageType(java.lang.String)
boolean isAudioType(java.lang.String)
boolean isSupportedAudioType(java.lang.String)
boolean isVideoType(java.lang.String)
boolean isSupportedVideoType(java.lang.String)
boolean startsWith(java.lang.String)
boolean isTextType(java.lang.String)
boolean equals(java.lang.Object)
boolean isDrmType(java.lang.String)
boolean endsWith(java.lang.String)
boolean isUnspecified(java.lang.String)
java.lang.Object clone()
java.util.ArrayList getImageTypes()
java.util.ArrayList getAudioTypes()
java.util.ArrayList getVideoTypes()
java.util.ArrayList getSupportedTypes()
boolean add(java.lang.Object)
int size()
boolean put(java.lang.Object,java.lang.Object)
void <init>(com.google.android.mms.util.AbstractCache$1)
java.lang.Object put(java.lang.Object,java.lang.Object)
java.lang.Object get(java.lang.Object)
java.lang.Object remove(java.lang.Object)
java.lang.Object purge(java.lang.Object)
void clear()
void purgeAll()
com.google.android.mms.util.PduCache getInstance()
int getMessageBox()
long getThreadId()
java.lang.Long valueOf(long)
android.net.Uri normalizeKey(android.net.Uri)
boolean put(android.net.Uri,com.google.android.mms.util.PduCacheEntry)
int match(android.net.Uri)
com.google.android.mms.util.PduCacheEntry purgeSingleEntry(android.net.Uri)
java.lang.String getLastPathSegment()
android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)
void purgeByMessageBox(java.lang.Integer)
long parseId(android.net.Uri)
void purgeByThreadId(long)
com.google.android.mms.util.PduCacheEntry purge(android.net.Uri)
void removeFromThreads(android.net.Uri,com.google.android.mms.util.PduCacheEntry)
void removeFromMessageBoxes(android.net.Uri,com.google.android.mms.util.PduCacheEntry)
java.util.Iterator iterator()
boolean hasNext()
java.lang.Object next()
boolean remove(java.lang.Object)
void addURI(java.lang.String,java.lang.String,int)
void <init>(com.google.android.mms.pdu.GenericPdu,int,long)
com.google.android.mms.pdu.GenericPdu getPdu()
boolean isLowMemory(android.content.Context)
java.lang.Object getSystemService(java.lang.String)
void getMemoryInfo(android.app.ActivityManager$MemoryInfo)
java.lang.String getMessage()
boolean isLowMemory(android.database.sqlite.SQLiteException)
android.widget.Toast makeText(android.content.Context,int,int)
void show()
void checkSQLiteException(android.content.Context,android.database.sqlite.SQLiteException)
android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)
int e(java.lang.String,java.lang.String,java.lang.Throwable)
android.database.Cursor query(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)
boolean requery()
boolean requery(android.content.Context,android.database.Cursor)
int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])
int update(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])
int delete(android.net.Uri,java.lang.String,java.lang.String[])
int delete(android.content.Context,android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String[])
android.net.Uri insert(android.net.Uri,android.content.ContentValues)
android.net.Uri insert(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues)
void setMessageType(int)
void setMmsVersion(int)
void setTransactionId(byte[])
void <init>(int,byte[])
void <init>(com.google.android.mms.pdu.PduHeaders)
int getOctet(int)
int getReportAllowed()
void setOctet(int,int)
void setReportAllowed(int)
byte[] getTextString(int)
byte[] getTransactionId()
void setTextString(byte[],int)
void arraycopy(java.lang.Object,int,java.lang.Object,int,int)
void <init>(byte[])
byte[] getBytes(java.lang.String)
int getCharacterSet()
void setCharacterSet(int)
byte[] getTextString()
void setTextString(byte[])
java.lang.String getMimeName(int)
void <init>(byte[],java.lang.String)
java.lang.String getString()
void write(byte[])
void printStackTrace()
byte[] toByteArray()
void appendTextString(byte[])
java.lang.StringBuilder append(java.lang.String)
java.lang.StringBuilder append(java.lang.Object)
java.lang.String toString()
java.lang.String[] split(java.lang.String)
byte[] getBytes()
com.google.android.mms.pdu.EncodedStringValue[] split(java.lang.String)
int length()
java.lang.Object[] toArray(java.lang.Object[])
com.google.android.mms.pdu.EncodedStringValue[] extract(java.lang.String)
java.lang.String concat(com.google.android.mms.pdu.EncodedStringValue[])
com.google.android.mms.pdu.EncodedStringValue copy(com.google.android.mms.pdu.EncodedStringValue)
com.google.android.mms.pdu.EncodedStringValue[] encodeStrings(java.lang.String[])
void <init>(com.google.android.mms.pdu.PduComposer)
void <init>(com.google.android.mms.pdu.PduComposer$1)
void newbuf()
void pop()
void arraycopy(byte[],int,int)
void copy()
void <init>(com.google.android.mms.pdu.PduComposer,com.google.android.mms.pdu.PduComposer$1)
int access$402(com.google.android.mms.pdu.PduComposer$PositionMarker,int)
int access$502(com.google.android.mms.pdu.PduComposer$PositionMarker,int)
com.google.android.mms.pdu.PduComposer$PositionMarker mark()
void <init>(com.google.android.mms.pdu.PduHeaders,com.google.android.mms.pdu.PduBody)
com.google.android.mms.pdu.EncodedStringValue[] getEncodedStringValues(int)
com.google.android.mms.pdu.EncodedStringValue[] getCc()
void appendEncodedStringValue(com.google.android.mms.pdu.EncodedStringValue,int)
void addCc(com.google.android.mms.pdu.EncodedStringValue)
byte[] getContentType()
void setContentType(byte[])
int getDeliveryReport()
void setDeliveryReport(int)
com.google.android.mms.pdu.EncodedStringValue getEncodedStringValue(int)
com.google.android.mms.pdu.EncodedStringValue getFrom()
void setEncodedStringValue(com.google.android.mms.pdu.EncodedStringValue,int)
void setFrom(com.google.android.mms.pdu.EncodedStringValue)
byte[] getMessageClass()
void setMessageClass(byte[])
byte[] getMessageId()
void setMessageId(byte[])
int getReadReport()
void setReadReport(int)
int getRetrieveStatus()
void setRetrieveStatus(int)
com.google.android.mms.pdu.EncodedStringValue getRetrieveText()
void setRetrieveText(com.google.android.mms.pdu.EncodedStringValue)
int digit(char,int)
void write(int)
byte[] decodeQuotedPrintable(byte[])
com.google.android.mms.pdu.PduHeaders parseHeaders(java.io.ByteArrayInputStream)
boolean checkMandatoryHeader(com.google.android.mms.pdu.PduHeaders)
void log(java.lang.String)
com.google.android.mms.pdu.PduBody parseParts(java.io.ByteArrayInputStream)
com.google.android.mms.pdu.GenericPdu parse()
int available()
void mark(int)
int extractByteValue(java.io.ByteArrayInputStream)
void reset()
byte[] parseWapString(java.io.ByteArrayInputStream,int)
java.lang.StringBuilder append(int)
long parseLongInteger(java.io.ByteArrayInputStream)
void setLongInteger(long,int)
long parseIntegerValue(java.io.ByteArrayInputStream)
com.google.android.mms.pdu.EncodedStringValue parseEncodedStringValue(java.io.ByteArrayInputStream)
int indexOf(java.lang.String)
java.lang.String substring(int,int)
int parseValueLength(java.io.ByteArrayInputStream)
long currentTimeMillis()
int parseShortInteger(java.io.ByteArrayInputStream)
byte[] parseContentType(java.io.ByteArrayInputStream,java.util.HashMap)
int parseUnsignedInt(java.io.ByteArrayInputStream)
void setName(byte[])
int intValue()
void setCharset(int)
boolean parsePartHeaders(java.io.ByteArrayInputStream,com.google.android.mms.pdu.PduPart,int)
byte[] getContentLocation()
byte[] getName()
byte[] getFilename()
byte[] getContentId()
java.lang.String toOctalString(long)
void setContentLocation(byte[])
int read(byte[],int,int)
boolean equalsIgnoreCase(java.lang.String)
com.google.android.mms.pdu.PduPart getPart(int)
byte[] getContentTransferEncoding()
byte[] decodeBase64(byte[])
void setData(byte[])
int checkPartPosition(com.google.android.mms.pdu.PduPart)
void addPart(int,com.google.android.mms.pdu.PduPart)
boolean addPart(com.google.android.mms.pdu.PduPart)
int read()
byte[] getWapString(java.io.ByteArrayInputStream,int)
boolean isTokenCharacter(int)
boolean isText(int)
int skipWapValue(java.io.ByteArrayInputStream,int)
int getMibEnumValue(java.lang.String)
java.lang.String toString(byte[])
void parseContentTypeParams(java.io.ByteArrayInputStream,java.util.HashMap,java.lang.Integer)
void setContentId(byte[])
android.content.res.Resources getSystem()
boolean getBoolean(int)
void setContentDisposition(byte[])
void setFilename(byte[])
void setContentTransferEncoding(byte[])
boolean equals(byte[],byte[])
long getLongInteger(int)
boolean desiredAssertionStatus()
long getDate()
void setDate(long)
int getStatus()
void setStatus(int)
com.google.android.mms.pdu.EncodedStringValue[] getTo()
void setEncodedStringValues(com.google.android.mms.pdu.EncodedStringValue[],int)
void setTo(com.google.android.mms.pdu.EncodedStringValue[])
byte[] discardNonBase64(byte[])
boolean isBase64(byte)
int getContentClass()
void setContentClass(int)
long getExpiry()
void setExpiry(long)
long getMessageSize()
void setMessageSize(long)
com.google.android.mms.pdu.EncodedStringValue getSubject()
void setSubject(com.google.android.mms.pdu.EncodedStringValue)
com.google.android.mms.pdu.PduComposer$BufferStack access$100(com.google.android.mms.pdu.PduComposer)
int getLength()
int getReadStatus()
void setReadStatus(int)
android.content.ContentResolver getContentResolver()
void <init>(android.content.Context)
com.google.android.mms.pdu.PduPersister getPduPersister(android.content.Context)
java.lang.String getString(int)
int getInt(int)
void setEncodedStringValueToHeaders(android.database.Cursor,int,com.google.android.mms.pdu.PduHeaders,int)
void setTextStringToHeaders(android.database.Cursor,int,com.google.android.mms.pdu.PduHeaders,int)
boolean isNull(int)
void setOctetToHeaders(android.database.Cursor,int,com.google.android.mms.pdu.PduHeaders,int)
long getLong(int)
void setLongToHeaders(android.database.Cursor,int,com.google.android.mms.pdu.PduHeaders,int)
java.lang.Integer getIntegerFromPartColumn(android.database.Cursor,int)
byte[] getByteArrayFromPartColumn(android.database.Cursor,int)
java.lang.StringBuilder append(long)
android.net.Uri parse(java.lang.String)
int getCount()
void close()
boolean moveToNext()
void setDataUri(android.net.Uri)
java.lang.String toIsoString(byte[])
void write(byte[],int,int)
java.io.InputStream openInputStream(android.net.Uri)
int read(byte[])
void <init>(java.lang.Throwable)
com.google.android.mms.pdu.PduPart[] loadParts(long)
boolean isEmpty(java.lang.CharSequence)
void loadAddress(long,com.google.android.mms.pdu.PduHeaders)
boolean moveToFirst()
java.util.Set entrySet()
java.lang.Object getValue()
java.lang.Object getKey()
java.lang.String toHexString(int)
com.google.android.mms.pdu.GenericPdu load(android.net.Uri)
void put(java.lang.String,java.lang.String)
void put(java.lang.String,java.lang.Integer)
void persistAddress(long,int,com.google.android.mms.pdu.EncodedStringValue[])
int getCharset()
byte[] getContentDisposition()
void persistData(com.google.android.mms.pdu.PduPart,android.net.Uri,java.lang.String)
android.net.Uri persistPart(com.google.android.mms.pdu.PduPart,long)
byte[] getData()
java.io.OutputStream openOutputStream(android.net.Uri)
android.net.Uri getDataUri()
int w(java.lang.String,java.lang.String)
void updateAddress(long,int,com.google.android.mms.pdu.EncodedStringValue[])
void put(java.lang.String,java.lang.Long)
int getPriority()
com.google.android.mms.pdu.PduHeaders getPduHeaders()
long getOrCreateThreadId(android.content.Context,java.util.Set)
void updateHeaders(android.net.Uri,com.google.android.mms.pdu.SendReq)
void updatePart(android.net.Uri,com.google.android.mms.pdu.PduPart)
void setBody(com.google.android.mms.pdu.PduBody)
int getPartsNum()
java.lang.StringBuilder append(char)
java.lang.String getAuthority()
void appendEscapedSQLString(java.lang.StringBuilder,java.lang.String)
void updateParts(android.net.Uri,com.google.android.mms.pdu.PduBody)
int getMessageType()
com.google.android.mms.pdu.PduBody getBody()
android.net.Uri persist(com.google.android.mms.pdu.GenericPdu,android.net.Uri)
android.net.Uri withAppendedId(android.net.Uri,long)
android.net.Uri move(android.net.Uri,android.net.Uri)
void release()
android.net.Uri$Builder buildUpon()
android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)
java.lang.String valueOf(int)
java.lang.String valueOf(long)
android.net.Uri build()
android.database.Cursor getPendingMessages(long)
void <init>(com.google.android.mms.pdu.EncodedStringValue,byte[],int,int,com.google.android.mms.pdu.EncodedStringValue[])
void putPartToMaps(com.google.android.mms.pdu.PduPart)
void add(int,java.lang.Object)
java.lang.Object remove(int)
com.google.android.mms.pdu.PduPart removePart(int)
void removeAll()
java.lang.Object get(int)
int indexOf(java.lang.Object)
int getPartIndex(com.google.android.mms.pdu.PduPart)
com.google.android.mms.pdu.PduPart getPartByContentId(java.lang.String)
com.google.android.mms.pdu.PduPart getPartByContentLocation(java.lang.String)
com.google.android.mms.pdu.PduPart getPartByName(java.lang.String)
com.google.android.mms.pdu.PduPart getPartByFileName(java.lang.String)
int getResponseStatus()
void setResponseStatus(int)
void <init>(int,byte[],int)
java.lang.String generateLocation()
long longValue()
void <init>(android.content.Context,com.google.android.mms.pdu.GenericPdu)
int makeSendReqPdu()
int makeNotifyResp()
int makeAckInd()
int makeReadRecInd()
byte[] make()
void append(int)
void appendShortInteger(int)
void appendOctet(int)
void appendShortLength(int)
void appendLongInteger(long)
void appendTextString(java.lang.String)
void appendValueLength(long)
void appendEncodedString(com.google.android.mms.pdu.EncodedStringValue)
void appendUintvarInteger(long)
void appendDateValue(long)
void appendQuotedString(byte[])
void appendQuotedString(java.lang.String)
int checkAddressType(java.lang.String)
com.google.android.mms.pdu.EncodedStringValue appendAddressType(com.google.android.mms.pdu.EncodedStringValue)
int appendHeader(int)
int makeMessageBody()
boolean matches(java.lang.String)
byte[] generateTransactionId()
java.lang.String toHexString(long)
void <init>(byte[],com.google.android.mms.pdu.EncodedStringValue,int,byte[])
com.google.android.mms.pdu.EncodedStringValue[] getBcc()
void addBcc(com.google.android.mms.pdu.EncodedStringValue)
void setBcc(com.google.android.mms.pdu.EncodedStringValue[])
void setCc(com.google.android.mms.pdu.EncodedStringValue[])
void addTo(com.google.android.mms.pdu.EncodedStringValue)
void setPriority(int)
int getMmsVersion()
void <init>(java.lang.String,java.lang.Throwable)
boolean exists()
java.lang.String getText()
java.lang.String getValue()
void setValue(java.lang.String)
java.lang.Character valueOf(char)
com.google.android.util.AbstractMessageParser$TrieNode getChild(char)
java.lang.String valueOf(char)
com.google.android.util.AbstractMessageParser$TrieNode getOrCreateChild(char)
char charAt(int)
void addToTrie(com.google.android.util.AbstractMessageParser$TrieNode,java.lang.String,java.lang.String)
void <init>(com.google.android.util.AbstractMessageParser$Token$Type,java.lang.String)
boolean isHtml()
java.util.List getInfo()
java.lang.String getRawText()
void <init>(java.lang.String,java.lang.String)
java.lang.String getDocID()
boolean isMedia()
java.util.regex.Matcher matcher(java.lang.CharSequence)
boolean matches()
java.lang.String group(int)
com.google.android.util.AbstractMessageParser$Video matchURL(java.lang.String,java.lang.String)
java.lang.String getRssUrl(java.lang.String)
java.lang.String getURL(java.lang.String)
java.lang.String getURL(java.lang.String,java.lang.String)
java.util.regex.Pattern compile(java.lang.String)
void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
java.lang.String getUser()
java.lang.String getAlbum()
java.lang.String getPhoto()
com.google.android.util.AbstractMessageParser$Photo matchURL(java.lang.String,java.lang.String)
java.lang.String getAlbumURL(java.lang.String,java.lang.String)
java.lang.String getPhotoURL(java.lang.String,java.lang.String,java.lang.String)
com.google.android.util.AbstractMessageParser$Token$Type getType()
boolean isArray()
void <init>(java.lang.Object)
java.lang.String toHtml(boolean)
boolean controlCaps()
boolean setCaps()
void <init>(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean)
void <init>(java.lang.String,com.google.android.util.SmileyResources)
com.google.android.util.AbstractMessageParser$Resources getResources()
int getPartCount()
com.google.android.util.AbstractMessageParser$Part getPart(int)
java.util.ArrayList getTokens()
android.text.SpannableStringBuilder append(java.lang.CharSequence)
int getSmileyRes(java.lang.String)
void <init>(android.content.Context,int)
void setSpan(java.lang.Object,int,int,int)
java.lang.CharSequence getSpannableString(android.content.Context)
com.google.android.util.AbstractMessageParser$Token$Type[] values()
int ordinal()
java.lang.String getTrack()
void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
java.lang.String getGrouping()
java.lang.String getGroupingId()
com.google.android.util.AbstractMessageParser$FlickrPhoto matchURL(java.lang.String,java.lang.String)
java.lang.String getUrl()
java.lang.String getUserSetsURL(java.lang.String,java.lang.String)
java.lang.String getUserTagsURL(java.lang.String,java.lang.String)
java.lang.String getTagsURL(java.lang.String)
java.lang.String getPhotoURL(java.lang.String,java.lang.String)
java.lang.String getUserURL(java.lang.String)
java.lang.String getURL()
com.google.android.util.AbstractMessageParser$YouTubeVideo matchURL(java.lang.String,java.lang.String)
java.lang.String getPrefixedURL(boolean,java.lang.String,java.lang.String,java.lang.String)
java.util.List getParts()
boolean parseMusicTrack()
void buildParts(java.lang.String)
boolean isWhitespace(char)
java.lang.String substring(int)
boolean isWordBreak(int)
boolean isSmileyBreak(int)
boolean parseSmiley()
boolean parseAcronym()
boolean parseURL()
boolean parseFormatting()
void parseText()
void trimLeadingWhitespace()
void trimTrailingWhitespace()
void parse()
com.google.android.util.AbstractMessageParser$Token tokenForUrl(java.lang.String,java.lang.String)
com.google.android.util.AbstractMessageParser$Part lastPart()
void add(com.google.android.util.AbstractMessageParser$Token)
void setMeText(java.lang.String)
void addToken(com.google.android.util.AbstractMessageParser$Token)
com.google.android.util.AbstractMessageParser$TrieNode getSmileys()
com.google.android.util.AbstractMessageParser$TrieNode longestMatch(com.google.android.util.AbstractMessageParser$TrieNode,com.google.android.util.AbstractMessageParser,int,boolean)
int getCharClass(int)
com.google.android.util.AbstractMessageParser$TrieNode getAcronyms()
com.google.android.util.AbstractMessageParser$TrieNode longestMatch(com.google.android.util.AbstractMessageParser$TrieNode,com.google.android.util.AbstractMessageParser,int)
boolean isLetter(char)
boolean isDigit(char)
boolean isDomainChar(char)
com.google.android.util.AbstractMessageParser$TrieNode getDomainSuffixes()
java.lang.String reverse(java.lang.String)
boolean matches(com.google.android.util.AbstractMessageParser$TrieNode,java.lang.String)
boolean isValidDomain(java.lang.String)
boolean isURLBreak(int)
java.util.Set getSchemes()
boolean isPunctuation(char)
void addURLToken(java.lang.String,java.lang.String)
boolean isFormatChar(char)
boolean containsKey(java.lang.Object)
void <init>(char,boolean)
void setMatched(boolean)
java.util.Set keySet()
char charValue()
boolean isSmileyBreak(char,char)
java.lang.String toHtml()
void <init>(java.lang.String[],int[])
java.lang.String toUpperCase()
java.lang.String trimLeadingWhitespace(java.lang.String)
java.lang.String trimTrailingWhitespace(java.lang.String)
java.lang.String getFormatStart(char)
java.lang.String getFormatEnd(char)
java.lang.Enum valueOf(java.lang.Class,java.lang.String)
com.google.android.util.AbstractMessageParser$Token$Type valueOf(java.lang.String)
void <init>(java.lang.String,int)
void <init>(java.lang.String,int,java.lang.String)
java.lang.String getPartType()
java.lang.String getType(boolean)
com.google.android.util.AbstractMessageParser$Token getMediaToken()
java.util.ArrayList newArrayList()
boolean addAll(java.util.Collection,java.lang.Object[])
java.util.ArrayList newArrayList(java.lang.Object[])
java.util.HashMap newHashMap()
java.util.HashSet newHashSet()
java.util.HashSet newHashSet(java.lang.Object[])
java.util.SortedSet newSortedSet()
java.util.SortedSet newSortedSet(java.lang.Object[])
void <init>(com.android.server.ResettableTimeout)
android.os.ConditionVariable access$100(com.android.server.ResettableTimeout)
void open()
long access$200(com.android.server.ResettableTimeout)
long uptimeMillis()
boolean access$302(com.android.server.ResettableTimeout,boolean)
void off()
java.lang.Thread access$402(com.android.server.ResettableTimeout,java.lang.Thread)
void sleep(long)
void run()
void <init>(com.android.server.ResettableTimeout,com.android.server.ResettableTimeout$1)
void start()
void block()
void interrupt()
void on(boolean)
void go(long)
void cancel()
void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession)
android.net.sip.ISipSessionListener access$000(com.android.server.sip.SipSessionListenerProxy)
void onRegistrationTimeout(android.net.sip.ISipSession)
void access$100(com.android.server.sip.SipSessionListenerProxy,java.lang.Throwable,java.lang.String)
void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession,int,java.lang.String)
void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)
void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)
void onRinging(android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)
void setListener(android.net.sip.ISipSessionListener)
android.net.sip.ISipSessionListener getListener()
void <init>(java.lang.Runnable,java.lang.String)
void proxy(java.lang.Runnable)
void onCalling(android.net.sip.ISipSession)
void onRingingBack(android.net.sip.ISipSession)
void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession,java.lang.String)
void onCallEstablished(android.net.sip.ISipSession,java.lang.String)
void onCallEnded(android.net.sip.ISipSession)
void onCallBusy(android.net.sip.ISipSession)
void onCallChangeFailed(android.net.sip.ISipSession,int,java.lang.String)
void onError(android.net.sip.ISipSession,int,java.lang.String)
void onRegistering(android.net.sip.ISipSession)
void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession,int)
void onRegistrationDone(android.net.sip.ISipSession,int)
int w(java.lang.String,java.lang.String,java.lang.Throwable)
void handle(java.lang.Throwable,java.lang.String)
javax.sip.SipFactory getInstance()
javax.sip.address.AddressFactory createAddressFactory()
javax.sip.header.HeaderFactory createHeaderFactory()
javax.sip.message.MessageFactory createMessageFactory()
void <init>(javax.sip.SipStack,javax.sip.SipProvider)
javax.sip.address.Address getSipAddress()
javax.sip.header.FromHeader createFromHeader(javax.sip.address.Address,java.lang.String)
javax.sip.header.FromHeader createFromHeader(android.net.sip.SipProfile,java.lang.String)
javax.sip.header.ToHeader createToHeader(android.net.sip.SipProfile,java.lang.String)
javax.sip.header.ToHeader createToHeader(android.net.sip.SipProfile)
javax.sip.header.ToHeader createToHeader(javax.sip.address.Address,java.lang.String)
javax.sip.header.CallIdHeader getNewCallId()
javax.sip.header.CallIdHeader createCallIdHeader()
double random()
javax.sip.header.CSeqHeader createCSeqHeader(long,java.lang.String)
javax.sip.header.CSeqHeader createCSeqHeader(java.lang.String)
javax.sip.header.MaxForwardsHeader createMaxForwardsHeader(int)
javax.sip.header.MaxForwardsHeader createMaxForwardsHeader()
javax.sip.ListeningPoint getListeningPoint(java.lang.String)
javax.sip.ListeningPoint[] getListeningPoints()
javax.sip.ListeningPoint getListeningPoint()
java.lang.String getIPAddress()
int getPort()
java.lang.String getTransport()
javax.sip.header.ViaHeader createViaHeader(java.lang.String,int,java.lang.String,java.lang.String)
void setRPort()
java.util.List createViaHeaders()
java.lang.String getUserName()
java.lang.String getProtocol()
javax.sip.address.SipURI createSipUri(java.lang.String,java.lang.String,javax.sip.ListeningPoint)
javax.sip.address.Address createAddress(javax.sip.address.URI)
java.lang.String getDisplayName()
void setDisplayName(java.lang.String)
javax.sip.header.ContactHeader createContactHeader(javax.sip.address.Address)
javax.sip.header.ContactHeader createContactHeader(android.net.sip.SipProfile)
javax.sip.header.ContactHeader createContactHeader()
void setWildCard()
javax.sip.header.ContactHeader createWildcardContactHeader()
javax.sip.address.SipURI createSipURI(java.lang.String,java.lang.String)
void setPort(int)
void setTransportParam(java.lang.String)
javax.sip.message.Request createRequest(java.lang.String,android.net.sip.SipProfile,java.lang.String)
javax.sip.ClientTransaction getNewClientTransaction(javax.sip.message.Request)
void sendRequest()
javax.sip.ClientTransaction sendKeepAlive(android.net.sip.SipProfile,java.lang.String)
void addHeader(javax.sip.header.Header)
javax.sip.header.ExpiresHeader createExpiresHeader(int)
javax.sip.ClientTransaction sendRegister(android.net.sip.SipProfile,java.lang.String,int)
java.lang.String getUriString()
java.lang.String replaceFirst(java.lang.String,java.lang.String)
javax.sip.address.SipURI createSipURI(java.lang.String)
javax.sip.message.Request createRequest(javax.sip.address.URI,java.lang.String,javax.sip.header.CallIdHeader,javax.sip.header.CSeqHeader,javax.sip.header.FromHeader,javax.sip.header.ToHeader,java.util.List,javax.sip.header.MaxForwardsHeader)
javax.sip.header.Header createHeader(java.lang.String,java.lang.String)
gov.nist.javax.sip.clientauthutils.AuthenticationHelper getAuthenticationHelper(gov.nist.javax.sip.clientauthutils.AccountManager,javax.sip.header.HeaderFactory)
javax.sip.ClientTransaction getClientTransaction()
javax.sip.message.Response getResponse()
javax.sip.ClientTransaction handleChallenge(javax.sip.message.Response,javax.sip.ClientTransaction,javax.sip.SipProvider,int)
javax.sip.message.Request getRequest()
int d(java.lang.String,java.lang.String)
javax.sip.ClientTransaction handleChallenge(javax.sip.ResponseEvent,gov.nist.javax.sip.clientauthutils.AccountManager)
javax.sip.address.SipURI getUri()
javax.sip.header.ContentTypeHeader createContentTypeHeader(java.lang.String,java.lang.String)
void setContent(java.lang.Object,javax.sip.header.ContentTypeHeader)
javax.sip.ClientTransaction sendInvite(android.net.sip.SipProfile,android.net.sip.SipProfile,java.lang.String,java.lang.String)
javax.sip.message.Request createRequest(java.lang.String)
void sendRequest(javax.sip.ClientTransaction)
javax.sip.ClientTransaction sendReinvite(javax.sip.Dialog,java.lang.String)
javax.sip.ServerTransaction getServerTransaction()
javax.sip.ServerTransaction getNewServerTransaction(javax.sip.message.Request)
javax.sip.ServerTransaction getServerTransaction(javax.sip.RequestEvent)
javax.sip.message.Response createResponse(int,javax.sip.message.Request)
javax.sip.header.Header getHeader(java.lang.String)
void setTag(java.lang.String)
void sendResponse(javax.sip.message.Response)
javax.sip.ServerTransaction sendRinging(javax.sip.RequestEvent,java.lang.String)
javax.sip.TransactionState getState()
javax.sip.ServerTransaction sendInviteOk(javax.sip.RequestEvent,android.net.sip.SipProfile,java.lang.String,javax.sip.ServerTransaction)
void sendInviteBusyHere(javax.sip.RequestEvent,javax.sip.ServerTransaction)
long getSeqNumber()
javax.sip.message.Request createAck(long)
void sendAck(javax.sip.message.Request)
void sendInviteAck(javax.sip.ResponseEvent,javax.sip.Dialog)
void sendBye(javax.sip.Dialog)
javax.sip.message.Request createCancel()
void sendCancel(javax.sip.ClientTransaction)
void sendResponse(javax.sip.RequestEvent,int)
void sendInviteRequestTerminated(javax.sip.message.Request,javax.sip.ServerTransaction)
java.lang.String getCallId(javax.sip.message.Message)
javax.sip.Dialog getDialog()
java.lang.String getCallId(javax.sip.Dialog)
boolean isServerTransaction()
java.lang.String getCallId(javax.sip.Transaction)
java.lang.Object getSource()
java.lang.String getCallId(java.util.EventObject)
java.lang.String getCallId()
javax.sip.header.CallIdHeader getCallId()
java.lang.String getSimpleName()
void <init>(com.android.server.sip.SipSessionGroup,int)
int getDuration()
void <init>(com.android.server.sip.SipSessionGroup$SipSessionImpl)
void <init>(com.android.server.sip.SipSessionGroup$SipSessionImpl$SessionTimer,int)
void start(int)
void notify()
void access$000(com.android.server.sip.SipSessionGroup$SipSessionImpl,int,java.lang.String)
void timeout()
void wait(long)
void sleep(int)
void access$900(com.android.server.sip.SipSessionGroup$SipSessionImpl$SessionTimer,int)
boolean access$1000(com.android.server.sip.SipSessionGroup$SipSessionImpl$SessionTimer)
void access$1100(com.android.server.sip.SipSessionGroup$SipSessionImpl$SessionTimer)
void <init>(com.android.server.sip.SipSessionGroup)
void <init>(com.android.server.sip.SipSessionGroup$SipSessionImpl$2)
android.net.sip.SipProfile access$1400(com.android.server.sip.SipSessionGroup)
java.lang.String getAuthUserName()
java.lang.String access$2000(com.android.server.sip.SipSessionGroup)
java.lang.String getPassword()
java.lang.String getSipDomain()
com.android.server.sip.SipService$WakeupTimer access$1200(com.android.server.sip.SipService)
void set(int,java.lang.Runnable)
android.content.Context access$1100(com.android.server.sip.SipService)
void <init>(com.android.server.sip.SipService)
boolean startScanActive()
void cancel(java.lang.Runnable)
void stop()
void <init>(com.android.server.sip.SipService,com.android.server.sip.SipService$1)
android.net.sip.SipProfile duplicate(android.net.sip.SipProfile)
java.lang.String access$600(com.android.server.sip.SipService)
com.android.server.sip.SipSessionGroup createSipSessionGroup(java.lang.String,android.net.sip.SipProfile,java.lang.String)
void <init>(com.android.server.sip.SipService,android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)
android.net.sip.SipProfile getLocalProfile()
boolean containsSession(java.lang.String)
com.android.server.sip.SipWakeLock access$700(com.android.server.sip.SipService)
void <init>(java.lang.String,android.net.sip.SipProfile,java.lang.String,com.android.server.sip.SipWakeLock)
int wtf(java.lang.String,java.lang.String)
void <init>(android.net.sip.SipProfile)
android.net.sip.SipProfile$Builder setPassword(java.lang.String)
android.net.sip.SipProfile build()
int wtf(java.lang.String,java.lang.String,java.lang.Throwable)
void setIncomingCallPendingIntent(android.app.PendingIntent)
boolean access$800(com.android.server.sip.SipService)
void openToReceiveCalls(android.net.sip.ISipSessionListener)
void start(com.android.server.sip.SipSessionGroup)
void openToReceiveCalls()
void onConnectivityChanged()
void resetGroup(java.lang.String)
void onConnectivityChanged(boolean)
void reset(java.lang.String)
android.net.sip.ISipSession createSession(android.net.sip.ISipSessionListener)
boolean isRegistered()
boolean access$900(com.android.server.sip.SipService,com.android.server.sip.SipService$SipSessionGroupExt,com.android.server.sip.SipSessionGroup$SipSessionImpl)
void endCall()
void access$1000(com.android.server.sip.SipService,android.net.sip.ISipSession)
android.content.Intent createIncomingCallBroadcast(java.lang.String,java.lang.String)
void send(android.content.Context,int,android.content.Intent)
boolean isOpenedToReceiveCalls()
java.lang.String getLocalProfileUri()
java.lang.String getUri()
void <init>(int,java.lang.Runnable,long)
java.lang.String toString(java.lang.Object)
com.android.server.sip.SipService$MyExecutor access$1400(com.android.server.sip.SipService)
void <init>(com.android.server.sip.SipService$ConnectivityReceiver,android.content.Context,android.content.Intent)
void execute(java.lang.Runnable)
void onReceive(android.content.Context,android.content.Intent)
java.lang.String getAction()
android.os.Bundle getExtras()
java.lang.Object get(java.lang.String)
java.lang.String getTypeName()
android.net.NetworkInfo$State getState()
boolean access$1500(com.android.server.sip.SipService)
int getType()
android.net.NetworkInfo getActiveNetworkInfo()
void onChanged(java.lang.String,boolean)
void onReceiveInternal(android.content.Context,android.content.Intent)
boolean cancel()
void release(java.lang.Object)
void <init>(com.android.server.sip.SipService$ConnectivityReceiver,java.lang.String,boolean)
void schedule(java.util.TimerTask,long)
void acquire(java.lang.Object)
java.lang.String access$1600(com.android.server.sip.SipService$ConnectivityReceiver$MyTimerTask)
void access$1700(com.android.server.sip.SipService,java.lang.String,boolean)
void access$1300(com.android.server.sip.SipService$ConnectivityReceiver,android.content.Context,android.content.Intent)
com.android.server.sip.SipService$ConnectivityReceiver$MyTimerTask access$1900(com.android.server.sip.SipService$ConnectivityReceiver)
com.android.server.sip.SipService$ConnectivityReceiver$MyTimerTask access$1902(com.android.server.sip.SipService$ConnectivityReceiver,com.android.server.sip.SipService$ConnectivityReceiver$MyTimerTask)
void <init>(android.os.PowerManager)
android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)
void setReferenceCounted(boolean)
void acquire(long)
boolean isHeld()
void acquire()
boolean isEmpty()
void <init>(com.android.server.sip.SipSessionGroup,android.net.sip.ISipSessionListener)
boolean access$200(com.android.server.sip.SipSessionGroup$SipSessionImpl,java.util.EventObject)
java.lang.String toString(int)
java.lang.String access$300(java.util.EventObject)
boolean access$400(java.lang.String,java.util.EventObject)
com.android.server.sip.SipHelper access$500(com.android.server.sip.SipSessionGroup)
java.lang.String generateTag()
android.net.sip.SipProfile access$600(javax.sip.message.Request)
java.lang.String access$700(com.android.server.sip.SipSessionGroup,javax.sip.message.Message)
void access$800(com.android.server.sip.SipSessionGroup,com.android.server.sip.SipSessionGroup$SipSessionImpl)
boolean process(java.util.EventObject)
void <init>(com.android.server.sip.SipSessionGroup,android.net.sip.SipProfile,java.lang.String,int)
void <init>(com.android.server.sip.SipSessionGroup,android.net.sip.SipProfile,java.lang.String)
android.net.sip.SipProfile getPeerProfile()
java.lang.String getSessionDescription()
int getTimeout()
java.lang.String getStackName()
java.lang.Object setProperty(java.lang.String,java.lang.String)
java.lang.String getProxyAddress()
int v(java.lang.String,java.lang.String)
javax.sip.SipStack createSipStack(java.util.Properties)
int allocateLocalPort()
javax.sip.ListeningPoint createListeningPoint(java.lang.String,int,java.lang.String)
javax.sip.SipProvider createSipProvider(javax.sip.ListeningPoint)
void addSipListener(javax.sip.SipListener)
java.util.Collection values()
void closeToNotReceiveCalls()
boolean isClosed()
int getLocalPort()
boolean isLoggable(com.android.server.sip.SipSessionGroup$SipSessionImpl)
com.android.server.sip.SipSessionGroup$SipSessionImpl getSipSession(java.util.EventObject)
void removeSipSession(com.android.server.sip.SipSessionGroup$SipSessionImpl)
void addSipSession(com.android.server.sip.SipSessionGroup$SipSessionImpl)
boolean isRequestEvent(java.lang.String,java.util.EventObject)
java.lang.Thread currentThread()
void process(java.util.EventObject)
void processRequest(javax.sip.RequestEvent)
void processResponse(javax.sip.ResponseEvent)
void processIOException(javax.sip.IOExceptionEvent)
void processTimeout(javax.sip.TimeoutEvent)
void processTransactionTerminated(javax.sip.TransactionTerminatedEvent)
void processDialogTerminated(javax.sip.DialogTerminatedEvent)
boolean isLoggable(com.android.server.sip.SipSessionGroup$SipSessionImpl,java.util.EventObject)
void access$100(com.android.server.sip.SipSessionGroup$SipSessionImpl,java.lang.Throwable)
byte[] getRawContent()
java.lang.String getMessageContent()
java.lang.String extractContent(javax.sip.message.Message)
java.lang.String getMethod()
java.lang.String getCseqMethod(javax.sip.message.Message)
boolean expectResponse(java.lang.String,java.util.EventObject)
int getStatusCode()
boolean expectResponse(int,java.lang.String,java.util.EventObject)
javax.sip.address.Address getAddress()
javax.sip.address.URI getURI()
java.lang.String getHost()
android.net.sip.SipProfile$Builder setDisplayName(java.lang.String)
android.net.sip.SipProfile$Builder setPort(int)
android.net.sip.SipProfile createPeerProfile(javax.sip.message.Request)
boolean isLoggable(java.util.EventObject)
java.lang.String log(java.util.EventObject)
void access$1200(com.android.server.sip.SipSessionGroup,com.android.server.sip.SipSessionGroup$SipSessionImpl)
java.lang.String access$1300(com.android.server.sip.SipSessionGroup)
java.util.EventObject access$1600()
java.util.EventObject access$1700()
boolean access$1800(java.util.EventObject)
boolean access$1900(java.lang.String,java.util.EventObject)
void <init>(com.android.server.sip.SipService$1)
void <init>(java.util.Comparator)
android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)
void <init>(com.android.server.sip.SipService,android.content.Context)
void unregisterReceiver(android.content.BroadcastReceiver)
void cancel(android.app.PendingIntent)
boolean stopped()
void cancelAlarm()
java.lang.Object first()
java.util.Comparator comparator()
boolean addAll(java.util.Collection)
void recalculatePeriods()
long elapsedRealtime()
void insertEvent(com.android.server.sip.SipService$MyEvent)
void scheduleNext()
void remove()
android.content.Intent putExtra(java.lang.String,long)
android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)
void set(int,long,android.app.PendingIntent)
boolean containsKey(java.lang.String)
long getLongExtra(java.lang.String,long)
void execute(long)
java.lang.String showTime(long)
void printQueue()
void <init>(com.android.server.sip.SipService$ConnectivityReceiver$MyTimerTask)
void access$1800(com.android.server.sip.SipService$ConnectivityReceiver$MyTimerTask)
void unregister()
int getState()
void register(int)
java.net.InetAddress getByName(java.lang.String)
byte[] getAddress()
boolean isBehindNAT(java.lang.String)
void restart(int)
int backoffDuration()
boolean notCurrentSession(android.net.sip.ISipSession)
void clearReRegisterRequired()
boolean getSendKeepAlive()
void <init>(com.android.server.sip.SipService,com.android.server.sip.SipSessionGroup$SipSessionImpl)
void restartLater()
com.android.server.sip.SipSessionGroup$SipSessionImpl duplicate()
void delete()
void terminate()
void cancelSessionTimer()
boolean isInCall()
java.lang.String getLocalIp()
javax.sip.Transaction getTransaction()
void <init>(com.android.server.sip.SipSessionGroup$SipSessionImpl,java.util.EventObject)
void doCommandAsync(java.util.EventObject)
void makeCall(android.net.sip.SipProfile,java.lang.String,int)
void processCommand(java.util.EventObject)
void onError(java.lang.Throwable)
void answerCall(java.lang.String,int)
void changeCall(java.lang.String,int)
boolean isReRegisterRequired()
void sendKeepAlive()
void onError(int,java.lang.String)
boolean registeringToReady(java.util.EventObject)
boolean keepAliveProcess(java.util.EventObject)
boolean readyForCall(java.util.EventObject)
boolean incomingCall(java.util.EventObject)
boolean incomingCallToInCall(java.util.EventObject)
boolean outgoingCall(java.util.EventObject)
boolean outgoingCallToReady(java.util.EventObject)
boolean inCall(java.util.EventObject)
boolean processExceptions(java.util.EventObject)
void endCallNormally()
boolean isCurrentTransaction(javax.sip.TransactionTerminatedEvent)
java.lang.String toString(javax.sip.Transaction)
javax.sip.DialogState getState()
int getExpires()
int max(int,int)
int getExpiryTime(javax.sip.message.Response)
boolean parseOptionsResult(java.util.EventObject)
int getRPortFromResponse(javax.sip.message.Response)
int getRPort()
void onRegistrationDone(int)
boolean handleAuthentication(javax.sip.ResponseEvent)
void onRegistrationFailed(javax.sip.message.Response)
java.lang.String getNonceFromResponse(javax.sip.message.Response)
gov.nist.javax.sip.clientauthutils.AccountManager getAccountManager()
boolean crossDomainAuthenticationRequired(javax.sip.message.Response)
java.lang.String getRealmFromResponse(javax.sip.message.Response)
java.lang.String trim()
java.lang.String getRealm()
java.lang.String getNonce()
void startSessionTimer(int)
void establishCall()
void onError(javax.sip.message.Response)
java.lang.String getReasonPhrase()
java.lang.String createErrorMessage(javax.sip.message.Response)
void endCallOnError(int,java.lang.String)
void endCallOnBusy()
void onRegistrationFailed(int,java.lang.String)
java.lang.Throwable getRootCause(java.lang.Throwable)
int getErrorCode(java.lang.Throwable)
int getErrorCode(int)
java.lang.Throwable getCause()
void onRegistrationFailed(java.lang.Throwable)
void access$1500(com.android.server.sip.SipSessionGroup$SipSessionImpl,java.util.EventObject)
gov.nist.javax.sip.clientauthutils.UserCredentials getCredentials(javax.sip.ClientTransaction,java.lang.String)
void realRun()
int compare(com.android.server.sip.SipService$MyEvent,com.android.server.sip.SipService$MyEvent)
int compare(java.lang.Object,java.lang.Object)
int getIntExtra(java.lang.String,int)
boolean access$102(com.android.server.sip.SipService,boolean)
boolean access$200(com.android.server.sip.SipService)
void access$300(com.android.server.sip.SipService)
void access$400(com.android.server.sip.SipService)
boolean isApiSupported(android.content.Context)
void addService(java.lang.String,android.os.IBinder)
void sendBroadcast(android.content.Intent)
void start(android.content.Context)
boolean isSipWifiOnly(android.content.Context)
void registerReceivers()
void unregisterReceivers()
com.android.server.sip.SipService$MyExecutor getExecutor()
void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)
boolean isCallerRadio()
boolean isCallerCreator(com.android.server.sip.SipService$SipSessionGroupExt)
android.net.sip.SipProfile[] getListOfProfiles()
int getCallingUid()
void setCallingUid(int)
com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile)
void open(android.net.sip.SipProfile)
com.android.server.sip.SipService$SipSessionGroupExt createGroup(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)
boolean getAutoRegistration()
void grabWifiLock()
void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)
boolean isCallerCreatorOrRadio(com.android.server.sip.SipService$SipSessionGroupExt)
void notifyProfileRemoved(android.net.sip.SipProfile)
boolean anyOpenedToReceiveCalls()
void releaseWifiLock()
void close(java.lang.String)
boolean isOpened(java.lang.String)
boolean isRegistered(java.lang.String)
void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)
android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)
android.net.sip.ISipSession getPendingSession(java.lang.String)
void connect(java.net.InetAddress,int)
java.net.InetAddress getLocalAddress()
java.lang.String getHostAddress()
java.lang.String determineLocalIp()
void notifyProfileAdded(android.net.sip.SipProfile)
android.content.Intent putExtra(java.lang.String,java.lang.String)
android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)
void startWifiScanner()
void stopWifiScanner()
void onConnectivityChanged(java.lang.String,boolean)
void cleanUpPendingSessions()
void addPendingSession(android.net.sip.ISipSession)
boolean callingSelf(com.android.server.sip.SipService$SipSessionGroupExt,com.android.server.sip.SipSessionGroup$SipSessionImpl)
android.os.Looper getLooper()
android.os.Looper createLooper()
android.os.Looper access$2100()
void <init>(android.os.Looper)
android.os.Message obtain(android.os.Handler,int,java.lang.Object)
void sendToTarget()
void executeInternal(java.lang.Runnable)
void handleMessage(android.os.Message)
boolean find()
int getDate(java.lang.String)
int getMonth(java.lang.String)
int getYear(java.lang.String)
com.android.internal.http.HttpDateTime$TimeOfDay getTime(java.lang.String)
void set(int,int,int,int,int,int)
long toMillis(boolean)
long parse(java.lang.String)
char toLowerCase(char)
void <init>(int,int,int)
boolean isFile()
boolean canRead()
java.lang.String getName()
void <init>(java.io.File)
void <init>(java.lang.String,java.io.File)
long length()
long getLength()
java.lang.String getFileName()
java.io.InputStream createInputStream()
java.lang.String getBoundary()
byte[] getPartBoundary()
void setPartBoundary(byte[])
boolean isRepeatable()
void trace(java.lang.Object)
void sendStart(java.io.OutputStream)
byte[] getAsciiBytes(java.lang.String)
void sendDispositionHeader(java.io.OutputStream)
java.lang.String getContentType()
java.lang.String getCharSet()
void sendContentTypeHeader(java.io.OutputStream)
java.lang.String getTransferEncoding()
void sendTransferEncodingHeader(java.io.OutputStream)
void sendEndOfHeader(java.io.OutputStream)
void sendEnd(java.io.OutputStream)
void sendData(java.io.OutputStream)
void send(java.io.OutputStream)
long lengthOfData()
void sendParts(java.io.OutputStream,com.android.internal.http.multipart.Part[],byte[])
void sendParts(java.io.OutputStream,com.android.internal.http.multipart.Part[])
long getLengthOfParts(com.android.internal.http.multipart.Part[],byte[])
long getLengthOfParts(com.android.internal.http.multipart.Part[])
org.apache.commons.logging.Log getLog(java.lang.Class)
void <init>(java.lang.String,com.android.internal.http.multipart.PartSource,java.lang.String,java.lang.String)
void <init>(java.lang.String,com.android.internal.http.multipart.PartSource)
void <init>(java.lang.String,java.io.File,java.lang.String,java.lang.String)
void <init>(java.lang.String,java.lang.String,java.io.File)
void <init>(java.lang.String,java.lang.String,java.io.File,java.lang.String,java.lang.String)
void debug(java.lang.Object)
com.android.internal.http.multipart.PartSource getSource()
int nextInt(int)
byte[] generateMultipartBoundary()
void <init>(com.android.internal.http.multipart.Part[],org.apache.http.params.HttpParams)
void setContentType(java.lang.String)
void <init>(com.android.internal.http.multipart.Part[])
java.lang.Object getParameter(java.lang.String)
byte[] getMultipartBoundary()
void writeTo(java.io.OutputStream)
java.lang.StringBuffer append(java.lang.String)
java.lang.String getAsciiString(byte[])
org.apache.http.Header getContentType()
long getContentLength()
void error(java.lang.Object,java.lang.Throwable)
java.io.InputStream getContent()
boolean isStreaming()
int indexOf(int)
void <init>(java.lang.String,java.lang.String,java.lang.String)
byte[] getBytes(java.lang.String,java.lang.String)
byte[] getContent()
void setCharSet(java.lang.String)
void setName(java.lang.String)
void setTransferEncoding(java.lang.String)
void <init>(java.lang.String,byte[])
void <init>(android.os.IBinder)
android.os.IBinder asBinder()
java.lang.String getInterfaceDescriptor()
android.os.Parcel obtain()
void writeInterfaceToken(java.lang.String)
boolean transact(int,android.os.Parcel,android.os.Parcel,int)
void readException()
java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)
void recycle()
java.util.List getInputMethodList()
java.util.List getEnabledInputMethodList()
void writeStrongBinder(android.os.IBinder)
void writeInt(int)
void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)
void removeClient(com.android.internal.view.IInputMethodClient)
void writeToParcel(android.os.Parcel,int)
int readInt()
java.lang.Object createFromParcel(android.os.Parcel)
com.android.internal.view.InputBindResult startInput(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo,boolean,boolean)
void finishInput(com.android.internal.view.IInputMethodClient)
boolean showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)
boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)
void windowGainedFocus(com.android.internal.view.IInputMethodClient,android.os.IBinder,boolean,boolean,int,boolean,int)
void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient)
void writeString(java.lang.String)
void setInputMethod(android.os.IBinder,java.lang.String)
void hideMySoftInput(android.os.IBinder,int)
void showMySoftInput(android.os.IBinder,int)
void updateStatusIcon(android.os.IBinder,java.lang.String,int)
boolean setInputMethodEnabled(java.lang.String,boolean)
void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)
void setTextBeforeCursor(java.lang.CharSequence,int)
void setTextAfterCursor(java.lang.CharSequence,int)
void setCursorCapsMode(int,int)
void setExtractedText(android.view.inputmethod.ExtractedText,int)
void setSelectedText(java.lang.CharSequence,int)
void setSession(android.view.IWindowSession)
void finishDrawing(android.view.IWindow)
void resized(int,int,android.graphics.Rect,android.graphics.Rect,boolean,android.content.res.Configuration)
void dispatchAppVisibility(boolean)
void dispatchGetNewSurface()
void windowFocusChanged(boolean,boolean)
void executeCommand(java.lang.String,java.lang.String,android.os.ParcelFileDescriptor)
void closeSystemDialogs(java.lang.String)
void wallpaperOffsetsComplete(android.os.IBinder)
void dispatchWallpaperOffsets(float,float,float,float,boolean)
void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)
void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)
void <init>(com.android.internal.view.IInputContext)
com.android.internal.view.InputConnectionWrapper$InputContextCallback access$000()
void getTextAfterCursor(int,int,int,com.android.internal.view.IInputContextCallback)
void waitForResultLocked()
void access$100(com.android.internal.view.InputConnectionWrapper$InputContextCallback)
java.lang.CharSequence getTextAfterCursor(int,int)
void getTextBeforeCursor(int,int,int,com.android.internal.view.IInputContextCallback)
java.lang.CharSequence getTextBeforeCursor(int,int)
void getSelectedText(int,int,com.android.internal.view.IInputContextCallback)
java.lang.CharSequence getSelectedText(int)
void getCursorCapsMode(int,int,com.android.internal.view.IInputContextCallback)
int getCursorCapsMode(int)
void getExtractedText(android.view.inputmethod.ExtractedTextRequest,int,int,com.android.internal.view.IInputContextCallback)
android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)
void commitText(java.lang.CharSequence,int)
boolean commitText(java.lang.CharSequence,int)
void commitCompletion(android.view.inputmethod.CompletionInfo)
boolean commitCompletion(android.view.inputmethod.CompletionInfo)
void setSelection(int,int)
boolean setSelection(int,int)
void performEditorAction(int)
boolean performEditorAction(int)
void performContextMenuAction(int)
boolean performContextMenuAction(int)
void setComposingRegion(int,int)
boolean setComposingRegion(int,int)
void setComposingText(java.lang.CharSequence,int)
boolean setComposingText(java.lang.CharSequence,int)
void finishComposingText()
boolean finishComposingText()
void beginBatchEdit()
boolean beginBatchEdit()
void endBatchEdit()
boolean endBatchEdit()
void sendKeyEvent(android.view.KeyEvent)
boolean sendKeyEvent(android.view.KeyEvent)
void clearMetaKeyStates(int)
boolean clearMetaKeyStates(int)
void deleteSurroundingText(int,int)
boolean deleteSurroundingText(int,int)
void reportFullscreenMode(boolean)
boolean reportFullscreenMode(boolean)
void performPrivateCommand(java.lang.String,android.os.Bundle)
boolean performPrivateCommand(java.lang.String,android.os.Bundle)
void attachInterface(android.os.IInterface,java.lang.String)
android.os.IInterface queryLocalInterface(java.lang.String)
com.android.internal.view.IInputMethodCallback asInterface(android.os.IBinder)
boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)
void enforceInterface(java.lang.String)
void finishedEvent(int,boolean)
android.os.IBinder readStrongBinder()
com.android.internal.view.IInputMethodSession asInterface(android.os.IBinder)
void sessionCreated(com.android.internal.view.IInputMethodSession)
void set(java.lang.Thread,android.os.Looper)
java.lang.Thread getThread()
void <init>(android.os.Parcel)
com.android.internal.view.InputBindResult createFromParcel(android.os.Parcel)
com.android.internal.view.InputBindResult[] newArray(int)
java.lang.Object[] newArray(int)
void finishInput()
void updateExtractedText(int,android.view.inputmethod.ExtractedText)
void updateSelection(int,int,int,int,int,int)
void updateCursor(android.graphics.Rect)
void writeTypedArray(android.os.Parcelable[],int)
void displayCompletions(android.view.inputmethod.CompletionInfo[])
void dispatchKeyEvent(int,android.view.KeyEvent,com.android.internal.view.IInputMethodCallback)
void dispatchTrackballEvent(int,android.view.MotionEvent,com.android.internal.view.IInputMethodCallback)
void appPrivateCommand(java.lang.String,android.os.Bundle)
void toggleSoftInput(int,int)
void finishSession()
int getRequestedWidth()
int getRequestedHeight()
int getRequestedFormat()
int getRequestedType()
void addCallback(android.view.SurfaceHolder$Callback)
void removeCallback(android.view.SurfaceHolder$Callback)
android.view.SurfaceHolder$Callback[] getCallbacks()
void ungetCallbacks()
void onRelayoutContainer()
void setFixedSize(int,int)
void setSizeFromLayout()
void onUpdateSurface()
void setFormat(int)
void setType(int)
android.graphics.Canvas internalLockCanvas(android.graphics.Rect)
android.graphics.Canvas lockCanvas()
android.graphics.Canvas lockCanvas(android.graphics.Rect)
void lock()
boolean onAllowLockCanvas()
void unlock()
void unlockCanvasAndPost(android.graphics.Canvas)
android.graphics.Rect getSurfaceFrame()
void <init>(android.os.Parcel,com.android.internal.view.menu.IconMenuView$1)
com.android.internal.view.menu.IconMenuView$SavedState createFromParcel(android.os.Parcel)
com.android.internal.view.menu.IconMenuView$SavedState[] newArray(int)
android.content.res.Resources getResources()
android.content.res.Configuration getConfiguration()
void setCallback(com.android.internal.view.menu.MenuBuilder$Callback)
void <init>(com.android.internal.view.menu.MenuBuilder,int)
com.android.internal.view.menu.MenuBuilder$MenuType getMenuType(int)
boolean hasMenuView()
com.android.internal.view.menu.MenuView getMenuView(android.view.ViewGroup)
android.view.View getMenuView(int,android.view.ViewGroup)
android.view.ViewParent getParent()
int getNumActualItemsShown()
int getNumIconMenuItemsShown()
java.lang.ref.WeakReference access$202(com.android.internal.view.menu.MenuBuilder$MenuType,java.lang.ref.WeakReference)
boolean hasSubMenu()
android.view.SubMenu getSubMenu()
void clearMenuViews()
void clearItemViews()
int getOrdering(int)
void <init>(com.android.internal.view.menu.MenuBuilder,int,int,int,int,java.lang.CharSequence)
void setMenuInfo(android.view.ContextMenu$ContextMenuInfo)
int findInsertIndex(java.util.ArrayList,int)
void onItemsChanged(boolean)
android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence)
android.view.MenuItem add(java.lang.CharSequence)
android.view.MenuItem add(int)
android.view.MenuItem add(int,int,int,java.lang.CharSequence)
android.view.MenuItem add(int,int,int,int)
android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)
android.view.SubMenu addSubMenu(java.lang.CharSequence)
android.view.SubMenu addSubMenu(int)
void <init>(android.content.Context,com.android.internal.view.menu.MenuBuilder,com.android.internal.view.menu.MenuItemImpl)
void setSubMenu(com.android.internal.view.menu.SubMenuBuilder)
android.view.SubMenu addSubMenu(int,int,int,int)
android.content.pm.PackageManager getPackageManager()
java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)
void removeGroup(int)
void <init>(android.content.Intent)
android.content.Intent setComponent(android.content.ComponentName)
java.lang.CharSequence loadLabel(android.content.pm.PackageManager)
android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)
android.view.MenuItem setIcon(android.graphics.drawable.Drawable)
android.view.MenuItem setIntent(android.content.Intent)
int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])
int findItemIndex(int)
void removeItemAtInt(int,boolean)
void removeItem(int)
int findGroupIndex(int)
int getGroupId()
void removeItemAt(int)
void clearHeader()
void clearAll()
boolean isExclusiveCheckable()
boolean isCheckable()
void setCheckedInt(boolean)
void setExclusiveItemChecked(android.view.MenuItem)
void setExclusiveCheckable(boolean)
android.view.MenuItem setCheckable(boolean)
void setGroupCheckable(int,boolean,boolean)
boolean setVisibleInt(boolean)
void setGroupVisible(int,boolean)
android.view.MenuItem setEnabled(boolean)
void setGroupEnabled(int,boolean)
boolean isVisible()
boolean hasVisibleItems()
int getItemId()
android.view.MenuItem findItem(int)
int findGroupIndex(int,int)
android.view.MenuItem getItem(int)
com.android.internal.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent)
boolean isShortcutKey(int,android.view.KeyEvent)
boolean isShortcutsVisible()
void refreshShortcuts(boolean,boolean)
void setQwertyMode(boolean)
boolean isQwertyMode()
void refreshShortcutOnItemViews(boolean,boolean)
void setShortcutsVisible(boolean)
com.android.internal.view.menu.MenuBuilder$Callback getCallback()
android.content.Context getContext()
int getOrdering()
boolean performItemAction(android.view.MenuItem,int)
void close(boolean)
boolean performShortcut(int,android.view.KeyEvent,int)
int getMetaState()
boolean getKeyData(android.view.KeyCharacterMap$KeyData)
java.util.List findItemsWithShortcutForKey(int,android.view.KeyEvent)
char getAlphabeticShortcut()
char getNumericShortcut()
boolean isEnabled()
boolean performIdentifierAction(int,int)
boolean invoke()
boolean onSubMenuSelected(com.android.internal.view.menu.SubMenuBuilder)
void onCloseMenu(com.android.internal.view.menu.MenuBuilder,boolean)
java.lang.ref.WeakReference access$200(com.android.internal.view.menu.MenuBuilder$MenuType)
java.lang.Object get()
void updateChildren(boolean)
void onItemVisibleChanged(com.android.internal.view.menu.MenuItemImpl)
java.util.ArrayList getVisibleItems()
java.lang.CharSequence getText(int)
android.graphics.drawable.Drawable getDrawable(int)
void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View)
com.android.internal.view.menu.MenuBuilder setHeaderTitleInt(java.lang.CharSequence)
com.android.internal.view.menu.MenuBuilder setHeaderTitleInt(int)
com.android.internal.view.menu.MenuBuilder setHeaderIconInt(android.graphics.drawable.Drawable)
com.android.internal.view.menu.MenuBuilder setHeaderIconInt(int)
com.android.internal.view.menu.MenuBuilder setHeaderViewInt(android.view.View)
java.lang.CharSequence getHeaderTitle()
android.graphics.drawable.Drawable getHeaderIcon()
android.view.View getHeaderView()
com.android.internal.view.menu.MenuBuilder getRootMenu()
void setCurrentMenuInfo(android.view.ContextMenu$ContextMenuInfo)
com.android.internal.view.menu.MenuBuilder$MenuAdapter getMenuAdapter(int)
void setOptionalIconsVisible(boolean)
boolean getOptionalIconsVisible()
void saveHierarchyState(android.util.SparseArray)
void putSparseParcelableArray(java.lang.String,android.util.SparseArray)
void saveHierarchyState(android.os.Bundle)
android.util.SparseArray getSparseParcelableArray(java.lang.String)
void restoreHierarchyState(android.util.SparseArray)
void restoreHierarchyState(android.os.Bundle)
android.content.Context access$000(com.android.internal.view.menu.MenuBuilder)
android.util.SparseArray access$100(com.android.internal.view.menu.MenuBuilder)
int access$300(com.android.internal.view.menu.MenuBuilder)
android.view.LayoutInflater getInflater()
android.view.View inflate(int,android.view.ViewGroup,boolean)
void initialize(com.android.internal.view.menu.MenuBuilder,int)
int getId()
void remove(int)
int getOffset()
com.android.internal.view.menu.MenuItemImpl getItem(int)
long getItemId(int)
android.view.View getItemView(int,android.view.ViewGroup)
android.view.View getView(int,android.view.View,android.view.ViewGroup)
java.lang.Object getItem(int)
void <init>(android.content.Context,android.util.AttributeSet)
android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)
float getFloat(int,float)
int getResourceId(int,int)
void <init>(android.content.Context,android.util.AttributeSet,int)
void setClickable(boolean)
void setFocusable(boolean)
void setTextAppearance(android.content.Context,int)
void setTitle(java.lang.CharSequence)
void setIcon(android.graphics.drawable.Drawable)
void initialize(java.lang.CharSequence,android.graphics.drawable.Drawable)
java.lang.CharSequence getTitleForItemView(com.android.internal.view.menu.MenuView$ItemView)
android.graphics.drawable.Drawable getIcon()
void setVisibility(int)
void setEnabled(boolean)
void initialize(com.android.internal.view.menu.MenuItemImpl,int)
boolean performClick()
boolean invokeItem(com.android.internal.view.menu.MenuItemImpl)
void playSoundEffect(int)
void setCaptionMode(boolean)
void setText(java.lang.CharSequence)
boolean shouldShowShortcut()
java.lang.String getShortcutLabel()
int getIntrinsicWidth()
int getIntrinsicHeight()
void setBounds(int,int,int,int)
void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
void setGravity(int)
void requestLayout()
void setItemInvoker(com.android.internal.view.menu.MenuBuilder$ItemInvoker)
com.android.internal.view.menu.MenuItemImpl getItemData()
void markStaleChildren()
void setIconMenuView(com.android.internal.view.menu.IconMenuView)
void drawableStateChanged()
boolean isPressed()
boolean isFocused()
void setAlpha(int)
void onLayout(boolean,int,int,int,int)
void positionIcon()
void onTextChanged(java.lang.CharSequence,int,int,int)
com.android.internal.view.menu.IconMenuView$LayoutParams getTextAppropriateLayoutParams()
void setLayoutParams(android.view.ViewGroup$LayoutParams)
android.view.ViewGroup$LayoutParams getLayoutParams()
void <init>(int,int)
java.lang.CharSequence getText()
android.text.TextPaint getPaint()
float getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)
int getLineBounds(int,android.graphics.Rect)
int getWidth()
void set(int,int,int,int)
void apply(int,int,int,android.graphics.Rect,android.graphics.Rect)
void setBounds(android.graphics.Rect)
void setCheckable(boolean)
void setChecked(boolean)
void setShortcut(boolean,char)
boolean prefersCondensedTitle()
boolean showsIcon()
void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)
java.lang.Class getClass()
void setAdapter(android.widget.ListAdapter)
android.widget.ListAdapter getAdapter()
void notifyDataSetInvalidated()
void notifyDataSetChanged()
void onDetachedFromWindow()
void setChildrenDrawingCacheEnabled(boolean)
boolean recycleOnMeasure()
void onItemClick(android.widget.AdapterView,android.view.View,int,long)
int getWindowAnimations()
void <init>(com.android.internal.view.menu.IconMenuView)
com.android.internal.view.menu.MenuBuilder access$000(com.android.internal.view.menu.IconMenuView)
void onMenuModeChange(com.android.internal.view.menu.MenuBuilder)
void onClick(android.view.View)
void <init>(android.os.Parcelable)
void <init>(android.os.Parcelable,int)
boolean onMenuItemClick(android.view.MenuItem)
boolean onMenuItemSelected(com.android.internal.view.menu.MenuBuilder,android.view.MenuItem)
void startActivity(android.content.Intent)
boolean hasItemView(int)
int getOrder()
android.content.Intent getIntent()
java.lang.Runnable getCallback()
android.view.MenuItem setCallback(java.lang.Runnable)
void refreshShortcutOnItemViews()
android.view.MenuItem setAlphabeticShortcut(char)
android.view.MenuItem setNumericShortcut(char)
android.view.MenuItem setShortcut(char,char)
char getShortcut()
java.lang.CharSequence getTitle()
android.view.SubMenu setHeaderTitle(java.lang.CharSequence)
java.lang.CharSequence getTitleCondensed()
android.view.MenuItem setTitle(java.lang.CharSequence)
android.view.MenuItem setTitle(int)
android.view.MenuItem setTitleCondensed(java.lang.CharSequence)
void setIconOnViews(android.graphics.drawable.Drawable)
boolean haveAnyOpenedIconCapableItemViews()
android.view.MenuItem setIcon(int)
boolean isChecked()
android.view.MenuItem setChecked(boolean)
android.view.MenuItem setVisible(boolean)
android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener)
com.android.internal.view.menu.MenuView$ItemView createItemView(int,android.view.ViewGroup)
android.view.LayoutInflater getLayoutInflater(int)
android.view.ContextMenu$ContextMenuInfo getMenuInfo()
boolean shouldShowIcon(int)
int getDimensionPixelSize(int,int)
int getInt(int,int)
void setWillNotDraw(boolean)
void setFocusableInTouchMode(boolean)
void setDescendantFocusability(int)
int getChildCount()
double ceil(double)
int min(int,int)
void layoutItemsUsingGravity(int,int)
boolean doItemsFit()
void layoutItems(int)
android.view.View getChildAt(int)
android.graphics.drawable.Drawable$ConstantState getConstantState()
android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)
void setBackgroundDrawable(android.graphics.drawable.Drawable)
void addView(android.view.View,android.view.ViewGroup$LayoutParams)
void addItemView(com.android.internal.view.menu.IconMenuItemView)
android.view.View inflate(int,android.view.ViewGroup)
void setOnClickListener(android.view.View$OnClickListener)
com.android.internal.view.menu.IconMenuItemView createMoreItemView()
void removeAllViews()
int makeMeasureSpec(int,int)
void measure(int,int)
void <init>(int,int,int,int)
void positionChildren(int,int)
int resolveSize(int,int)
void calculateItemFittingMetadata(int)
void setMeasuredDimension(int,int)
void onMeasure(int,int)
void layout(int,int,int,int)
void draw(android.graphics.Canvas)
void onDraw(android.graphics.Canvas)
com.android.internal.view.menu.IconMenuView$LayoutParams generateLayoutParams(android.util.AttributeSet)
boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)
int[] getLayout()
int getLayoutNumRows()
int getKeyCode()
int getAction()
int getRepeatCount()
boolean removeCallbacks(java.lang.Runnable)
int getLongPressTimeout()
boolean postDelayed(java.lang.Runnable,long)
void setCycleShortcutCaptionMode(boolean)
boolean dispatchKeyEvent(android.view.KeyEvent)
void onAttachedToWindow()
boolean requestFocus()
void onWindowFocusChanged(boolean)
void setChildrenCaptionMode(boolean)
android.os.Parcelable onSaveInstanceState()
android.view.View getFocusedChild()
android.os.Parcelable getSuperState()
void onRestoreInstanceState(android.os.Parcelable)
android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)
android.view.Menu getParentMenu()
android.view.MenuItem getItem()
android.view.SubMenu setIcon(android.graphics.drawable.Drawable)
android.view.SubMenu setIcon(int)
android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)
android.view.SubMenu setHeaderIcon(int)
android.view.SubMenu setHeaderTitle(int)
android.view.SubMenu setHeaderView(android.view.View)
android.view.ContextMenu setHeaderIcon(android.graphics.drawable.Drawable)
android.view.ContextMenu setHeaderIcon(int)
android.view.ContextMenu setHeaderTitle(java.lang.CharSequence)
android.view.ContextMenu setHeaderTitle(int)
android.view.ContextMenu setHeaderView(android.view.View)
void createContextMenu(android.view.ContextMenu)
int writeEvent(int,int)
void <init>(com.android.internal.view.menu.MenuBuilder)
void show(android.os.IBinder)
com.android.internal.view.menu.MenuDialogHelper show(android.view.View,android.os.IBinder)
void onFinishInflate()
android.view.View findViewById(int)
int getVisibility()
void insertRadioButton()
void insertCheckBox()
void insertIconView()
void setImageDrawable(android.graphics.drawable.Drawable)
void addView(android.view.View,int)
void addView(android.view.View)
android.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener)
android.app.AlertDialog$Builder setCustomTitle(android.view.View)
android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)
android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)
android.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener)
android.app.AlertDialog$Builder setRecycleOnMeasureEnabled(boolean)
android.app.AlertDialog create()
android.view.Window getWindow()
android.view.WindowManager$LayoutParams getAttributes()
android.view.View getDecorView()
android.view.KeyEvent$DispatcherState getKeyDispatcherState()
void startTracking(android.view.KeyEvent,java.lang.Object)
boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent)
boolean isCanceled()
boolean isTracking(android.view.KeyEvent)
void dismiss()
void onClick(android.content.DialogInterface,int)
void <init>(com.android.internal.view.IInputMethodSession,java.lang.String,int)
java.lang.String readString()
void writeStrongInterface(android.os.IInterface)
int describeContents()
com.android.internal.view.InputConnectionWrapper$InputContextCallback getInstance()
void dispose()
void notifyAll()
int i(java.lang.String,java.lang.String)
java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)
void setUsingInputMethod(boolean)
void onBindMethod(com.android.internal.view.InputBindResult)
void onUnbindMethod(int)
void setActive(boolean)
com.android.internal.view.IInputMethod asInterface(android.os.IBinder)
void attachToken(android.os.IBinder)
void bindInput(android.view.inputmethod.InputBinding)
void unbindInput()
com.android.internal.view.IInputContext asInterface(android.os.IBinder)
void startInput(com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo)
void restartInput(com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo)
void createSession(com.android.internal.view.IInputMethodCallback)
void setSessionEnabled(com.android.internal.view.IInputMethodSession,boolean)
void revokeSession(com.android.internal.view.IInputMethodSession)
void showSoftInput(int,android.os.ResultReceiver)
void hideSoftInput(int,android.os.ResultReceiver)
com.android.internal.view.IInputMethodClient asInterface(android.os.IBinder)
com.android.internal.view.IInputContextCallback asInterface(android.os.IBinder)
void <init>(com.android.internal.view.IInputConnectionWrapper,android.os.Looper)
void executeMessage(android.os.Message)
com.android.internal.view.IInputMethodManager asInterface(android.os.IBinder)
void writeNoException()
void writeTypedList(java.util.List)
void handleKey(android.view.KeyEvent,java.lang.Runnable)
void handleMotion(android.view.MotionEvent,java.lang.Runnable)
void <init>(android.os.Looper,android.view.inputmethod.InputConnection)
boolean isActive()
android.os.Message obtainMessageIISC(int,int,int,int,com.android.internal.view.IInputContextCallback)
void dispatchMessage(android.os.Message)
android.os.Message obtainMessageISC(int,int,int,com.android.internal.view.IInputContextCallback)
android.os.Message obtainMessageIOSC(int,int,java.lang.Object,int,com.android.internal.view.IInputContextCallback)
android.os.Message obtainMessageIO(int,int,java.lang.Object)
android.os.Message obtainMessageO(int,java.lang.Object)
android.os.Message obtainMessageII(int,int,int)
android.os.Message obtainMessage(int)
android.os.Message obtainMessageOO(int,java.lang.Object,java.lang.Object)
android.os.Looper myLooper()
boolean sendMessage(android.os.Message)
android.os.Message obtainMessage(int,int,int)
android.os.Message obtainMessage(int,int,int,java.lang.Object)
void openNiDialog(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)
void setNiNotification(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)
boolean sendNiResponse(int,int)
void handleNiNotification(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)
java.lang.String getNotifTitle(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)
java.lang.String getNotifMessage(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)
java.lang.String getNotifTicker(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)
android.content.Intent getDlgIntent(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)
void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)
void notify(int,android.app.Notification)
void cancel(int)
java.lang.String getDialogTitle(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)
java.lang.String getDialogMessage(com.android.internal.location.GpsNetInitiatedHandler$GpsNiNotification)
android.content.Intent setFlags(int)
android.content.Intent setClass(android.content.Context,java.lang.Class)
android.content.Intent putExtra(java.lang.String,int)
int parseInt(java.lang.String,int)
byte[] stringToByteArray(java.lang.String,boolean)
void <init>(byte[],int,int,java.lang.String)
java.lang.String decodeGSMPackedString(byte[])
java.lang.String decodeUTF8String(byte[])
java.lang.String decodeUCS2String(byte[])
java.lang.String decodeString(java.lang.String,boolean,int)
void <init>(java.lang.String,android.location.ILocationManager)
void setRequiresNetwork(boolean)
void setRequiresSatellite(boolean)
void setRequiresCell(boolean)
void setHasMonetaryCost(boolean)
void setSupportsAltitude(boolean)
void setSupportsSpeed(boolean)
void setSupportsBearing(boolean)
void setPowerRequirement(int)
void setAccuracy(int)
boolean requiresNetwork()
boolean requiresSatellite()
boolean requiresCell()
boolean hasMonetaryCost()
boolean supportsAltitude()
boolean supportsSpeed()
boolean supportsBearing()
int getPowerRequirement()
int getAccuracy()
void <init>(com.android.internal.app.HeavyWeightSwitcherActivity)
void onCreate(android.os.Bundle)
boolean requestWindowFeature(int)
android.os.Parcelable getParcelableExtra(java.lang.String)
boolean getBooleanExtra(java.lang.String,boolean)
java.lang.String getStringExtra(java.lang.String)
void setContentView(int)
void setIconAndText(int,int,int,java.lang.String,int,int)
void setFeatureDrawableResource(int,int)
void setText(int,java.lang.CharSequence)
void setDrawable(int,android.graphics.drawable.Drawable)
java.lang.String getString(int,java.lang.Object[])
void <init>(com.android.internal.app.RingtonePickerActivity)
void <init>(android.app.Activity)
void setIncludeDrm(boolean)
android.database.Cursor getCursor()
int inferStreamType()
void setVolumeControlStream(int)
java.lang.CharSequence getCharSequenceExtra(java.lang.String)
void setupAlert()
int addDefaultRingtoneItem(android.widget.ListView)
boolean isDefault(android.net.Uri)
int addSilentItem(android.widget.ListView)
int getRingtonePosition(android.net.Uri)
int getListPosition(int)
void onPrepareListView(android.widget.ListView)
android.view.LayoutInflater getLayoutInflater()
void setText(int)
void addHeaderView(android.view.View)
int getHeaderViewsCount()
int addStaticItem(android.widget.ListView,int)
void stopPreviousRingtone()
int getRingtoneManagerPosition(int)
android.net.Uri getRingtoneUri(int)
android.content.Intent putExtra(java.lang.String,android.os.Parcelable)
void setResult(int,android.content.Intent)
void setResult(int)
boolean post(java.lang.Runnable)
void finish()
void playRingtone(int,int)
void onItemSelected(android.widget.AdapterView,android.view.View,int,long)
void onNothingSelected(android.widget.AdapterView)
void removeCallbacks(java.lang.Runnable)
boolean isPlaying()
android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)
android.media.Ringtone getRingtone(int)
void play()
void onStop()
void stopAnyPlayingRingtone()
void onPause()
int access$002(com.android.internal.app.RingtonePickerActivity,int)
void access$100(com.android.internal.app.RingtonePickerActivity,int,int)
android.database.Cursor access$200(com.android.internal.app.RingtonePickerActivity)
void <init>(com.android.internal.app.AlertController$AlertParams,com.android.internal.app.AlertController$RecycleListView,com.android.internal.app.AlertController)
boolean isItemChecked(int)
android.content.DialogInterface access$600(com.android.internal.app.AlertController)
void onClick(android.content.DialogInterface,int,boolean)
void <init>(com.android.internal.app.ResolverActivity,android.content.pm.ResolveInfo,java.lang.CharSequence,java.lang.CharSequence,android.content.Intent)
void <init>(android.content.Context,int,int,java.lang.Object[])
void <init>(com.android.internal.app.AlertController$AlertParams,android.content.Context,int,int,java.lang.CharSequence[],com.android.internal.app.AlertController$RecycleListView)
void setItemChecked(int,boolean)
void <init>(com.android.internal.app.AlertController)
android.widget.Button access$000(com.android.internal.app.AlertController)
android.os.Message access$100(com.android.internal.app.AlertController)
android.os.Message obtain(android.os.Message)
android.widget.Button access$200(com.android.internal.app.AlertController)
android.os.Message access$300(com.android.internal.app.AlertController)
android.widget.Button access$400(com.android.internal.app.AlertController)
android.os.Message access$500(com.android.internal.app.AlertController)
android.os.Handler access$700(com.android.internal.app.AlertController)
android.os.Message obtainMessage(int,java.lang.Object)
android.content.pm.PackageManager access$200(com.android.internal.app.ResolverActivity)
android.widget.CheckBox access$100(com.android.internal.app.ResolverActivity)
java.util.List queryIntentActivities(android.content.Intent,int)
void <init>(android.content.pm.PackageManager)
void sort(java.util.List,java.util.Comparator)
android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)
java.lang.String getSourcePackage()
int getLabelResource()
java.lang.CharSequence getNonLocalizedLabel()
int getIconResource()
void processGroup(java.util.List,int,int,android.content.pm.ResolveInfo,java.lang.CharSequence)
void <init>(com.android.internal.app.ResolverActivity,android.content.Context,android.content.Intent,android.content.Intent[],java.util.List)
android.content.pm.ResolveInfo resolveInfoForPosition(int)
android.content.Intent addFlags(int)
android.content.Intent intentForPosition(int)
void bindView(android.view.View,com.android.internal.app.ResolverActivity$DisplayResolveInfo)
java.util.List access$000(com.android.internal.app.ResolverActivity$ResolveListAdapter)
void <init>(android.content.Context,android.content.DialogInterface,android.view.Window)
boolean isFinishing()
void apply(com.android.internal.app.AlertController)
void installContent()
boolean onKeyDown(int,android.view.KeyEvent)
boolean onKeyUp(int,android.view.KeyEvent)
android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)
void setImageResource(int)
void setScaleType(android.widget.ImageView$ScaleType)
void setContentView(android.view.View)
boolean dispatchTouchEvent(android.view.MotionEvent)
void noteResumeComponent(android.content.ComponentName)
void notePauseComponent(android.content.ComponentName)
void noteLaunchTime(android.content.ComponentName,int)
com.android.internal.os.PkgUsageStats getPkgUsageStats(android.content.ComponentName)
com.android.internal.os.PkgUsageStats[] getAllPkgUsageStats()
java.lang.String copyResourceToContainer(android.net.Uri,java.lang.String,java.lang.String,java.lang.String)
boolean copyResource(android.net.Uri,android.os.ParcelFileDescriptor)
android.content.pm.PackageInfoLite getMinimalPackageInfo(android.net.Uri,int)
boolean checkFreeStorage(boolean,android.net.Uri)
android.content.res.ObbInfo getObbInfo(java.lang.String)
com.android.internal.app.IMediaContainerService asInterface(android.os.IBinder)
void <init>(com.android.internal.app.NetInitiatedActivity)
void access$000(com.android.internal.app.NetInitiatedActivity,android.content.Intent)
void <init>(com.android.internal.app.AlertController$AlertParams,com.android.internal.app.AlertController)
byte[] createByteArray()
byte[] getStatistics()
void noteStartWakelock(int,int,java.lang.String,int)
void noteStopWakelock(int,int,java.lang.String,int)
void noteStartSensor(int,int)
void noteStopSensor(int,int)
void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)
void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)
void noteStartGps(int)
void noteStopGps(int)
void noteScreenOn()
void noteScreenBrightness(int)
void noteScreenOff()
void noteInputEvent()
void noteUserActivity(int,int)
void notePhoneOn()
void notePhoneOff()
void notePhoneSignalStrength(android.telephony.SignalStrength)
void notePhoneDataConnectionState(int,boolean)
void notePhoneState(int)
void noteWifiOn()
void noteWifiOff()
void noteWifiRunning(android.os.WorkSource)
void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)
void noteWifiStopped(android.os.WorkSource)
void noteBluetoothOn()
void noteBluetoothOff()
void noteFullWifiLockAcquired(int)
void noteFullWifiLockReleased(int)
void noteScanWifiLockAcquired(int)
void noteScanWifiLockReleased(int)
void noteWifiMulticastEnabled(int)
void noteWifiMulticastDisabled(int)
void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)
void noteFullWifiLockReleasedFromSource(android.os.WorkSource)
void noteScanWifiLockAcquiredFromSource(android.os.WorkSource)
void noteScanWifiLockReleasedFromSource(android.os.WorkSource)
void noteWifiMulticastEnabledFromSource(android.os.WorkSource)
void noteWifiMulticastDisabledFromSource(android.os.WorkSource)
void setBatteryState(int,int,int,int,int,int)
long readLong()
long getAwakeTimeBattery()
long getAwakeTimePlugged()
void deactivate()
android.os.IBinder getService(java.lang.String)
android.app.IUiModeManager asInterface(android.os.IBinder)
void disableCarMode(int)
void <init>(android.content.Context,android.database.Cursor,boolean)
int getColumnIndexOrThrow(java.lang.String)
void <init>(com.android.internal.app.AlertController$AlertParams,android.content.Context,android.database.Cursor,boolean,com.android.internal.app.AlertController$RecycleListView)
int getPosition()
void bindView(android.view.View,android.content.Context,android.database.Cursor)
android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)
void <init>(android.content.DialogInterface)
void onResume()
void sendUserResponse(int)
void handleNIVerify(android.content.Intent)
void showNIError()
com.android.internal.app.IBatteryStats asInterface(android.os.IBinder)
void writeByteArray(byte[])
void writeLong(long)
android.app.AlertDialog$Builder setIcon(int)
android.app.AlertDialog$Builder setTitle(int)
android.app.AlertDialog$Builder setMessage(int)
android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)
android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)
void addFlags(int)
void beginShutdownSequence(android.content.Context)
void shutdown(android.content.Context,boolean)
void reboot(android.content.Context,java.lang.String,boolean)
void setMessage(java.lang.CharSequence)
void setIndeterminate(boolean)
void setCancelable(boolean)
boolean isScreenOn()
void actionDone()
void <init>(com.android.internal.app.ShutdownThread)
void set(java.lang.String,java.lang.String)
void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)
android.os.IBinder checkService(java.lang.String)
android.app.IActivityManager asInterface(android.os.IBinder)
boolean shutdown(int)
com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)
android.bluetooth.IBluetooth asInterface(android.os.IBinder)
android.os.storage.IMountService asInterface(android.os.IBinder)
int getBluetoothState()
boolean disable(boolean)
boolean isRadioOn()
boolean setRadio(boolean)
void shutdown(android.os.storage.IMountShutdownObserver)
void rebootOrShutdown(boolean,java.lang.String)
void reboot(java.lang.String)
void vibrate(long)
void shutdown()
void access$000(android.content.Context)
void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean)
void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)
void onCreate(android.os.Bundle,android.content.Intent,java.lang.CharSequence,android.content.Intent[],java.util.List,boolean,boolean)
void onIntentSelected(android.content.pm.ResolveInfo,android.content.Intent,boolean)
void addAction(java.lang.String)
java.util.Set getCategories()
void addCategory(java.lang.String)
android.net.Uri getData()
java.lang.String resolveType(android.content.Context)
void addDataType(java.lang.String)
int w(java.lang.String,java.lang.Throwable)
java.lang.String getScheme()
void addDataScheme(java.lang.String)
java.util.Iterator authoritiesIterator()
void addDataAuthority(java.lang.String,java.lang.String)
java.util.Iterator pathsIterator()
java.lang.String getPath()
boolean match(java.lang.String)
void addDataPath(java.lang.String,int)
android.content.ComponentName getComponent()
void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)
void onCheckedChanged(android.widget.CompoundButton,boolean)
void onShutDownComplete(int)
android.app.IActivityManager getDefault()
void moveTaskToFront(int)
void finishHeavyWeightApp()
void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)
android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)
boolean onCheckIsTextEditor()
boolean canTextInput(android.view.View)
boolean requestFeature(int)
void setFlags(int,int)
void setupView()
void setCustomTitle(android.view.View)
void setView(android.view.View)
void setView(android.view.View,int,int,int,int)
void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener,android.os.Message)
void setIcon(int)
void setInverseBackgroundForced(boolean)
android.widget.ListView getListView()
android.widget.Button getButton(int)
boolean executeKeyEvent(android.view.KeyEvent)
void setupContent(android.widget.LinearLayout)
boolean setupButtons()
boolean setupTitle(android.widget.LinearLayout)
void setPadding(int,int,int,int)
void setBackground(android.widget.LinearLayout,android.widget.LinearLayout,android.view.View,boolean,android.content.res.TypedArray,boolean,android.view.View)
int getPaddingLeft()
int getPaddingTop()
int getPaddingRight()
int getPaddingBottom()
void removeView(android.view.View)
void <init>(int,int,float)
void centerButton(android.widget.Button)
void setBackgroundResource(int)
void setSelection(int)
android.widget.ListAdapter access$802(com.android.internal.app.AlertController,android.widget.ListAdapter)
int access$902(com.android.internal.app.AlertController,int)
android.widget.ListView access$1002(com.android.internal.app.AlertController,android.widget.ListView)
void <init>(com.android.internal.app.ExternalMediaFormatActivity)
android.content.ComponentName startService(android.content.Intent)
com.android.internal.app.IUsageStats asInterface(android.os.IBinder)
void createListView(com.android.internal.app.AlertController)
void <init>(android.content.Context,int,android.database.Cursor,java.lang.String[],int[])
void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)
void setChoiceMode(int)
com.android.internal.appwidget.IAppWidgetHost asInterface(android.os.IBinder)
void updateAppWidget(int,android.widget.RemoteViews)
void providerChanged(int,android.appwidget.AppWidgetProviderInfo)
int[] createIntArray()
void readTypedList(java.util.List,android.os.Parcelable$Creator)
int[] startListening(com.android.internal.appwidget.IAppWidgetHost,java.lang.String,int,java.util.List)
void stopListening(int)
int allocateAppWidgetId(java.lang.String,int)
void deleteAppWidgetId(int)
void deleteHost(int)
void deleteAllHosts()
android.widget.RemoteViews getAppWidgetViews(int)
void writeIntArray(int[])
void updateAppWidgetIds(int[],android.widget.RemoteViews)
void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews)
java.util.List getInstalledProviders()
android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int)
void bindAppWidgetId(int,android.content.ComponentName)
int[] getAppWidgetIds(android.content.ComponentName)
com.android.internal.appwidget.IAppWidgetService asInterface(android.os.IBinder)
void <init>(com.android.internal.service.wallpaper.ImageWallpaper$DrawableEngine)
void updateWallpaper()
void drawFrame()
void gc()
void <init>(android.service.wallpaper.WallpaperService)
void <init>(com.android.internal.service.wallpaper.ImageWallpaper)
void onCreate(android.view.SurfaceHolder)
void onDestroy()
void onVisibilityChanged(boolean)
void onTouchEvent(android.view.MotionEvent)
void onOffsetsChanged(float,float,float,float,int,int)
void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)
void onSurfaceCreated(android.view.SurfaceHolder)
void onSurfaceDestroyed(android.view.SurfaceHolder)
android.view.SurfaceHolder getSurfaceHolder()
int width()
int height()
void translate(float,float)
int save(int)
boolean clipRect(float,float,float,float,android.graphics.Region$Op)
void drawColor(int)
void restore()
android.graphics.drawable.Drawable getFastDrawable()
void onCreate()
void setCallbackLooper(android.os.Looper)
android.service.wallpaper.WallpaperService$Engine onCreateEngine()
boolean quit()
com.android.internal.nfc.LlcpException convertErrorToLlcpException(int,java.lang.String)
com.android.internal.nfc.LlcpException convertErrorToLlcpException(int)
void <init>(android.nfc.ILlcpServiceSocket,android.nfc.ILlcpSocket,int)
int accept(int)
boolean isError(int)
void <init>(android.nfc.ILlcpSocket,int)
com.android.internal.nfc.LlcpSocket accept()
void close(int)
void <init>(android.nfc.ILlcpConnectionlessSocket,int)
int sendTo(int,android.nfc.LlcpPacket)
void sendTo(android.nfc.LlcpPacket)
android.nfc.LlcpPacket receiveFrom(int)
android.nfc.LlcpPacket receiveFrom()
int getSap(int)
int getSap()
byte[] getGeneralBytes()
int getMode()
void <init>(android.nfc.IP2pInitiator,int)
byte[] receive(int)
byte[] receive()
boolean send(int,byte[])
void send(byte[])
byte[] getGeneralBytes(int)
int connect(int,int)
void connect(int)
int connectByName(int,java.lang.String)
void connect(java.lang.String)
int close(int)
int send(int,byte[])
int receive(int,byte[])
int receive(byte[])
int getLocalSap(int)
int getLocalSap()
int getLocalSocketMiu(int)
int getLocalSocketMiu()
int getLocalSocketRw(int)
int getLocalSocketRw()
int getRemoteSocketMiu(int)
int getRemoteSocketMiu()
int getRemoteSocketRw(int)
int getRemoteSocketRw()
void checkState()
void <init>(android.nfc.IP2pTarget,int)
int connect(int)
void connect()
boolean disconnect(int)
void disconnect()
byte[] transceive(int,byte[])
byte[] transceive(byte[])
com.android.internal.statusbar.StatusBarIconList createFromParcel(android.os.Parcel)
com.android.internal.statusbar.StatusBarIconList[] newArray(int)
void <init>(java.lang.String,int,int)
void <init>(java.lang.String,int,int,int)
java.lang.StringBuilder append(boolean)
com.android.internal.statusbar.StatusBarIcon clone()
void readFromParcel(android.os.Parcel)
void expand()
void collapse()
void disable(int,android.os.IBinder,java.lang.String)
void setIcon(java.lang.String,java.lang.String,int,int)
void setIconVisibility(java.lang.String,boolean)
void removeIcon(java.lang.String)
void readBinderList(java.util.List)
void registerStatusBar(com.android.internal.statusbar.IStatusBar,com.android.internal.statusbar.StatusBarIconList,java.util.List,java.util.List)
void onPanelRevealed()
void onNotificationClick(java.lang.String,java.lang.String,int)
void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String)
void onClearAllNotifications()
com.android.internal.statusbar.StatusBarNotification createFromParcel(android.os.Parcel)
com.android.internal.statusbar.StatusBarNotification[] newArray(int)
void setIcon(int,com.android.internal.statusbar.StatusBarIcon)
void removeIcon(int)
void addNotification(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)
void updateNotification(android.os.IBinder,com.android.internal.statusbar.StatusBarNotification)
void removeNotification(android.os.IBinder)
void disable(int)
void animateExpand()
void animateCollapse()
com.android.internal.statusbar.StatusBarIcon createFromParcel(android.os.Parcel)
com.android.internal.statusbar.StatusBarIcon[] newArray(int)
void <init>(java.lang.String,int,java.lang.String,int,int,android.app.Notification)
android.app.Notification clone()
com.android.internal.statusbar.StatusBarNotification clone()
boolean isOngoing()
com.android.internal.statusbar.IStatusBar asInterface(android.os.IBinder)
com.android.internal.statusbar.IStatusBarService asInterface(android.os.IBinder)
void writeBinderList(java.util.List)
java.lang.String[] readStringArray()
void writeStringArray(java.lang.String[])
void defineSlots(java.lang.String[])
int getSlotIndex(java.lang.String)
java.lang.String getSlot(int)
com.android.internal.statusbar.StatusBarIcon getIcon(int)
int getViewIndex(int)
void copyFrom(com.android.internal.statusbar.StatusBarIconList)
void println(java.lang.String)
java.io.PrintWriter printf(java.lang.String,java.lang.Object[])
void dump(java.io.PrintWriter)
void setFormatter(java.util.logging.Formatter)
void flush()
java.util.logging.Level getLevel()
int getAndroidLevel(java.util.logging.Level)
java.lang.String getLoggerName()
java.lang.String loggerNameToTag(java.lang.String)
boolean isLoggable(java.lang.String,int)
java.util.logging.Formatter getFormatter()
java.lang.String format(java.util.logging.LogRecord)
int println(int,java.lang.String,java.lang.String)
void publish(java.util.logging.LogRecord)
void publish(java.util.logging.Logger,java.lang.String,java.util.logging.Level,java.lang.String)
java.lang.Throwable getThrown()
void <init>(java.io.Writer)
void write(java.lang.String)
void printStackTrace(java.io.PrintWriter)
java.util.logging.Logger getLogger(java.lang.String)
void addHandler(java.util.logging.Handler)
void setLevel(java.util.logging.Level)
android.view.Window makeNewWindow(android.content.Context)
android.view.LayoutInflater makeNewLayoutInflater(android.content.Context)
android.view.WindowManagerPolicy makeNewWindowManager()
java.lang.Class forName(java.lang.String)
java.lang.Object newInstance()
void <init>(com.android.internal.widget.EditStyledText$StyledTextDialog)
int parseInt(java.lang.String)
void setItemSize(int)
void <init>(android.os.Handler)
void <init>(com.android.internal.widget.DigitalClock)
void access$300(com.android.internal.widget.DigitalClock)
void access$100(com.android.internal.widget.DigitalClock)
void unregisterContentObserver(android.database.ContentObserver)
void onChange(boolean)
android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])
android.util.DisplayMetrics getDisplayMetrics()
int getMode(int)
int getMeasuredWidth()
int getMeasuredHeight()
void <init>(com.android.internal.widget.SlidingTab,boolean,int,int)
void <init>(float,float,float,float)
void setDuration(long)
boolean access$202(com.android.internal.widget.SlidingTab,boolean)
void <init>(float,float)
void access$300(com.android.internal.widget.SlidingTab)
android.view.animation.Animation$AnimationListener access$400(com.android.internal.widget.SlidingTab)
void setAnimationListener(android.view.animation.Animation$AnimationListener)
com.android.internal.widget.SlidingTab$Slider access$500(com.android.internal.widget.SlidingTab)
void startAnimation(android.view.animation.Animation,android.view.animation.Animation)
com.android.internal.widget.SlidingTab$Slider access$600(com.android.internal.widget.SlidingTab)
void onAnimationEnd(android.view.animation.Animation)
void onAnimationRepeat(android.view.animation.Animation)
void onAnimationStart(android.view.animation.Animation)
void setAntiAlias(boolean)
void setDither(boolean)
void setColor(int)
void setStyle(android.graphics.Paint$Style)
void setStrokeJoin(android.graphics.Paint$Join)
void setStrokeCap(android.graphics.Paint$Cap)
android.graphics.Bitmap getBitmapFor(int)
int getHeight()
long[] loadVibratePattern(int)
int[] getIntArray(int)
android.graphics.Bitmap decodeResource(android.content.res.Resources,int)
boolean isInStealthMode()
boolean isTactileFeedbackEnabled()
void setInStealthMode(boolean)
void setTactileFeedbackEnabled(boolean)
void setOnPatternListener(com.android.internal.widget.LockPatternView$OnPatternListener)
void clearPatternDrawLookup()
int getRow()
int getColumn()
void setDisplayMode(com.android.internal.widget.LockPatternView$DisplayMode)
void setPattern(com.android.internal.widget.LockPatternView$DisplayMode,java.util.List)
float getCenterXForColumn(int)
float getCenterYForRow(int)
void invalidate()
void resetPattern()
void clearPattern()
void disableInput()
void enableInput()
void onSizeChanged(int,int,int,int)
int getSize(int)
com.android.internal.widget.LockPatternView$Cell checkForNewHit(float,float)
int abs(int)
com.android.internal.widget.LockPatternView$Cell of(int,int)
void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)
void vibrate(long[],int)
com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)
void onPatternCellAdded(java.util.List)
int getRowHit(float)
int getColumnHit(float)
boolean onTouchEvent(android.view.MotionEvent)
float getX()
float getY()
void onPatternStart()
void onPatternCleared()
void invalidate(int,int,int,int)
void onPatternDetected(java.util.List)
float abs(float)
void union(int,int,int,int)
void invalidate(android.graphics.Rect)
void setStrokeWidth(float)
void rewind()
void moveTo(float,float)
void lineTo(float,float)
void drawPath(android.graphics.Path,android.graphics.Paint)
void drawCircle(android.graphics.Canvas,int,int,boolean)
int getFlags()
void setFilterBitmap(boolean)
void drawArrow(android.graphics.Canvas,float,float,com.android.internal.widget.LockPatternView$Cell,com.android.internal.widget.LockPatternView$Cell)
double atan2(double,double)
double toDegrees(double)
void setTranslate(float,float)
boolean preRotate(float,float,float)
boolean preTranslate(float,float)
void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)
void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)
java.lang.String patternToString(java.util.List)
void <init>(android.os.Parcelable,java.lang.String,int,boolean,boolean,boolean,com.android.internal.widget.LockPatternView$1)
java.lang.String getSerializedPattern()
java.util.List stringToPattern(java.lang.String)
com.android.internal.widget.LockPatternView$DisplayMode[] values()
int getDisplayMode()
boolean isInputEnabled()
int getSmileyResource(int)
void <init>(com.android.internal.widget.EditStyledText,com.android.internal.widget.EditStyledText$EditorManager)
boolean isSoftKeyBlocked()
boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)
boolean executeDown(android.widget.TextView,android.text.Spannable,int)
int getSelectionStart()
int getSelectionEnd()
int getEndPos(android.widget.TextView)
android.text.Layout getLayout()
int getLineForOffset(int)
int getParagraphDirection(int)
float getPrimaryHorizontal(int)
int getOffsetForHorizontal(int,float)
int getLineStart(int)
void setSelectedEndPos(int)
void onCursorMoved()
boolean up(android.widget.TextView,android.text.Spannable)
int getLineCount()
boolean down(android.widget.TextView,android.text.Spannable)
int getOffsetToLeftOf(int)
boolean left(android.widget.TextView,android.text.Spannable)
int getOffsetToRightOf(int)
boolean right(android.widget.TextView,android.text.Spannable)
void onFixSelectedItem()
void <init>(android.view.View,boolean)
void <init>(android.widget.TextView)
android.text.Editable getEditableText()
android.text.Editable getEditable()
android.text.method.KeyListener getKeyListener()
void clearMetaKeyState(android.view.View,android.text.Editable,int)
void onCommitCompletion(android.view.inputmethod.CompletionInfo)
void onEditorAction(int)
boolean onTextContextMenuItem(int)
boolean extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)
void setExtracting(android.view.inputmethod.ExtractedTextRequest)
boolean onPrivateIMECommand(java.lang.String,android.os.Bundle)
java.lang.CharSequence getError()
void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)
void <init>(android.view.ViewGroup,int,int,int)
void setTabBackgroundResource(int)
void setBarBackgroundResource(int)
void setHintText(int)
int getRight()
int getLeft()
int getBottom()
int getTop()
void setFillAfter(boolean)
void startAnimation(android.view.animation.Animation)
void hide()
void show(boolean)
void setPressed(boolean)
android.graphics.drawable.Drawable getBackground()
boolean isStateful()
boolean setState(int[])
void setState(int)
void showTarget()
void offsetLeftAndRight(int)
void offsetTopAndBottom(int)
void clearAnimation()
void reset(boolean)
void setTarget(int)
android.graphics.drawable.Drawable getDrawable()
void layout(int,int,int,int,int)
void updateDrawableStates()
void measure()
int getTabWidth()
int getTabHeight()
void hideTarget()
android.widget.ImageView access$100(com.android.internal.widget.SlidingTab$Slider)
android.widget.TextView access$700(com.android.internal.widget.SlidingTab$Slider)
void <init>(com.android.internal.widget.SlidingTab)
boolean isHorizontal()
boolean onInterceptTouchEvent(android.view.MotionEvent)
void getHitRect(android.graphics.Rect)
boolean contains(int,int)
void setGrabbedState(int)
boolean withinView(float,float,android.view.View)
void moveHandle(float,float)
void dispatchTriggerEvent(int)
void startAnimating(boolean)
void setInterpolator(android.view.animation.Interpolator)
void resetView()
void onAnimationDone()
void setLeftTabResources(int,int,int,int)
void setLeftHintText(int)
void setRightTabResources(int,int,int,int)
void setRightHintText(int)
void setHoldAfterTrigger(boolean,boolean)
void setOnTriggerListener(com.android.internal.widget.SlidingTab$OnTriggerListener)
void onTrigger(android.view.View,int)
void onGrabbedStateChange(android.view.View,int)
void access$000(com.android.internal.widget.SlidingTab)
void <init>(com.android.internal.widget.EditStyledText,int,android.view.View)
void <init>(android.graphics.drawable.Drawable)
android.os.Handler access$200(com.android.internal.widget.DigitalClock)
void <init>(com.android.internal.widget.DigitalClock$TimeChangedReceiver,boolean,com.android.internal.widget.DigitalClock)
void <init>(com.android.internal.widget.EditStyledText,com.android.internal.widget.EditStyledText)
void setBuilder(android.app.AlertDialog$Builder)
void setColorAlertParams(java.lang.CharSequence,java.lang.CharSequence[],java.lang.CharSequence[])
void setSizeAlertParams(java.lang.CharSequence,java.lang.CharSequence[],java.lang.CharSequence[],java.lang.CharSequence[])
void setAlignAlertParams(java.lang.CharSequence,java.lang.CharSequence[])
boolean checkColorAlertParams()
boolean checkSizeAlertParams()
boolean checkAlignAlertParams()
android.app.AlertDialog$Builder setItems(java.lang.CharSequence[],android.content.DialogInterface$OnClickListener)
android.app.AlertDialog show()
void onShowForegroundColorAlertDialog()
void onShowBackgroundColorAlertDialog()
void onShowSizeAlertDialog()
void onShowAlignAlertDialog()
void access$200(com.android.internal.widget.EditStyledText$StyledTextDialog)
void access$300(com.android.internal.widget.EditStyledText$StyledTextDialog)
void access$400(com.android.internal.widget.EditStyledText$StyledTextDialog)
void access$500(com.android.internal.widget.EditStyledText$StyledTextDialog)
void setAlignment(android.text.Layout$Alignment)
void <init>(android.content.Context,int,int)
int getDimensionPixelOffset(int)
void <init>(android.content.Context,int,java.lang.CharSequence,int,int)
void <init>(android.content.res.Resources,android.inputmethodservice.Keyboard$Row,int,int,android.content.res.XmlResourceParser)
android.inputmethodservice.Keyboard$Key createKeyFromXml(android.content.res.Resources,android.inputmethodservice.Keyboard$Row,int,int,android.content.res.XmlResourceParser)
void setEnterKeyResources(android.content.res.Resources,int,int,int)
int getShiftKeyIndex()
java.util.List getKeys()
void enableShiftLock()
void setShiftLocked(boolean)
boolean setShifted(boolean)
boolean isShifted()
int getEllipsisCount(int)
void setSingleLine(boolean)
android.content.res.TypedArray obtainStyledAttributes(int,int[])
void setTextSize(int,float)
void setMaxLines(int)
void <init>(com.android.internal.widget.LockPatternUtils,java.lang.String,int)
java.util.concurrent.atomic.AtomicBoolean access$100()
java.lang.String access$000()
void set(boolean)
java.util.concurrent.atomic.AtomicBoolean access$300()
java.lang.String access$200()
void onEvent(int,java.lang.String)
android.app.admin.DevicePolicyManager getDevicePolicyManager()
java.io.File getDataDirectory()
java.lang.String getAbsolutePath()
void startWatching()
int getPasswordMinimumLength(android.content.ComponentName)
int getRequestedMinimumPasswordLength()
int getPasswordQuality(android.content.ComponentName)
int getRequestedPasswordQuality()
void reportFailedPasswordAttempt()
void reportSuccessfulPasswordAttempt()
boolean checkPattern(java.util.List)
byte[] patternToHash(java.util.List)
boolean checkPassword(java.lang.String)
byte[] passwordToHash(java.lang.String)
boolean get()
boolean savedPatternExists()
boolean savedPasswordExists()
boolean getBoolean(java.lang.String)
boolean isPatternEverChosen()
int getKeyguardStoredPasswordQuality()
boolean isLockPatternEnabled()
boolean isLockPasswordEnabled()
int getActivePasswordQuality()
void setActivePasswordState(int,int)
void saveLockPassword(java.lang.String,int)
void setLockPatternEnabled(boolean)
void saveLockPattern(java.util.List)
void setLong(java.lang.String,long)
void clearLock()
void setLength(long)
void setBoolean(java.lang.String,boolean)
int computePasswordQuality(java.lang.String)
long getLong(java.lang.String,long)
android.security.MessageDigest getInstance(java.lang.String)
byte[] digest(byte[])
java.security.SecureRandom getInstance(java.lang.String)
long nextLong()
java.lang.String getSalt()
java.lang.String toHex(byte[])
boolean isVisiblePatternEnabled()
void setVisiblePatternEnabled(boolean)
long setLockoutAttemptDeadline()
long getLockoutAttemptDeadline()
boolean isPermanentlyLocked()
void setPermanentlyLocked(boolean)
java.lang.String getString(android.content.ContentResolver,java.lang.String)
java.lang.String getNextAlarm()
int getInt(android.content.ContentResolver,java.lang.String,int)
boolean putInt(android.content.ContentResolver,java.lang.String,int)
long getLong(android.content.ContentResolver,java.lang.String,long)
boolean putLong(android.content.ContentResolver,java.lang.String,long)
boolean isSecure()
android.telephony.TelephonyManager getDefault()
int getCallState()
void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)
void updateEmergencyCallButtonState(android.widget.Button)
boolean showCallScreen()
boolean resumeCall()
void <init>(boolean)
void checkRange(int,int)
void <init>(android.os.Parcel,com.android.internal.widget.LockPatternView$1)
com.android.internal.widget.LockPatternView$SavedState createFromParcel(android.os.Parcel)
com.android.internal.widget.LockPatternView$SavedState[] newArray(int)
void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)
void setOnChronometerTickListener(android.widget.Chronometer$OnChronometerTickListener)
int getGravity()
long getBase()
void setMax(int)
void setDurationBase(long)
void setProgress(int)
int getProgress()
int getMax()
void onChronometerTick(android.widget.Chronometer)
void init()
void setNotifier(com.android.internal.widget.EditStyledText$EditStyledTextNotifier)
void cancelLongPress()
void onStartEdit()
void onEndEdit()
void onStartCopy()
void onStartCut()
void onStartPaste()
void onStartSize()
void onStartColor()
void onStartBackgroundColor()
void onStartAlign()
void onStartSelect()
void onStartSelectAll()
void onInsertImage(android.net.Uri)
void onInsertImage(int)
void onInsertHorizontalLine()
void onClearStyles()
void setItemColor(int)
void setBackgroundColor(int)
void SetHtml(java.lang.String)
void setHtml(java.lang.String)
boolean isEditting()
boolean isStyledText()
int getEditMode()
int getSelectState()
android.os.Bundle getInputExtras(boolean)
void putBoolean(java.lang.String,boolean)
java.lang.String getHtml()
android.text.Editable getText()
void getUriArray(java.util.ArrayList,android.text.Editable)
java.lang.String getHtml(java.util.ArrayList)
int getBackgroundColor()
int getForeGroundColor(int)
java.lang.Object[] getSpans(int,int,java.lang.Class)
int getForegroundColor()
void setMovementMethod(android.text.method.MovementMethod)
void access$000(com.android.internal.widget.EditStyledText$EditorManager)
void access$100(com.android.internal.widget.EditStyledText$EditorManager)
void onShowForegroundColorAlert()
void onShowBackgroundColorAlert()
void onShowSizeAlert()
void onShowAlignAlert()
void notifyHintMsg(int)
void setHintMessage(int)
void notifyStateChanged(int,int)
void access$600(com.android.internal.widget.EditStyledText,int,int)
void access$700(com.android.internal.widget.EditStyledText)
android.graphics.drawable.Drawable access$800(com.android.internal.widget.EditStyledText)
int access$902(com.android.internal.widget.EditStyledText,int)
int access$900(com.android.internal.widget.EditStyledText)
void access$1000(com.android.internal.widget.EditStyledText,int)
void access$1100(com.android.internal.widget.EditStyledText)
void access$1200(com.android.internal.widget.EditStyledText)
void access$1300(com.android.internal.widget.EditStyledText)
android.view.ViewConfiguration get(android.content.Context)
void setTextSize(float)
void setARGB(int,int,int,int)
android.view.VelocityTracker obtain()
void logInputDeviceCapabilities()
int[] getDeviceIds()
android.view.InputDevice getDevice(int)
void setPrintCoords(boolean)
int getFontMetricsInt(android.graphics.Paint$FontMetricsInt)
void rotate(float,float,float)
void drawOval(android.graphics.RectF,android.graphics.Paint)
void drawOval(android.graphics.Canvas,float,float,float,float,float,android.graphics.Paint)
void drawRect(float,float,float,float,android.graphics.Paint)
com.android.internal.widget.PointerLocationView$FasterStringBuilder clear()
com.android.internal.widget.PointerLocationView$FasterStringBuilder append(java.lang.String)
com.android.internal.widget.PointerLocationView$FasterStringBuilder append(int)
void drawText(java.lang.String,float,float,android.graphics.Paint)
int access$000(com.android.internal.widget.PointerLocationView$PointerState)
boolean access$100(com.android.internal.widget.PointerLocationView$PointerState)
android.view.MotionEvent$PointerCoords access$200(com.android.internal.widget.PointerLocationView$PointerState)
com.android.internal.widget.PointerLocationView$FasterStringBuilder append(float,int)
float[] access$300(com.android.internal.widget.PointerLocationView$PointerState)
float[] access$400(com.android.internal.widget.PointerLocationView$PointerState)
int getScaledTouchSlop()
float access$500(com.android.internal.widget.PointerLocationView$PointerState)
float access$600(com.android.internal.widget.PointerLocationView$PointerState)
boolean isNaN(float)
void drawLine(float,float,float,float,android.graphics.Paint)
void drawPoint(float,float,android.graphics.Paint)
void logPointerCoords(android.view.MotionEvent$PointerCoords,int)
void clearTrace()
boolean access$102(com.android.internal.widget.PointerLocationView$PointerState,boolean)
int getPointerId(int)
int getPointerCount()
void addMovement(android.view.MotionEvent)
void computeCurrentVelocity(int)
int getHistorySize()
void getHistoricalPointerCoords(int,int,android.view.MotionEvent$PointerCoords)
float getHistoricalX(int,int)
float getHistoricalY(int,int)
void addTrace(float,float)
void getPointerCoords(int,android.view.MotionEvent$PointerCoords)
float getXVelocity(int)
float access$502(com.android.internal.widget.PointerLocationView$PointerState,float)
float getYVelocity(int)
float access$602(com.android.internal.widget.PointerLocationView$PointerState,float)
void postInvalidate()
void addTouchEvent(android.view.MotionEvent)
boolean onTrackballEvent(android.view.MotionEvent)
void <init>(com.android.internal.widget.EditStyledText$StyledTextConverter)
com.android.internal.widget.EditStyledText access$1400(com.android.internal.widget.EditStyledText$StyledTextConverter)
android.graphics.Bitmap decodeStream(java.io.InputStream)
void <init>(android.content.res.Resources,android.graphics.Bitmap)
android.graphics.drawable.Drawable getDrawable(java.lang.String)
void <init>(android.content.ContentResolver)
void <init>(com.android.internal.widget.ContactHeaderWidget,android.content.ContentResolver)
com.android.internal.widget.ContactHeaderWidget$QueryHandler access$000(com.android.internal.widget.ContactHeaderWidget)
byte[] getBlob(int)
android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)
android.graphics.Bitmap access$100(com.android.internal.widget.ContactHeaderWidget,android.graphics.BitmapFactory$Options)
android.widget.QuickContactBadge access$200(com.android.internal.widget.ContactHeaderWidget)
void setImageBitmap(android.graphics.Bitmap)
void assignContactUri(android.net.Uri)
void bindContactInfo(android.database.Cursor)
android.net.Uri getLookupUri(long,java.lang.String)
void startPhotoQuery(long,android.net.Uri,boolean)
void setDisplayName(java.lang.CharSequence,java.lang.CharSequence)
void setSocialSnippet(java.lang.CharSequence)
void setPhoto(android.graphics.Bitmap)
void access$300(com.android.internal.widget.ContactHeaderWidget,android.net.Uri,boolean)
void assignContactFromPhone(java.lang.String,boolean)
void assignContactFromEmail(java.lang.String,boolean)
void onQueryComplete(int,java.lang.Object,android.database.Cursor)
void onReleased(boolean)
boolean isInside(int,int)
void <init>(com.android.internal.widget.EditStyledText$EditorManager)
int reserve(int)
void getChars(int,int,char[],int)
com.android.internal.widget.PointerLocationView$FasterStringBuilder append(int,int)
double rint(double)
double floor(double)
void <init>(char[],int,int)
void handleResetEdit()
void handleCancel()
void handleCopy()
void handleCut()
void handlePaste()
void handleSize()
void handleAlign()
void handleColor()
void handleSelect()
void unsetSelect()
void handleSelectAll()
void handleComplete()
void <init>(android.content.Context,android.net.Uri)
void insertImageSpan(android.text.style.ImageSpan)
int getSpanStart(java.lang.Object)
int getSpanEnd(java.lang.Object)
android.text.Editable replace(int,int,java.lang.CharSequence)
void removeSpan(java.lang.Object)
void changeSizeSelectedText(int)
void changeColorSelectedText(int)
void changeAlign(android.text.Layout$Alignment)
void doNextHandle()
int getInputType()
void unblockSoftKey()
void handleTextViewFunc(int,int)
void handleSetSpan(int)
boolean isTextSelected()
void setSelectStartPos()
void blockSoftKey()
void setSelectedEndPos()
void selectAll()
void setSelection()
void setStyledTextSpan(java.lang.Object,int,int)
void <init>(android.text.Layout$Alignment)
int findLineStart(android.text.Editable,int)
int findLineEnd(android.text.Editable,int)
android.text.Editable insert(int,java.lang.CharSequence)
android.os.IBinder getWindowToken()
boolean hideSoftInputFromWindow(android.os.IBinder,int)
android.graphics.Typeface createFromFile(java.lang.String)
void setTypeface(android.graphics.Typeface)
void <init>(android.view.View,android.graphics.Typeface)
java.util.Calendar getInstance()
void setDateFormat()
void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)
void updateTime()
void updateTime(java.util.Calendar)
void setTimeInMillis(long)
java.lang.CharSequence format(java.lang.CharSequence,java.util.Calendar)
int get(int)
void setIsMorning(boolean)
boolean is24HourFormat(android.content.Context)
void setShowAmPm(boolean)
java.util.Calendar access$002(com.android.internal.widget.DigitalClock,java.util.Calendar)
com.android.internal.widget.LockPatternView$DisplayMode valueOf(java.lang.String)
java.lang.String toHtml(android.text.Spanned)
int nextSpanTransition(int,int,java.lang.Class)
java.lang.String getSource()
android.text.Spanned fromHtml(java.lang.String,android.text.Html$ImageGetter,android.text.Html$TagHandler)
java.lang.String[] getAmPmStrings()
void <init>(android.graphics.drawable.shapes.Shape)
void renewColor(int)
void renewBounds(android.view.View)
void renewColor()
android.graphics.Paint getPaint()
android.text.style.ImageSpan getParentSpan()
void <init>(float)
int getScaledMinimumFlingVelocity()
int getScaledMaximumFlingVelocity()
boolean isHoriz()
boolean postTranslate(float,float)
void setLeftHandleResource(int)
void setRightHandleResource(int)
void updateAnimation()
int getYOnArc(int,int,int,int)
void drawCentered(android.graphics.Bitmap,android.graphics.Canvas,int,int)
double sqrt(double)
void computeCurrentVelocity(int,float)
float getXVelocity()
float getYVelocity()
void startAnimationWithVelocity(int,int,int)
void startAnimation(int,int,int)
long currentAnimationTimeMillis()
float getInterpolation(float)
void setOnDialTriggerListener(com.android.internal.widget.RotarySelector$OnDialTriggerListener)
void onDialTrigger(android.view.View,int)
void createKeyboards()
void setOnKeyboardActionListener(android.inputmethodservice.KeyboardView$OnKeyboardActionListener)
void <init>(android.content.Context,android.inputmethodservice.KeyboardView,android.view.View)
boolean isAlpha()
void setKeyboard(android.inputmethodservice.Keyboard)
void setPreviewEnabled(boolean)
void setKeyboardMode(int)
android.os.Handler getHandler()
android.view.KeyCharacterMap load(int)
android.view.KeyEvent[] getEvents(char[])
android.view.KeyEvent changeFlags(android.view.KeyEvent,int)
void sendKeyEventsToTarget(int)
void <init>(long,long,int,int,int,int,int,int,int)
void sendDownUpKeyEvents(int)
void handleBackspace()
void handleShift()
void handleClose()
void handleModeChange()
void handleCharacter(int,int[])
void onKey(int,int[])
void setVibratePattern(int)
android.inputmethodservice.Keyboard getKeyboard()
int toUpperCase(int)
void onPress(int)
void onRelease(int)
void onText(java.lang.CharSequence)
void swipeDown()
void swipeLeft()
void swipeRight()
void swipeUp()
void resetAsyncQueryHandler()
void enableClickListeners()
void setContactHeaderListener(com.android.internal.widget.ContactHeaderWidget$ContactHeaderListener)
void onPhotoClick(android.view.View)
void performPhotoClick()
void onDisplayNameClick(android.view.View)
void performDisplayNameClick()
void setSelectedContactsAppTabIndex(int)
void showAggregateBadge(boolean)
void showStar(boolean)
void setStared(boolean)
int getPresenceIconResourceId(int)
void setPresence(int)
void setContactUri(android.net.Uri,boolean)
void setContactUri(android.net.Uri)
void setExcludeMimes(java.lang.String[])
void bindFromContactUriInternal(android.net.Uri,boolean)
void bindFromContactLookupUri(android.net.Uri)
void startContactQuery(android.net.Uri,boolean)
java.lang.String encode(java.lang.String)
void startQuery(int,java.lang.Object,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)
void bindFromEmail(java.lang.String)
void bindFromPhoneNumber(java.lang.String)
android.graphics.Bitmap loadPlaceholderPhoto(android.graphics.BitmapFactory$Options)
void wipeClean()
java.lang.CharSequence getRelativeTimeSpanString(long,long,long,int)
android.content.res.Resources getResourcesForApplication(java.lang.String)
java.lang.Boolean valueOf(boolean)
void put(java.lang.String,java.lang.Boolean)
android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)
void <init>(android.os.Parcelable,java.lang.String,int,boolean,boolean,boolean)
java.lang.Object readValue(java.lang.ClassLoader)
boolean booleanValue()
void writeValue(java.lang.Object)
void setDefaultTouchRecepient(android.view.View)
void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)
void setLocation(float,float)
void <init>(java.io.Reader)
void resetSyntax()
void wordChars(int,int)
void ordinaryChar(int)
void whitespaceChars(int,int)
void quoteChar(int)
void slashStarComments(boolean)
void slashSlashComments(boolean)
java.io.StreamTokenizer initTokenizer(java.io.Reader)
int interpretType(java.lang.String)
int nextToken()
void <init>(java.io.StreamTokenizer,java.lang.String)
java.lang.Object parseValue(java.io.StreamTokenizer,int)
void parse(java.io.Reader,java.util.Map)
java.lang.Long decode(java.lang.String)
void <init>(byte)
void <init>(short)
void <init>(long)
double parseDouble(java.lang.String)
double abs(double)
boolean isInfinite(double)
boolean isNaN(double)
void <init>(double)
void load(java.io.Reader)
boolean getBoolean(java.lang.String,boolean)
void <init>(java.lang.String,java.lang.Object,java.lang.String)
byte getByte(java.lang.String,byte)
byte byteValue()
short getShort(java.lang.String,short)
short shortValue()
int getInt(java.lang.String,int)
float getFloat(java.lang.String,float)
float floatValue()
double getDouble(java.lang.String,double)
double doubleValue()
java.lang.String getString(java.lang.String,java.lang.String)
byte getByte(java.lang.String)
short getShort(java.lang.String)
int getInt(java.lang.String)
long getLong(java.lang.String)
float getFloat(java.lang.String)
double getDouble(java.lang.String)
java.lang.String getString(java.lang.String)
int getStringInfo(java.lang.String)
int idealByteArraySize(int)
int idealBooleanArraySize(int)
int idealShortArraySize(int)
int idealCharArraySize(int)
int idealIntArraySize(int)
int idealFloatArraySize(int)
int idealObjectArraySize(int)
int idealLongArraySize(int)
boolean equals(byte[],byte[],int)
int identityHashCode(java.lang.Object)
java.lang.Class getComponentType()
java.lang.Object newInstance(java.lang.Class,int)
java.lang.Object[] emptyArray(java.lang.Class)
boolean contains(java.lang.Object[],java.lang.Object)
java.lang.CharSequence forAsciiBytes(byte[],int,int)
java.lang.CharSequence subSequence(int,int)
java.lang.String dumpHexString(byte[],int,int)
java.lang.String dumpHexString(byte[])
void <init>(byte[],int,int)
byte[] toByteArray(byte)
java.lang.String toHexString(byte[])
java.lang.String toHexString(byte)
java.lang.String toHexString(byte[],int,int)
void <init>(char[])
byte[] toByteArray(int)
int toByte(char)
byte[] hexStringToByteArray(java.lang.String)
java.util.List asList(java.lang.Object[])
com.android.internal.util.Predicate and(java.lang.Iterable)
com.android.internal.util.Predicate and(com.android.internal.util.Predicate[])
void <init>(java.lang.Iterable,com.android.internal.util.Predicates$1)
com.android.internal.util.Predicate or(java.lang.Iterable)
com.android.internal.util.Predicate or(com.android.internal.util.Predicate[])
void <init>(com.android.internal.util.Predicate,com.android.internal.util.Predicates$1)
com.android.internal.util.Predicate not(com.android.internal.util.Predicate)
int round(float)
int read(int)
byte[] readByteArray(int)
void skip(int)
java.util.Locale[] getAvailableLocales()
com.android.internal.util.HanziToPinyin getInstance()
java.lang.String toString(char)
int compare(java.lang.String,java.lang.String)
com.android.internal.util.HanziToPinyin$Token getToken(char)
void addToken(java.lang.StringBuilder,java.util.ArrayList,int)
java.util.ArrayList get(java.lang.String)
void <init>(int,java.lang.String,java.lang.String)
void setLength(int)
java.text.Collator getInstance(java.util.Locale)
void <init>(java.io.File,java.io.File)
boolean delete()
boolean renameTo(java.io.File)
java.io.File chooseForRead()
boolean createNewFile()
java.io.File chooseForWrite()
void commit()
void rollback()
void <init>(com.android.internal.util.Predicate)
boolean apply(java.lang.Object)
void printUsage()
void loadLibrary(java.lang.String)
int registerNatives()
java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])
java.lang.Object invoke(java.lang.Object,java.lang.Object[])
void main(java.lang.String[])
void validate(int,int,int)
void <init>(com.android.internal.util.HierarchicalStateMachine$HsmHandler)
boolean processMessage(android.os.Message)
void <init>(com.android.internal.util.HierarchicalStateMachine$HsmHandler,com.android.internal.util.HierarchicalStateMachine$1)
void <init>(android.os.Looper,com.android.internal.util.HierarchicalStateMachine,com.android.internal.util.HierarchicalStateMachine$1)
void initStateMachine(java.lang.String,android.os.Looper)
void <init>(java.lang.String,android.os.Looper)
com.android.internal.util.HierarchicalStateMachine$HsmHandler$StateInfo access$600(com.android.internal.util.HierarchicalStateMachine$HsmHandler,com.android.internal.util.HierarchicalState,com.android.internal.util.HierarchicalState)
void addState(com.android.internal.util.HierarchicalState,com.android.internal.util.HierarchicalState)
android.os.Message access$700(com.android.internal.util.HierarchicalStateMachine$HsmHandler)
android.os.Message getCurrentMessage()
com.android.internal.util.HierarchicalState access$800(com.android.internal.util.HierarchicalStateMachine$HsmHandler)
com.android.internal.util.HierarchicalState getCurrentState()
void addState(com.android.internal.util.HierarchicalState)
void access$900(com.android.internal.util.HierarchicalStateMachine$HsmHandler,com.android.internal.util.HierarchicalState)
void setInitialState(com.android.internal.util.HierarchicalState)
void access$1000(com.android.internal.util.HierarchicalStateMachine$HsmHandler,com.android.internal.util.HierarchicalState)
void transitionTo(com.android.internal.util.HierarchicalState)
com.android.internal.util.HierarchicalStateMachine$HsmHandler$HaltingState access$1100(com.android.internal.util.HierarchicalStateMachine$HsmHandler)
void transitionToHaltingState()
void access$1200(com.android.internal.util.HierarchicalStateMachine$HsmHandler,android.os.Message)
void deferMessage(android.os.Message)
void unhandledMessage(android.os.Message)
void haltedProcessMessage(android.os.Message)
void halting()
void quitting()
void access$1300(com.android.internal.util.HierarchicalStateMachine$HsmHandler,int)
void setProcessedMessagesSize(int)
int access$1400(com.android.internal.util.HierarchicalStateMachine$HsmHandler)
int getProcessedMessagesSize()
int access$1500(com.android.internal.util.HierarchicalStateMachine$HsmHandler)
int getProcessedMessagesCount()
com.android.internal.util.ProcessedMessages$Info access$1600(com.android.internal.util.HierarchicalStateMachine$HsmHandler,int)
com.android.internal.util.ProcessedMessages$Info getProcessedMessage(int)
android.os.Message obtain(android.os.Handler)
android.os.Message obtainMessage()
android.os.Message obtain(android.os.Handler,int)
void sendMessage(int)
void sendMessage(int,java.lang.Object)
void sendMessage(android.os.Message)
boolean sendMessageDelayed(android.os.Message,long)
void sendMessageDelayed(int,long)
void sendMessageDelayed(int,java.lang.Object,long)
void sendMessageDelayed(android.os.Message,long)
boolean sendMessageAtFrontOfQueue(android.os.Message)
void sendMessageAtFrontOfQueue(int,java.lang.Object)
void sendMessageAtFrontOfQueue(int)
void sendMessageAtFrontOfQueue(android.os.Message)
void access$1700(com.android.internal.util.HierarchicalStateMachine$HsmHandler)
void quit()
boolean access$1800(com.android.internal.util.HierarchicalStateMachine$HsmHandler,android.os.Message)
boolean isQuit(android.os.Message)
boolean access$1900(com.android.internal.util.HierarchicalStateMachine$HsmHandler)
boolean isDbg()
void access$2000(com.android.internal.util.HierarchicalStateMachine$HsmHandler,boolean)
void setDbg(boolean)
void access$2100(com.android.internal.util.HierarchicalStateMachine$HsmHandler)
android.os.HandlerThread access$300(com.android.internal.util.HierarchicalStateMachine)
com.android.internal.util.HierarchicalStateMachine access$200(com.android.internal.util.HierarchicalStateMachine$HsmHandler)
void enter()
void exit()
int lastIndexOf(int)
void processMsg(android.os.Message)
void performTransitions()
com.android.internal.util.HierarchicalStateMachine$HsmHandler$StateInfo setupTempStateStackWithStatesToEnter(com.android.internal.util.HierarchicalState)
void invokeExitMethods(com.android.internal.util.HierarchicalStateMachine$HsmHandler$StateInfo)
int moveTempStateStackToStateStack()
void invokeEnterMethods(int)
void moveDeferredMessageAtFrontOfQueue()
void setupInitialStateStack()
void completeConstruction()
void add(android.os.Message,com.android.internal.util.HierarchicalState,com.android.internal.util.HierarchicalState)
com.android.internal.util.HierarchicalStateMachine$HsmHandler$StateInfo addState(com.android.internal.util.HierarchicalState,com.android.internal.util.HierarchicalState)
void <init>(android.os.Looper,com.android.internal.util.HierarchicalStateMachine)
void copyFrom(android.os.Message)
void setSize(int)
int count()
com.android.internal.util.ProcessedMessages$Info get(int)
void possExpand(int)
void write(int,int)
void writeByteArray(int,byte[])
void <init>(com.android.internal.util.ProcessedMessages,android.os.Message,com.android.internal.util.HierarchicalState,com.android.internal.util.HierarchicalState)
void update(android.os.Message,com.android.internal.util.HierarchicalState,com.android.internal.util.HierarchicalState)
int getDepth()
int next()
void skipCurrentTag(org.xmlpull.v1.XmlPullParser)
int convertValueToList(java.lang.CharSequence,java.lang.String[],int)
boolean convertValueToBoolean(java.lang.CharSequence,boolean)
int convertValueToInt(java.lang.CharSequence,int)
int convertValueToUnsignedInt(java.lang.String,int)
int parseUnsignedIntAttribute(java.lang.CharSequence)
long parseLong(java.lang.String,int)
void setOutput(java.io.OutputStream,java.lang.String)
void startDocument(java.lang.String,java.lang.Boolean)
void setFeature(java.lang.String,boolean)
void writeMapXml(java.util.Map,java.lang.String,org.xmlpull.v1.XmlSerializer)
void endDocument()
void writeMapXml(java.util.Map,java.io.OutputStream)
org.xmlpull.v1.XmlSerializer newSerializer()
void writeListXml(java.util.List,java.lang.String,org.xmlpull.v1.XmlSerializer)
void writeListXml(java.util.List,java.io.OutputStream)
org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)
org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)
org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)
void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)
org.xmlpull.v1.XmlSerializer text(java.lang.String)
void writeByteArrayXml(byte[],java.lang.String,org.xmlpull.v1.XmlSerializer)
void writeIntArrayXml(int[],java.lang.String,org.xmlpull.v1.XmlSerializer)
org.xmlpull.v1.XmlPullParser newPullParser()
void setInput(java.io.InputStream,java.lang.String)
java.lang.Object readValueXml(org.xmlpull.v1.XmlPullParser,java.lang.String[])
java.util.HashMap readMapXml(java.io.InputStream)
java.util.ArrayList readListXml(java.io.InputStream)
int getEventType()
java.lang.Object readThisValueXml(org.xmlpull.v1.XmlPullParser,java.lang.String[])
java.util.HashMap readThisMapXml(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String[])
java.util.ArrayList readThisListXml(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String[])
java.lang.String getAttributeValue(java.lang.String,java.lang.String)
int[] readThisIntArrayXml(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String[])
java.lang.Long valueOf(java.lang.String)
java.lang.Boolean valueOf(java.lang.String)
void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)
void nextElement(org.xmlpull.v1.XmlPullParser)
java.lang.CharSequence forAsciiBytes(byte[])
boolean equals(java.lang.CharSequence,java.lang.CharSequence)
int compareToIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)
void <init>(java.lang.Iterable)
int getWhat()
com.android.internal.util.HierarchicalState getState()
com.android.internal.util.HierarchicalState getOriginalState()
java.lang.String cn(java.lang.Object)
java.nio.ByteBuffer allocate(int)
void append(char)
void append(java.lang.String,int,int)
void append(char[],int,int)
void append(java.lang.String)
void escapeAndAppendString(java.lang.String)
void escapeAndAppendString(char[],int,int)
void cdsect(java.lang.String)
void comment(java.lang.String)
void docdecl(java.lang.String)
void entityRef(java.lang.String)
int position()
java.nio.Buffer flip()
byte[] array()
java.nio.Buffer clear()
void flushBytes()
java.nio.CharBuffer wrap(char[],int,int)
java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)
boolean isError()
boolean isOverflow()
void write(char[],int,int)
boolean getFeature(java.lang.String)
java.lang.String getNamespace()
java.lang.String getPrefix(java.lang.String,boolean)
java.lang.Object getProperty(java.lang.String)
void ignorableWhitespace(java.lang.String)
void processingInstruction(java.lang.String)
java.nio.charset.Charset forName(java.lang.String)
java.nio.charset.CharsetEncoder newEncoder()
java.lang.Throwable initCause(java.lang.Throwable)
void setOutput(java.io.Writer)
void setPrefix(java.lang.String,java.lang.String)
void setProperty(java.lang.String,java.lang.Object)
org.xmlpull.v1.XmlSerializer text(char[],int,int)
java.lang.Object nonNull(java.lang.Object)
java.lang.Object nonNull(java.lang.Object,java.lang.String)
void readPowerValuesFromXml(android.content.Context)
android.content.res.XmlResourceParser getXml(int)
java.lang.Double valueOf(java.lang.String)
java.lang.Double valueOf(double)
double getAveragePower(java.lang.String)
double getAveragePower(java.lang.String,int)
double getBatteryCapacity()
int getNumSpeedSteps()
void <init>(java.util.ArrayList,android.os.Parcel)
void <init>(java.util.ArrayList)
int addAndGet(int)
void addCountAtomic(long)
void <init>(com.android.internal.os.HandlerCaller,android.os.Looper)
void <init>(java.lang.String,int,long)
void <init>(com.android.internal.os.PkgUsageStats)
void <init>(com.android.internal.os.BatteryStatsImpl,int,long,int)
void <init>(int,java.util.ArrayList,android.os.Parcel)
void <init>(int,java.util.ArrayList)
void detach()
boolean reset(com.android.internal.os.BatteryStatsImpl,boolean)
long computeRunTimeLocked(long)
void writeToParcel(android.os.Parcel,long)
void unplug(long,long)
int computeCurrentCountLocked()
void plug(long,long)
void writeTimerToParcel(android.os.Parcel,com.android.internal.os.BatteryStatsImpl$Timer,long)
long getTotalTimeLocked(long,int)
int getCountLocked(int)
void logState(android.util.Printer,java.lang.String)
void writeSummaryFromParcelLocked(android.os.Parcel,long)
void readSummaryFromParcelLocked(android.os.Parcel)
void <init>(android.os.BatteryStats$Uid$Pkg)
void <init>(com.android.internal.os.BatteryStatsImpl$Uid$Pkg)
long getStartTimeToNowLocked(long)
void readFromParcelLocked(android.os.Parcel)
void writeToParcelLocked(android.os.Parcel)
long getLaunchTimeToNowLocked(long)
long getBatteryUptimeLocked()
void startLaunchedLocked()
void stopLaunchedLocked()
void startRunningLocked()
void stopRunningLocked()
com.android.internal.os.BatteryStatsImpl getBatteryStats()
int getLaunches(int)
long getStartTime(long,int)
int getStarts(int)
void <init>(com.android.internal.os.storage.ExternalStorageFormatter)
void updateProgressState()
void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)
void registerListener(android.os.storage.StorageEventListener)
void setOnCancelListener(android.content.DialogInterface$OnCancelListener)
int onStartCommand(android.content.Intent,int,int)
void unregisterListener(android.os.storage.StorageEventListener)
android.os.IBinder onBind(android.content.Intent)
android.os.storage.IMountService getMountService()
java.io.File getExternalStorageDirectory()
int mountVolume(java.lang.String)
void stopSelf()
void onCancel(android.content.DialogInterface)
void fail(int)
java.lang.String getExternalStorageState()
void updateProgressDialog(int)
void unmountVolume(java.lang.String,boolean)
void <init>(com.android.internal.os.storage.ExternalStorageFormatter,android.os.storage.IMountService,java.lang.String)
boolean access$000(com.android.internal.os.storage.ExternalStorageFormatter)
boolean access$100(com.android.internal.os.storage.ExternalStorageFormatter)
int formatVolume(java.lang.String)
boolean access$000()
int myPid()
void killProcess(int)
void exit(int)
boolean access$002(boolean)
android.os.IBinder access$100()
void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)
void uncaughtException(java.lang.Thread,java.lang.Throwable)
void <init>(com.android.internal.os.RuntimeInit$1)
void <init>(int,java.lang.String)
void <init>(java.io.OutputStream)
void <init>(java.lang.Appendable,java.util.Locale)
void flush(boolean)
int indexOf(java.lang.String,int)
java.lang.StringBuilder delete(int,int)
java.nio.CharBuffer allocate(int)
java.nio.charset.Charset defaultCharset()
java.nio.charset.CharsetDecoder newDecoder()
java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)
java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)
java.nio.ByteBuffer put(byte[],int,int)
java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)
java.lang.StringBuilder append(java.lang.CharSequence)
java.nio.ByteBuffer compact()
boolean checkError()
void setError()
java.util.Locale getDefault()
java.io.PrintStream format(java.util.Locale,java.lang.String,java.lang.Object[])
java.io.PrintStream format(java.lang.String,java.lang.Object[])
java.io.PrintStream printf(java.lang.String,java.lang.Object[])
java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object[])
java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])
java.lang.StringBuilder append(char[])
void print(char[])
void print(char)
java.lang.StringBuilder append(double)
void print(double)
java.lang.StringBuilder append(float)
void print(float)
void print(int)
void print(long)
void print(java.lang.Object)
void print(java.lang.String)
void print(boolean)
void println()
void println(char[])
void println(char)
void println(double)
void println(float)
void println(int)
void println(long)
void println(java.lang.Object)
int indexOf(int,int)
void println(boolean)
java.io.PrintStream append(char)
java.io.PrintStream append(java.lang.CharSequence)
java.lang.StringBuilder append(java.lang.CharSequence,int,int)
java.io.PrintStream append(java.lang.CharSequence,int,int)
java.lang.Appendable append(java.lang.CharSequence,int,int)
java.lang.Appendable append(java.lang.CharSequence)
java.lang.Appendable append(char)
com.android.internal.os.BatteryStatsImpl createFromParcel(android.os.Parcel)
com.android.internal.os.BatteryStatsImpl[] newArray(int)
java.io.File getBaseFile()
java.io.File getParentFile()
boolean mkdir()
int setPermissions(java.lang.String,int,int,int)
java.io.FileOutputStream startWrite()
boolean sync(java.io.FileOutputStream)
void finishWrite(java.io.FileOutputStream)
void failWrite(java.io.FileOutputStream)
void <init>(java.io.File,boolean)
java.io.FileOutputStream openAppend()
void truncate()
java.io.FileInputStream openRead()
byte[] readFully()
int getCpuSpeedSteps()
void <init>(com.android.internal.os.BatteryStatsImpl$Uid)
int countExcessivePowers()
android.os.BatteryStats$Uid$Proc$ExcessivePower getExcessivePower(int)
void addExcessiveWake(long,long)
void addExcessiveCpu(long,long)
void writeExcessivePowerToParcelLocked(android.os.Parcel)
boolean readExcessivePowerFromParcelLocked(android.os.Parcel)
void writeToParcel(android.os.Parcel)
void addCpuTimeLocked(int,int)
void addForegroundTimeLocked(long)
void incStartsLocked()
long getUserTime(int)
long getSystemTime(int)
long getForegroundTime(int)
void addSpeedStepTimes(long[])
long getTimeAtCpuSpeedStep(int,int)
void <init>(com.android.internal.os.BatteryStatsImpl$Uid,int,java.util.ArrayList,java.util.ArrayList)
void <init>(com.android.internal.os.BatteryStatsImpl,int)
java.util.Map getWakelockStats()
java.util.Map getSensorStats()
java.util.Map getProcessStats()
java.util.Map getPackageStats()
int getUid()
long getTcpBytesReceived(int)
long computeCurrentTcpBytesReceived()
long getUidRxBytes(int)
long getTcpBytesSent(int)
long computeCurrentTcpBytesSent()
void startRunningLocked(com.android.internal.os.BatteryStatsImpl)
void noteWifiRunningLocked()
void stopRunningLocked(com.android.internal.os.BatteryStatsImpl)
void noteWifiStoppedLocked()
void noteFullWifiLockAcquiredLocked()
void noteFullWifiLockReleasedLocked()
void noteScanWifiLockAcquiredLocked()
void noteScanWifiLockReleasedLocked()
void noteWifiMulticastEnabledLocked()
void noteWifiMulticastDisabledLocked()
void noteAudioTurnedOnLocked()
void noteAudioTurnedOffLocked()
void noteVideoTurnedOnLocked()
void noteVideoTurnedOffLocked()
long getWifiRunningTime(long,int)
long getFullWifiLockTime(long,int)
long getScanWifiLockTime(long,int)
long getWifiMulticastTime(long,int)
long getAudioTurnedOnTime(long,int)
long getVideoTurnedOnTime(long,int)
void initUserActivityLocked()
void stepAtomic()
void noteUserActivityLocked(int)
boolean hasUserActivity()
int getUserActivityCount(int,int)
long getUidTxBytes(int)
boolean reset()
java.lang.Object valueAt(int)
void writeToParcelLocked(android.os.Parcel,long)
void readFromParcelLocked(java.util.ArrayList,android.os.Parcel)
void <init>(com.android.internal.os.BatteryStatsImpl$Uid,int)
void <init>(com.android.internal.os.BatteryStatsImpl$Uid,int,java.util.ArrayList,java.util.ArrayList,android.os.Parcel)
com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String)
android.util.SparseArray getPidStats()
void <init>(android.os.BatteryStats$Uid)
void put(int,java.lang.Object)
android.os.BatteryStats$Uid$Pid getPidStatsLocked(int)
com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(java.lang.String)
com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv newServiceStatsLocked()
com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(java.lang.String,java.lang.String)
com.android.internal.os.BatteryStatsImpl$StopwatchTimer getWakeTimerLocked(java.lang.String,int)
com.android.internal.os.BatteryStatsImpl$StopwatchTimer getSensorTimerLocked(int,boolean)
void noteStartWakeLocked(int,java.lang.String,int)
void noteStopWakeLocked(int,java.lang.String,int)
void reportExcessiveWakeLocked(java.lang.String,long,long)
void reportExcessiveCpuLocked(java.lang.String,long,long)
void noteStartSensor(int)
void noteStopSensor(int)
void noteStartGps()
void noteStopGps()
java.util.Map getKernelWakelockStats()
java.util.Map parseProcWakelocks(byte[],int)
java.util.Map readKernelWakelockStats()
boolean parseProcLine(byte[],int,int,int[],java.lang.String[],long[],float[])
void <init>(java.util.ArrayList,boolean,boolean)
com.android.internal.os.BatteryStatsImpl$SamplingTimer getKernelWakelockTimerLocked(java.lang.String)
void doDataPlug(long[],long)
void doDataUnplug(long[],long)
long getCurrentRadioDataUptime()
java.lang.String readLine()
long parseLong(java.lang.String)
long getRadioDataUptime()
long getRadioDataUptimeMs()
int getBatteryUsageHint()
int getCurrentBluetoothPingCount()
int getBluetoothPingCount()
boolean isOnBattery()
void setBtHeadset(android.bluetooth.BluetoothHeadset)
boolean same(android.os.BatteryStats$HistoryItem)
void setTo(long,byte,android.os.BatteryStats$HistoryItem)
void addHistoryRecordLocked(long,byte)
void addHistoryRecordLocked(long)
void addHistoryRecordLocked(android.os.BatteryStats$HistoryItem)
void clearHistoryLocked()
long getMobileRxBytes()
long getMobileTxBytes()
long getTotalRxBytes()
long getTotalTxBytes()
void doUnplugLocked(long,long)
void doPlugLocked(long,long)
boolean hasMessages(int)
com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(int)
void noteStartWakeLocked(int,int,java.lang.String,int)
void noteStopWakeLocked(int,int,java.lang.String,int)
void noteStartWakeFromSourceLocked(android.os.WorkSource,int,java.lang.String,int)
void noteStopWakeFromSourceLocked(android.os.WorkSource,int,java.lang.String,int)
void removeMessages(int)
int startAddingCpuLocked()
void finishAddingCpuLocked(int,int,int,long[])
void noteProcessDiedLocked(int,int)
long getProcessWakeTime(int,int,long)
void reportExcessiveWakeLocked(int,java.lang.String,long,long)
void reportExcessiveCpuLocked(int,java.lang.String,long,long)
void noteStartSensorLocked(int,int)
void noteStopSensorLocked(int,int)
void noteStartGpsLocked(int)
void noteStopGpsLocked(int)
void updateDischargeScreenLevels(boolean,boolean)
void noteScreenOnLocked()
void noteScreenOffLocked()
void noteScreenBrightnessLocked(int)
void noteInputEventAtomic()
void noteUserActivityLocked(int,int)
void notePhoneOnLocked()
void notePhoneOffLocked()
boolean isRunningLocked()
void stopAllSignalStrengthTimersLocked(int)
int fixPhoneServiceState(int,int)
void updateAllPhoneStateLocked(int,int,int)
void notePhoneStateLocked(int,int)
boolean isGsm()
int getCdmaDbm()
int getGsmSignalStrength()
void notePhoneSignalStrengthLocked(android.telephony.SignalStrength)
void notePhoneDataConnectionStateLocked(int,boolean)
void noteWifiOnLocked()
void noteWifiOffLocked()
void noteAudioOnLocked(int)
void noteAudioOffLocked(int)
void noteVideoOnLocked(int)
void noteVideoOffLocked(int)
void noteWifiRunningLocked(android.os.WorkSource)
void noteWifiRunningChangedLocked(android.os.WorkSource,android.os.WorkSource)
void noteWifiStoppedLocked(android.os.WorkSource)
void noteBluetoothOnLocked()
void noteBluetoothOffLocked()
void noteFullWifiLockAcquiredLocked(int)
void noteFullWifiLockReleasedLocked(int)
void noteScanWifiLockAcquiredLocked(int)
void noteScanWifiLockReleasedLocked(int)
void noteWifiMulticastEnabledLocked(int)
void noteWifiMulticastDisabledLocked(int)
void noteFullWifiLockAcquiredFromSourceLocked(android.os.WorkSource)
void noteFullWifiLockReleasedFromSourceLocked(android.os.WorkSource)
void noteScanWifiLockAcquiredFromSourceLocked(android.os.WorkSource)
void noteScanWifiLockReleasedFromSourceLocked(android.os.WorkSource)
void noteWifiMulticastEnabledFromSourceLocked(android.os.WorkSource)
void noteWifiMulticastDisabledFromSourceLocked(android.os.WorkSource)
long getScreenOnTime(long,int)
long getScreenBrightnessTime(int,long,int)
int getInputEventCount(int)
long getPhoneOnTime(long,int)
long getPhoneSignalStrengthTime(int,long,int)
long getPhoneSignalScanningTime(long,int)
int getPhoneSignalStrengthCount(int,int)
long getPhoneDataConnectionTime(int,long,int)
int getPhoneDataConnectionCount(int,int)
long getWifiOnTime(long,int)
long getGlobalWifiRunningTime(long,int)
long getBluetoothOnTime(long,int)
boolean getIsOnBattery()
android.util.SparseArray getUidStats()
void <init>(com.android.internal.os.BatteryStatsImpl)
void initTimes()
long getBatteryUptimeLocked(long)
long getBatteryRealtimeLocked(long)
void initDischarge()
void setCallback(com.android.internal.os.BatteryStatsImpl$BatteryCallback)
void setNumSpeedSteps(int)
void setTimeout(long)
void setRadioScanningTimeout(long)
boolean startIteratingHistoryLocked()
boolean getNextHistoryLocked(android.os.BatteryStats$HistoryItem)
void setTo(android.os.BatteryStats$HistoryItem)
android.os.BatteryStats$HistoryItem getHistory()
long getHistoryBaseTime()
int getStartCount()
int keyAt(int)
void resetAllStatsLocked()
void updateKernelWakelocksLocked()
void writeAsyncLocked()
void setOnBattery(boolean,int,int)
void updateCurrentReportedCount(int)
void updateCurrentReportedTotalTime(long)
void setUpdateVersion(int)
int getUpdateVersion()
void setStale()
long computeBatteryUptime(long,int)
long computeUptime(long,int)
long computeRealtime(long,int)
long getBatteryUptime(long)
long computeBatteryRealtime(long,int)
long getBatteryRealtime(long)
long getTcpBytes(long,long[],int)
long getMobileTcpBytesSent(int)
long getMobileTcpBytesReceived(int)
long getTotalTcpBytesSent(int)
long getTotalTcpBytesReceived(int)
int getDischargeStartLevelLocked()
int getDischargeStartLevel()
int getDischargeCurrentLevelLocked()
int getDischargeCurrentLevel()
int getLowDischargeAmountSinceCharge()
int getHighDischargeAmountSinceCharge()
int getDischargeAmountScreenOn()
int getDischargeAmountScreenOnSinceCharge()
int getDischargeAmountScreenOff()
int getDischargeAmountScreenOffSinceCharge()
void removeUidStatsLocked(int)
com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(int,java.lang.String)
int getUidForPid(int)
com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String,int)
com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(int,java.lang.String)
com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(int,java.lang.String,java.lang.String)
void distributeWorkLocked(int)
void writeSyncLocked()
void shutdownLocked()
void writeLocked(boolean)
void writeSummaryToParcel(android.os.Parcel)
void commitPendingDataToDisk()
void <init>(com.android.internal.os.BatteryStatsImpl,java.lang.String)
byte[] marshall()
byte[] readFully(java.io.FileInputStream)
void unmarshall(byte[],int,int)
void setDataPosition(int)
void readSummaryFromParcel(android.os.Parcel)
void readLocked()
void <init>(long,android.os.Parcel)
void readHistory(android.os.Parcel)
void writeHistory(android.os.Parcel)
void writeSummaryFromParcelLocked(android.os.Parcel)
void <init>(java.util.ArrayList,boolean,android.os.Parcel)
void append(int,java.lang.Object)
void writeToParcelLocked(android.os.Parcel,boolean,int)
void writeToParcelWithoutUids(android.os.Parcel,int)
void dumpLocked(java.io.PrintWriter)
com.android.internal.os.BatteryStatsImpl$BatteryCallback access$000(com.android.internal.os.BatteryStatsImpl)
void refreshTimersLocked(com.android.internal.os.BatteryStatsImpl,java.util.ArrayList)
android.os.Looper getMainLooper()
void <init>(android.content.Context,com.android.internal.os.HandlerCaller$Callback)
void <init>(android.content.Context,android.os.Looper,com.android.internal.os.HandlerCaller$Callback)
com.android.internal.os.HandlerCaller$SomeArgs obtainArgs()
void recycleArgs(com.android.internal.os.HandlerCaller$SomeArgs)
void executeOrSendMessage(android.os.Message)
void removeMessages(int,java.lang.Object)
android.os.Message obtainMessageBO(int,boolean,java.lang.Object)
android.os.Message obtainMessageBOO(int,boolean,java.lang.Object,java.lang.Object)
android.os.Message obtainMessageI(int,int)
android.os.Message obtainMessageIIO(int,int,int,java.lang.Object)
android.os.Message obtainMessageIIOO(int,int,int,java.lang.Object,java.lang.Object)
android.os.Message obtainMessageIOO(int,int,java.lang.Object,java.lang.Object)
android.os.Message obtainMessageOOO(int,java.lang.Object,java.lang.Object,java.lang.Object)
android.os.Message obtainMessageOOOO(int,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)
android.os.Message obtainMessageIIII(int,int,int,int,int)
android.os.Message obtainMessageIIIIII(int,int,int,int,int,int,int)
android.os.Message obtainMessageIIIIO(int,int,int,int,int,java.lang.Object)
java.io.OutputStream getOutputStream()
java.io.InputStream getInputStream()
void <init>(java.io.InputStream)
void <init>(java.io.Reader,int)
void setSoTimeout(int)
android.net.Credentials getPeerCredentials()
void <init>(android.net.LocalSocket)
java.io.FileDescriptor getFileDescriptor()
java.io.FileDescriptor getFileDesciptor()
boolean runOnce()
java.lang.String[] readArgumentList()
java.io.FileDescriptor[] getAncillaryFileDescriptors()
void closeSocket()
void <init>(java.io.FileDescriptor)
void <init>(java.lang.String[])
void applyUidSecurityPolicy(com.android.internal.os.ZygoteConnection$Arguments,android.net.Credentials)
void applyDebuggerSecurityPolicy(com.android.internal.os.ZygoteConnection$Arguments)
void applyRlimitSecurityPolicy(com.android.internal.os.ZygoteConnection$Arguments,android.net.Credentials)
void applyCapabilitiesSecurityPolicy(com.android.internal.os.ZygoteConnection$Arguments,android.net.Credentials)
int forkAndSpecialize(int,int,int[],int,int[][])
void logAndPrintError(java.io.PrintStream,java.lang.String,java.lang.Throwable)
void handleChildProc(com.android.internal.os.ZygoteConnection$Arguments,java.io.FileDescriptor[],java.io.PrintStream)
boolean handleParentProc(int,java.io.FileDescriptor[],com.android.internal.os.ZygoteConnection$Arguments)
java.lang.String get(java.lang.String)
int getGid()
int getPid()
long capgetPermitted(int)
void setCloseOnExec(java.io.FileDescriptor,boolean)
void closeServerSocket()
void reopenStdio(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor)
void closeDescriptor(java.io.FileDescriptor)
void zygoteInit(java.lang.String[])
java.lang.ClassLoader getSystemClassLoader()
void <init>(java.lang.String,java.lang.ClassLoader)
void invokeStaticMain(java.lang.ClassLoader,java.lang.String,java.lang.String[])
int getpgid(int)
int setpgid(int,int)
java.lang.Class loadClass(java.lang.String)
int getModifiers()
boolean isStatic(int)
boolean isPublic(int)
void <init>(java.lang.reflect.Method,java.lang.String[])
java.lang.String getenv(java.lang.String)
java.io.FileDescriptor createFileDescriptor(int)
void registerZygoteSocket()
android.net.LocalSocket accept()
com.android.internal.os.ZygoteConnection acceptCommandPeer()
int setreuid(int,int)
void setEffectiveUser(int)
int setregid(int,int)
void setEffectiveGroup(int)
dalvik.system.VMRuntime getRuntime()
java.lang.ClassLoader getClassLoader()
java.io.InputStream getResourceAsStream(java.lang.String)
float getTargetHeapUtilization()
float setTargetHeapUtilization(float)
void gcSoftReferences()
void runFinalizationSync()
void startAllocCounting()
int getGlobalAllocSize()
void resetGlobalAllocSize()
void stopAllocCounting()
void preloadClasses()
long nanoTime()
boolean cacheRegisterMap(java.lang.String)
void cacheRegisterMaps()
void startPreloading()
android.content.res.TypedArray obtainTypedArray(int)
int preloadDrawables(dalvik.system.VMRuntime,android.content.res.TypedArray)
int preloadColorStateLists(dalvik.system.VMRuntime,android.content.res.TypedArray)
void finishPreloading()
void preloadResources()
android.content.res.ColorStateList getColorStateList(int)
int getChangingConfigurations()
void handleSystemServerProcess(com.android.internal.os.ZygoteConnection$Arguments)
int forkSystemServer(int,int,int[],int,int[][],long,long)
boolean startSystemServer()
long setMinimumHeapSize(long)
int writeEvent(int,long)
void writeZygoteSnapshot()
void runSelectLoopMode()
int fork()
void runForkMode()
int selectReadable(java.io.FileDescriptor[])
void setThreadPriority(int)
void set(int)
void writeCounterToParcel(android.os.Parcel,com.android.internal.os.BatteryStatsImpl$Counter)
int incrementAndGet()
com.android.internal.os.IResultReceiver asInterface(android.os.IBinder)
void send(int,android.os.Bundle)
void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
int getQwertyKeyboard()
java.lang.String setProperty(java.lang.String,java.lang.String)
void setInstance(org.apache.harmony.luni.internal.util.TimezoneGetter)
void setDefault(java.util.TimeZone)
java.util.logging.LogManager getLogManager()
java.lang.String getDefaultUserAgent()
void enableEmulatorTraceOutput()
void commonInit()
java.lang.String getProperty(java.lang.String)
void invokeStaticMain(java.lang.String,java.lang.String[])
void finishInit()
void setOut(java.io.PrintStream)
void setErr(java.io.PrintStream)
void zygoteInitNative()
void setArgV0(java.lang.String)
boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)
void wtf(java.lang.String,java.lang.Throwable)
void setApplicationObject(android.os.IBinder)
android.os.IBinder getApplicationObject()
void registerHandlers()
com.android.internal.os.PkgUsageStats createFromParcel(android.os.Parcel)
com.android.internal.os.PkgUsageStats[] newArray(int)
boolean mkdirs()
boolean isDirectory()
void access$000(java.lang.String,java.lang.String)
com.android.internal.os.BatteryStatsImpl$StopwatchTimer readTimerFromParcel(int,java.util.ArrayList,java.util.ArrayList,android.os.Parcel)
com.android.internal.os.BatteryStatsImpl$Timer getWakeTime(int)
android.os.BatteryStats$Timer getWakeTime(int)
java.lang.String getId()
com.android.internal.os.IDropBoxManagerService asInterface(android.os.IBinder)
void add(android.os.DropBoxManager$Entry)
boolean isTagEnabled(java.lang.String)
android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)
long getLastGcTime()
int writeEvent(int,java.lang.String)
java.lang.Runtime getRuntime()
void forceGc(java.lang.String)
void forceBinderGc()
com.android.internal.os.BatteryStatsImpl$StopwatchTimer readTimerFromParcel(java.util.ArrayList,android.os.Parcel)
com.android.internal.os.BatteryStatsImpl$Timer getSensorTime()
int getHandle()
android.os.BatteryStats$Timer getSensorTime()
java.lang.ThreadGroup getThreadGroup()
dalvik.system.SamplingProfiler$ThreadSet newThreadGroupTheadSet(java.lang.ThreadGroup)
void <init>(int,dalvik.system.SamplingProfiler$ThreadSet)
void writeSnapshot(java.lang.String)
void writeSnapshot(java.lang.String,java.lang.String)
java.lang.String replace(char,char)
void writeHprofData(java.io.PrintStream)
java.util.concurrent.ExecutorService newSingleThreadExecutor()
void handleGc()
void finalize()
void batteryNeedsCpuUpdate()
void batteryPowerChanged(boolean)
java.util.Map getServiceStats()
int getWakeups(int)
void incWakeupsLocked()
void parseArgs(java.lang.String[])
java.lang.String[] split(java.lang.String,int)
boolean match(java.security.cert.X509Certificate,java.lang.String)
java.lang.String toLowerCase()
boolean isIpAddress(java.lang.String)
boolean matchDns(java.security.cert.X509Certificate,java.lang.String)
boolean matchIpAddress(java.security.cert.X509Certificate,java.lang.String)
java.util.Collection getSubjectAlternativeNames()
boolean matchDns(java.lang.String,java.lang.String)
javax.security.auth.x500.X500Principal getSubjectX500Principal()
void <init>(javax.security.auth.x500.X500Principal)
java.lang.String find(java.lang.String)
boolean domainTokenMatch(java.lang.String,java.lang.String)
java.lang.String getName(java.lang.String)
java.lang.String nextAT()
char getEscaped()
java.lang.String quotedAV()
int getByte(int)
java.lang.String hexAV()
java.lang.String escapedAV()
char getUTF8()
char[] toCharArray()
void <init>(com.android.internal.database.SortCursor)
void registerDataSetObserver(android.database.DataSetObserver)
boolean isAfterLast()
int compareToIgnoreCase(java.lang.String)
void <init>(android.database.Cursor[],java.lang.String)
boolean onMove(int,int)
boolean moveToPosition(int)
boolean deleteRow()
boolean commitUpdates()
short getShort(int)
float getFloat(int)
double getDouble(int)
java.lang.String[] getColumnNames()
void unregisterDataSetObserver(android.database.DataSetObserver)
int access$002(com.android.internal.database.SortCursor,int)
int access$102(com.android.internal.database.SortCursor,int)
void onChanged()
void onInvalidated()
void onDialogClosed(boolean)
boolean callChangeListener(java.lang.Object)
void setValue(boolean)
boolean persistBoolean(boolean)
void notifyDependencyChange(boolean)
boolean getValue()
boolean getBoolean(int,boolean)
java.lang.Object onGetDefaultValue(android.content.res.TypedArray,int)
boolean getPersistedBoolean(boolean)
void onSetInitialValue(boolean,java.lang.Object)
boolean shouldDisableDependents()
boolean isPersistent()
com.android.internal.preference.YesNoPreference$SavedState createFromParcel(android.os.Parcel)
com.android.internal.preference.YesNoPreference$SavedState[] newArray(int)
com.android.internal.telephony.DataConnectionTracker$State[] values()
void <init>(com.android.internal.telephony.RIL)
void access$000(com.android.internal.telephony.RIL,boolean)
com.android.internal.telephony.CommandsInterface$RadioState getRadioState()
void <init>(android.os.Handler,int,java.lang.Object)
void add(android.os.Registrant)
void notifyRegistrant()
void registerForRadioStateChanged(android.os.Handler,int,java.lang.Object)
void remove(android.os.Handler)
void unregisterForRadioStateChanged(android.os.Handler)
boolean isOn()
void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)
void notifyRegistrant(android.os.AsyncResult)
void registerForOn(android.os.Handler,int,java.lang.Object)
void unregisterForOn(android.os.Handler)
boolean isAvailable()
void registerForAvailable(android.os.Handler,int,java.lang.Object)
void unregisterForAvailable(android.os.Handler)
void registerForNotAvailable(android.os.Handler,int,java.lang.Object)
void unregisterForNotAvailable(android.os.Handler)
void registerForOffOrNotAvailable(android.os.Handler,int,java.lang.Object)
void unregisterForOffOrNotAvailable(android.os.Handler)
boolean isSIMReady()
void registerForSIMReady(android.os.Handler,int,java.lang.Object)
void unregisterForSIMReady(android.os.Handler)
boolean isRUIMReady()
void registerForRUIMReady(android.os.Handler,int,java.lang.Object)
void unregisterForRUIMReady(android.os.Handler)
boolean isNVReady()
void registerForNVReady(android.os.Handler,int,java.lang.Object)
void unregisterForNVReady(android.os.Handler)
void registerForSIMLockedOrAbsent(android.os.Handler,int,java.lang.Object)
void unregisterForSIMLockedOrAbsent(android.os.Handler)
void registerForRUIMLockedOrAbsent(android.os.Handler,int,java.lang.Object)
void unregisterForRUIMLockedOrAbsent(android.os.Handler)
void registerForCallStateChanged(android.os.Handler,int,java.lang.Object)
void unregisterForCallStateChanged(android.os.Handler)
void registerForNetworkStateChanged(android.os.Handler,int,java.lang.Object)
void unregisterForNetworkStateChanged(android.os.Handler)
void registerForDataStateChanged(android.os.Handler,int,java.lang.Object)
void unregisterForDataStateChanged(android.os.Handler)
void registerForRadioTechnologyChanged(android.os.Handler,int,java.lang.Object)
void unregisterForRadioTechnologyChanged(android.os.Handler)
void registerForIccStatusChanged(android.os.Handler,int,java.lang.Object)
void unregisterForIccStatusChanged(android.os.Handler)
void setOnNewSMS(android.os.Handler,int,java.lang.Object)
void unSetOnNewSMS(android.os.Handler)
void setOnNewGsmBroadcastSms(android.os.Handler,int,java.lang.Object)
void unSetOnNewGsmBroadcastSms(android.os.Handler)
void setOnSmsOnSim(android.os.Handler,int,java.lang.Object)
void unSetOnSmsOnSim(android.os.Handler)
void setOnSmsStatus(android.os.Handler,int,java.lang.Object)
void unSetOnSmsStatus(android.os.Handler)
void setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)
void unSetOnSignalStrengthUpdate(android.os.Handler)
void setOnNITZTime(android.os.Handler,int,java.lang.Object)
void unSetOnNITZTime(android.os.Handler)
void setOnUSSD(android.os.Handler,int,java.lang.Object)
void unSetOnUSSD(android.os.Handler)
void setOnSuppServiceNotification(android.os.Handler,int,java.lang.Object)
void unSetOnSuppServiceNotification(android.os.Handler)
void setOnStkSessionEnd(android.os.Handler,int,java.lang.Object)
void unSetOnStkSessionEnd(android.os.Handler)
void setOnStkProactiveCmd(android.os.Handler,int,java.lang.Object)
void unSetOnStkProactiveCmd(android.os.Handler)
void setOnStkEvent(android.os.Handler,int,java.lang.Object)
void unSetOnStkEvent(android.os.Handler)
void setOnStkCallSetUp(android.os.Handler,int,java.lang.Object)
void unSetOnStkCallSetUp(android.os.Handler)
void setOnIccSmsFull(android.os.Handler,int,java.lang.Object)
void unSetOnIccSmsFull(android.os.Handler)
void setOnIccRefresh(android.os.Handler,int,java.lang.Object)
void setEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)
void unSetOnIccRefresh(android.os.Handler)
void setOnCallRing(android.os.Handler,int,java.lang.Object)
void unSetOnCallRing(android.os.Handler)
void registerForInCallVoicePrivacyOn(android.os.Handler,int,java.lang.Object)
void unregisterForInCallVoicePrivacyOn(android.os.Handler)
void registerForInCallVoicePrivacyOff(android.os.Handler,int,java.lang.Object)
void unregisterForInCallVoicePrivacyOff(android.os.Handler)
void setOnRestrictedStateChanged(android.os.Handler,int,java.lang.Object)
void unSetOnRestrictedStateChanged(android.os.Handler)
void registerForDisplayInfo(android.os.Handler,int,java.lang.Object)
void unregisterForDisplayInfo(android.os.Handler)
void registerForCallWaitingInfo(android.os.Handler,int,java.lang.Object)
void unregisterForCallWaitingInfo(android.os.Handler)
void registerForSignalInfo(android.os.Handler,int,java.lang.Object)
void setOnUnsolOemHookRaw(android.os.Handler,int,java.lang.Object)
void unSetOnUnsolOemHookRaw(android.os.Handler)
void unregisterForSignalInfo(android.os.Handler)
void registerForCdmaOtaProvision(android.os.Handler,int,java.lang.Object)
void unregisterForCdmaOtaProvision(android.os.Handler)
void registerForNumberInfo(android.os.Handler,int,java.lang.Object)
void unregisterForNumberInfo(android.os.Handler)
void registerForRedirectedNumberInfo(android.os.Handler,int,java.lang.Object)
void unregisterForRedirectedNumberInfo(android.os.Handler)
void registerForLineControlInfo(android.os.Handler,int,java.lang.Object)
void unregisterForLineControlInfo(android.os.Handler)
void registerFoT53ClirlInfo(android.os.Handler,int,java.lang.Object)
void unregisterForT53ClirInfo(android.os.Handler)
void registerForT53AudioControlInfo(android.os.Handler,int,java.lang.Object)
void unregisterForT53AudioControlInfo(android.os.Handler)
void registerForRingbackTone(android.os.Handler,int,java.lang.Object)
void unregisterForRingbackTone(android.os.Handler)
void registerForResendIncallMute(android.os.Handler,int,java.lang.Object)
void unregisterForResendIncallMute(android.os.Handler)
void notifyRegistrants()
void onRadioAvailable()
boolean isCdma()
void setRadioState(com.android.internal.telephony.CommandsInterface$RadioState)
java.lang.String getCnapName()
java.lang.String getOrigDialString()
int getCnapNamePresentation()
com.android.internal.telephony.Call getCall()
com.android.internal.telephony.Call$State getState()
boolean isAlive()
boolean isRinging()
java.lang.Object getUserData()
void setUserData(java.lang.Object)
void clearUserData()
java.lang.String getAddress()
int getNumberPresentation()
java.lang.String getRemainingPostDialString()
boolean isIncoming()
com.android.internal.telephony.Connection$PostDialState getPostDialState()
void <init>(com.android.internal.telephony.SMSDispatcher)
java.lang.String getAddressString()
boolean isAlphanumeric()
boolean isNetworkSpecific()
boolean couldBeEmailGateway()
com.android.internal.telephony.IExtendedNetworkService asInterface(android.os.IBinder)
void setMmiString(java.lang.String)
java.lang.CharSequence getMmiRunningText()
java.lang.CharSequence getUserMessage(java.lang.CharSequence)
void clearMmiString()
int readRilMessage(java.io.InputStream,byte[])
void <init>(com.android.internal.telephony.RIL,android.os.Looper)
com.android.internal.telephony.RILRequest obtain(int,android.os.Message)
java.lang.String serialString()
java.lang.String requestToString(int)
void riljLog(java.lang.String)
void send(com.android.internal.telephony.RILRequest)
void getIccCardStatus(android.os.Message)
void supplyIccPin(java.lang.String,android.os.Message)
void supplyIccPuk(java.lang.String,java.lang.String,android.os.Message)
void supplyIccPin2(java.lang.String,android.os.Message)
void supplyIccPuk2(java.lang.String,java.lang.String,android.os.Message)
void changeIccPin(java.lang.String,java.lang.String,android.os.Message)
void changeIccPin2(java.lang.String,java.lang.String,android.os.Message)
void changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
void supplyNetworkDepersonalization(java.lang.String,android.os.Message)
void getCurrentCalls(android.os.Message)
void getDataCallList(android.os.Message)
void getPDPContextList(android.os.Message)
void dial(java.lang.String,int,com.android.internal.telephony.UUSInfo,android.os.Message)
void dial(java.lang.String,int,android.os.Message)
int getDcs()
byte[] getUserData()
void getIMSI(android.os.Message)
void getIMEI(android.os.Message)
void getIMEISV(android.os.Message)
void hangupConnection(int,android.os.Message)
void hangupWaitingOrBackground(android.os.Message)
void hangupForegroundResumeBackground(android.os.Message)
void switchWaitingOrHoldingAndActive(android.os.Message)
void conference(android.os.Message)
void setPreferredVoicePrivacy(boolean,android.os.Message)
void getPreferredVoicePrivacy(android.os.Message)
void separateConnection(int,android.os.Message)
void acceptCall(android.os.Message)
void rejectCall(android.os.Message)
void explicitCallTransfer(android.os.Message)
void getLastCallFailCause(android.os.Message)
void getLastDataCallFailCause(android.os.Message)
void getLastPdpFailCause(android.os.Message)
void setMute(boolean,android.os.Message)
void getMute(android.os.Message)
void getSignalStrength(android.os.Message)
void getRegistrationState(android.os.Message)
void getGPRSRegistrationState(android.os.Message)
void getOperator(android.os.Message)
void sendDtmf(char,android.os.Message)
void startDtmf(char,android.os.Message)
void stopDtmf(android.os.Message)
void sendBurstDtmf(java.lang.String,int,int,android.os.Message)
void sendSMS(java.lang.String,java.lang.String,android.os.Message)
void writeByte(byte)
byte readByte()
void sendCdmaSms(byte[],android.os.Message)
void deleteSmsOnSim(int,android.os.Message)
void deleteSmsOnRuim(int,android.os.Message)
int translateStatus(int)
void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)
void writeSmsToRuim(int,java.lang.String,android.os.Message)
void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)
void setupDefaultPDP(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
void deactivateDataCall(int,android.os.Message)
void deactivateDefaultPDP(int,android.os.Message)
void setRadioPower(boolean,android.os.Message)
void setSuppServiceNotifications(boolean,android.os.Message)
void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)
void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)
void iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)
void getCLIR(android.os.Message)
void setCLIR(int,android.os.Message)
void queryCallWaiting(int,android.os.Message)
void setCallWaiting(boolean,int,android.os.Message)
void setNetworkSelectionModeAutomatic(android.os.Message)
void setNetworkSelectionModeManual(java.lang.String,android.os.Message)
void getNetworkSelectionMode(android.os.Message)
void getAvailableNetworks(android.os.Message)
int toaFromString(java.lang.String)
void setCallForward(int,int,int,java.lang.String,int,android.os.Message)
void queryCallForwardStatus(int,int,java.lang.String,android.os.Message)
void queryCLIP(android.os.Message)
void getBasebandVersion(android.os.Message)
void queryFacilityLock(java.lang.String,java.lang.String,int,android.os.Message)
void setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)
void sendUSSD(java.lang.String,android.os.Message)
void cancelPendingUssd(android.os.Message)
void resetRadio(android.os.Message)
java.lang.String bytesToHexString(byte[])
void invokeOemRilRequestRaw(byte[],android.os.Message)
void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)
void setBandMode(int,android.os.Message)
void queryAvailableBandMode(android.os.Message)
void sendTerminalResponse(java.lang.String,android.os.Message)
void sendEnvelope(java.lang.String,android.os.Message)
void handleCallSetupRequestFromSim(boolean,android.os.Message)
void setPreferredNetworkType(int,android.os.Message)
void getPreferredNetworkType(android.os.Message)
void getNeighboringCids(android.os.Message)
void setLocationUpdates(boolean,android.os.Message)
void getSmscAddress(android.os.Message)
void setSmscAddress(java.lang.String,android.os.Message)
void reportSmsMemoryStatus(boolean,android.os.Message)
void reportStkServiceIsRunning(android.os.Message)
void getGsmBroadcastConfig(android.os.Message)
int getFromServiceId()
int getToServiceId()
int getFromCodeScheme()
int getToCodeScheme()
boolean isSelected()
void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)
void setGsmBroadcastActivation(boolean,android.os.Message)
void sendScreenState(boolean)
void setRadioStateFromRILInt(int)
void acquireWakeLock()
void releaseWakeLockIfDone()
void processUnsolicited(android.os.Parcel)
void processSolicited(android.os.Parcel)
void processResponse(android.os.Parcel)
void onError(int,java.lang.Object)
void clearRequestsList(int,boolean)
com.android.internal.telephony.RILRequest findAndRemoveRequestFromList(int)
int dataAvail()
java.lang.Object responseIccCardStatus(android.os.Parcel)
java.lang.Object responseInts(android.os.Parcel)
java.lang.Object responseCallList(android.os.Parcel)
java.lang.Object responseVoid(android.os.Parcel)
java.lang.Object responseString(android.os.Parcel)
java.lang.Object responseSignalStrength(android.os.Parcel)
java.lang.Object responseStrings(android.os.Parcel)
java.lang.Object responseSMS(android.os.Parcel)
java.lang.Object responseICC_IO(android.os.Parcel)
java.lang.Object responseCallForward(android.os.Parcel)
java.lang.Object responseNetworkInfos(android.os.Parcel)
java.lang.Object responseDataCallList(android.os.Parcel)
java.lang.Object responseRaw(android.os.Parcel)
java.lang.Object responseCellList(android.os.Parcel)
java.lang.Object responseGmsBroadcastConfig(android.os.Parcel)
java.lang.Object responseCdmaBroadcastConfig(android.os.Parcel)
android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)
java.lang.String retToString(int,java.lang.Object)
java.lang.Object responseSuppServiceNotification(android.os.Parcel)
java.lang.Object responseCallRing(android.os.Parcel)
java.lang.Object responseCdmaSms(android.os.Parcel)
java.lang.Object responseCdmaCallWaiting(android.os.Parcel)
java.util.ArrayList responseCdmaInformationRecord(android.os.Parcel)
void unsljLogMore(int,java.lang.String)
void unsljLog(int)
void notifyRegistrants(android.os.AsyncResult)
android.telephony.SmsMessage newFromCMT(java.lang.String[])
void unsljLogRet(int,java.lang.Object)
void unsljLogvRet(int,java.lang.Object)
void notifyRegistrantsCdmaInfoRec(com.android.internal.telephony.cdma.CdmaInformationRecords)
android.telephony.SmsMessage newFromParcel(android.os.Parcel)
void <init>(int,java.lang.String,int)
void <init>(int,int,java.lang.String)
void setCardState(int)
void setUniversalPinState(int)
void setGsmUmtsSubscriptionAppIndex(int)
void setCdmaSubscriptionAppIndex(int)
void setNumApplications(int)
com.android.internal.telephony.IccCardApplication$AppType AppTypeFromRILInt(int)
com.android.internal.telephony.IccCardApplication$AppState AppStateFromRILInt(int)
com.android.internal.telephony.IccCardApplication$PersoSubState PersoSubstateFromRILInt(int)
void addApplication(com.android.internal.telephony.IccCardApplication)
com.android.internal.telephony.DriverCall$State stateFromCLCC(int)
int presentationFromCLIP(int)
void setDcs(int)
void setUserData(byte[])
java.lang.String stringFromStringAndTOA(java.lang.String,int)
void sort(java.util.List)
java.lang.String get(java.lang.String,java.lang.String)
void <init>(int,int,int,int,boolean)
java.lang.String responseToString(int)
void riljLogv(java.lang.String)
void getDeviceIdentity(android.os.Message)
void getCDMASubscription(android.os.Message)
void setPhoneType(int)
void queryCdmaRoamingPreference(android.os.Message)
void setCdmaRoamingPreference(int,android.os.Message)
void setCdmaSubscription(int,android.os.Message)
void queryTTYMode(android.os.Message)
void setTTYMode(int,android.os.Message)
void sendCDMAFeatureCode(java.lang.String,android.os.Message)
void getCdmaBroadcastConfig(android.os.Message)
void setCdmaBroadcastConfig(int[],android.os.Message)
void setCdmaBroadcastActivation(boolean,android.os.Message)
void exitEmergencyCallbackMode(android.os.Message)
com.android.internal.telephony.RILRequest access$100(com.android.internal.telephony.RIL,int)
int access$200(java.io.InputStream,byte[])
void access$300(com.android.internal.telephony.RIL,android.os.Parcel)
void access$400(com.android.internal.telephony.RIL,int,boolean)
void <init>(int,int,java.lang.String,java.lang.String,java.lang.String[])
com.android.internal.telephony.AdnRecord createFromParcel(android.os.Parcel)
com.android.internal.telephony.AdnRecord[] newArray(int)
java.util.List getAdnRecordsInEf(int)
boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)
int[] getAdnRecordsSize(int)
com.android.internal.telephony.Phone$SuppService[] values()
com.android.internal.telephony.Phone$SuppService valueOf(java.lang.String)
com.android.internal.telephony.Call$State[] values()
void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier)
void <init>(com.android.internal.telephony.sip.SipPhone,com.android.internal.telephony.sip.SipPhone$1)
android.net.sip.SipManager newInstance(android.content.Context)
void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier,android.net.sip.SipProfile)
java.lang.String getUriString(android.net.sip.SipProfile)
java.lang.String getPhoneName()
java.lang.String getSipUri()
boolean equals(com.android.internal.telephony.sip.SipPhone)
boolean canTake(java.lang.Object)
void initIncomingCall(android.net.sip.SipAudioCall,boolean)
void setMute(boolean)
void acceptCall()
void rejectCall()
com.android.internal.telephony.Connection dial(java.lang.String)
com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.UUSInfo)
com.android.internal.telephony.Connection dialInternal(java.lang.String)
void clearDisconnected()
boolean canDial()
void switchHoldingAndActive()
void switchWith(com.android.internal.telephony.sip.SipPhone$SipCall)
void hold()
void unhold()
boolean canConference()
void merge(com.android.internal.telephony.sip.SipPhone$SipCall)
void conference()
void conference(com.android.internal.telephony.Call)
boolean canTransfer()
void explicitCallTransfer()
void updatePhoneState()
void notifyPreciseCallStateChanged()
boolean is12Key(char)
void sendDtmf(char)
void startDtmf(char)
void stopDtmf()
void sendBurstDtmf(java.lang.String)
void getOutgoingCallerIdDisplay(android.os.Message)
void setOutgoingCallerIdDisplay(int,android.os.Message)
void getCallWaiting(android.os.Message)
void setCallWaiting(boolean,android.os.Message)
void setAudioGroupMode()
void setEchoSuppressionEnabled(boolean)
boolean getMute()
com.android.internal.telephony.Call getForegroundCall()
com.android.internal.telephony.Call getBackgroundCall()
com.android.internal.telephony.Call getRingingCall()
android.telephony.ServiceState getServiceState()
java.lang.String getSipDomain(android.net.sip.SipProfile)
boolean isOnHold()
com.android.internal.telephony.Call$State getCallStateFrom(android.net.sip.SipAudioCall)
void setCellBroadcastSmsConfig(int[],android.os.Message)
void getCellBroadcastSmsConfig(android.os.Message)
void activateCellBroadcastSms(int,android.os.Message)
com.android.internal.telephony.IccFileHandler getIccFileHandler()
com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()
com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()
com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()
void saveClirSetting(int)
boolean isDataConnectivityPossible()
boolean disableDataConnectivity()
boolean enableDataConnectivity()
void setDataRoamingEnabled(boolean)
boolean getDataRoamingEnabled()
void disableLocationUpdates()
void enableLocationUpdates()
void updateServiceLocation()
java.util.List getCurrentDataConnectionList()
void setOnPostDialCharacter(android.os.Handler,int,java.lang.Object)
void selectNetworkManually(com.android.internal.telephony.gsm.NetworkInfo,android.os.Message)
com.android.internal.telephony.IccCard getIccCard()
boolean getIccRecordsLoaded()
void setCallForwardingOption(int,int,java.lang.String,int,android.os.Message)
void getCallForwardingOption(int,android.os.Message)
void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)
void setLine1Number(java.lang.String,java.lang.String,android.os.Message)
java.lang.String getLine1AlphaTag()
java.lang.String getLine1Number()
java.lang.String getIccSerialNumber()
java.lang.String getSubscriberId()
java.lang.String getMeid()
java.lang.String getEsn()
java.lang.String getDeviceSvn()
java.lang.String getDeviceId()
java.lang.String getVoiceMailAlphaTag()
java.lang.String getVoiceMailNumber()
void setRadioPower(boolean)
void unregisterForSuppServiceNotification(android.os.Handler)
void registerForSuppServiceNotification(android.os.Handler,int,java.lang.Object)
void sendUssdResponse(java.lang.String)
boolean handlePinMmi(java.lang.String)
boolean handleInCallMmiCommands(java.lang.String)
void notifyCallForwardingIndicator()
com.android.internal.telephony.Phone$DataActivityState getDataActivityState()
com.android.internal.telephony.Phone$DataState getDataConnectionState(java.lang.String)
com.android.internal.telephony.Phone$DataState getDataConnectionState()
java.util.List getPendingMmiCodes()
boolean getCallForwardingIndicator()
boolean getMessageWaitingIndicator()
android.telephony.SignalStrength getSignalStrength()
int getPhoneType()
com.android.internal.telephony.Phone$State getState()
android.telephony.CellLocation getCellLocation()
android.net.sip.SipProfile access$100(com.android.internal.telephony.sip.SipPhone)
void notifyNewRingingConnectionP(com.android.internal.telephony.Connection)
void access$200(com.android.internal.telephony.sip.SipPhone,com.android.internal.telephony.Connection)
com.android.internal.telephony.sip.SipPhone$SipCall access$300(com.android.internal.telephony.sip.SipPhone)
android.content.Context access$400(com.android.internal.telephony.sip.SipPhone)
void notifyDisconnectP(com.android.internal.telephony.Connection)
void access$500(com.android.internal.telephony.sip.SipPhone,com.android.internal.telephony.Connection)
com.android.internal.telephony.Call$State access$1100(android.net.sip.SipAudioCall)
com.android.internal.telephony.sip.SipPhone$SipCall access$1200(com.android.internal.telephony.sip.SipPhone)
java.lang.String access$1300(com.android.internal.telephony.sip.SipPhone,android.net.sip.SipProfile)
android.net.sip.SipManager access$1400(com.android.internal.telephony.sip.SipPhone)
com.android.internal.telephony.sip.SipPhone makePhone(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)
void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)
void migrate(android.os.RegistrantList,android.os.RegistrantList)
void migrateFrom(com.android.internal.telephony.sip.SipPhoneBase)
void removeCleared()
void addUnique(android.os.Handler,int,java.lang.Object)
void startRingbackTone()
void stopRingbackTone()
void notifyPhoneState(com.android.internal.telephony.Phone)
void notifyPhoneStateChanged()
void notifyPreciseCallStateChangedP()
void notifyNewRingingConnection(com.android.internal.telephony.Connection)
void notifyResult(java.lang.Object)
void notifyDisconnect(com.android.internal.telephony.Connection)
void notifyUnknownConnection()
void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)
void notifyServiceStateChangedP(android.telephony.ServiceState)
void notifyServiceStateChanged(android.telephony.ServiceState)
void notifyCallForwardingChanged(com.android.internal.telephony.Phone)
boolean updateCurrentCarrierInProvider()
boolean isIdle()
void <init>(com.android.internal.telephony.sip.SipPhone$SipConnection)
void <init>(com.android.internal.telephony.sip.SipPhone,com.android.internal.telephony.sip.SipPhone$SipCall,android.net.sip.SipProfile,java.lang.String)
void <init>(com.android.internal.telephony.sip.SipPhone,com.android.internal.telephony.sip.SipPhone$SipCall,android.net.sip.SipProfile)
void setState(com.android.internal.telephony.Call$State)
void setListener(android.net.sip.SipAudioCall$Listener)
void initIncomingCall(android.net.sip.SipAudioCall,com.android.internal.telephony.Call$State)
void answerCall(int)
void changeOwner(com.android.internal.telephony.sip.SipPhone$SipCall)
android.net.rtp.AudioGroup getAudioGroup()
android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)
void dial()
void holdCall(int)
void setAudioGroup(android.net.rtp.AudioGroup)
void continueCall(int)
void unhold(android.net.rtp.AudioGroup)
boolean isMuted()
void toggleMute()
com.android.internal.telephony.sip.SipPhone$SipCall getCall()
com.android.internal.telephony.Phone getPhone()
void onCallEnded(com.android.internal.telephony.Connection$DisconnectCause)
void hangup()
android.net.rtp.AudioGroup access$1500(com.android.internal.telephony.sip.SipPhone$SipCall)
void access$1600(com.android.internal.telephony.sip.SipPhone$SipCall,com.android.internal.telephony.sip.SipPhone$SipConnection)
void startAudio()
void onConnectionStateChanged(com.android.internal.telephony.sip.SipPhone$SipConnection)
void separate()
com.android.internal.telephony.UUSInfo getUUSInfo()
android.net.sip.SipAudioCall access$700(com.android.internal.telephony.sip.SipPhone$SipConnection)
android.net.sip.SipAudioCall access$702(com.android.internal.telephony.sip.SipPhone$SipConnection,android.net.sip.SipAudioCall)
android.net.sip.SipProfile access$800(com.android.internal.telephony.sip.SipPhone$SipConnection)
com.android.internal.telephony.sip.SipPhone$SipCall access$900(com.android.internal.telephony.sip.SipPhone$SipConnection)
com.android.internal.telephony.Call$State access$1000(com.android.internal.telephony.sip.SipPhone$SipConnection)
com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()
void setDisconnectCause(com.android.internal.telephony.Connection$DisconnectCause)
void onConnectionEnded(com.android.internal.telephony.sip.SipPhone$SipConnection)
void onChanged(android.net.sip.SipAudioCall)
void onCallEstablished(android.net.sip.SipAudioCall)
void onCallHeld(android.net.sip.SipAudioCall)
void onError(com.android.internal.telephony.Connection$DisconnectCause)
void <init>(com.android.internal.telephony.sip.SipPhone)
void onCallEnded(android.net.sip.SipAudioCall)
void onCallBusy(android.net.sip.SipAudioCall)
void onError(android.net.sip.SipAudioCall,int,java.lang.String)
void takeOver(com.android.internal.telephony.sip.SipPhone$SipCall)
java.util.List getConnections()
boolean contains(java.lang.CharSequence)
boolean isSpeakerphoneOn()
boolean isSpeakerOn()
void setMode(int)
void add(com.android.internal.telephony.sip.SipPhone$SipConnection)
int convertDtmf(char)
void sendDtmf(int)
boolean isMultiparty()
java.lang.String extractPostDialPortion(java.lang.String)
long getDurationMillis()
long getCreateTime()
long getConnectTime()
long getDisconnectTime()
long getHoldDurationMillis()
void proceedAfterWaitChar()
void proceedAfterWildChar(java.lang.String)
void cancelPostDial()
void onServiceStateChanged(android.telephony.ServiceState)
void onSignalStrengthChanged(int)
void onMessageWaitingIndicatorChanged(boolean)
void onCallForwardingIndicatorChanged(boolean)
void onCellLocationChanged(android.os.Bundle)
void onCallStateChanged(int,java.lang.String)
void onDataConnectionStateChanged(int,int)
void onDataActivity(int)
void onSignalStrengthsChanged(android.telephony.SignalStrength)
boolean tryAddSingleRange(int,int,boolean)
void <init>(com.android.internal.telephony.IntRangeManager,int,int,java.lang.String)
boolean enableRange(int,int,java.lang.String)
void insert(com.android.internal.telephony.IntRangeManager$ClientRange)
boolean disableRange(int,int,java.lang.String)
void <init>(com.android.internal.telephony.IntRangeManager,com.android.internal.telephony.IntRangeManager$IntRange,int)
void startUpdate()
void addRange(int,int,boolean)
void <init>(com.android.internal.telephony.IntRangeManager,com.android.internal.telephony.IntRangeManager$ClientRange)
boolean finishUpdate()
boolean addAll(int,java.util.Collection)
boolean updateRanges()
com.android.internal.telephony.IccCardApplication$PersoSubState[] values()
com.android.internal.telephony.IccCardApplication$PersoSubState valueOf(java.lang.String)
boolean isPersoSubStateUnknown()
void <init>(com.android.internal.telephony.IccPhoneBookInterfaceManager)
void logd(java.lang.String)
void <init>(com.android.internal.telephony.gsm.ApnSetting,android.os.Message)
com.android.internal.telephony.DataConnectionTracker$State valueOf(java.lang.String)
void <init>(int,int,byte[])
com.android.internal.telephony.Phone$DataActivityState[] values()
com.android.internal.telephony.Phone$DataState[] values()
com.android.internal.telephony.Phone$State[] values()
void <init>(com.android.internal.telephony.PhoneBase)
void enforceCallingPermission(java.lang.String,java.lang.String)
void enforceReceiveAndSend(java.lang.String)
void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)
void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)
void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)
void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)
java.util.ArrayList buildValidRawData(java.util.ArrayList)
byte[] makeSmsRecordData(int,byte[])
com.android.internal.telephony.DataConnection$FailCause[] values()
com.android.internal.telephony.DataConnection$SetupResult[] values()
void writePdpBadDnsAddress(java.lang.String)
void writePdpRadioResetCountdownTriggered(int)
void writePdpRadioReset(int)
void writePdpContextReset(int)
void writePdpReregisterNetwork(int)
int writeEvent(int,java.lang.Object[])
void writePdpSetupFail(int,int,int)
void writeCallDrop(int,int,int)
void writeDataNetworkRegistrationFail(int,int)
void writeDataNetworkStatusOnRadioOff(java.lang.String,int)
void writePdpNetworkDrop(int,int)
void writeCdmaDataSetupFailed(int,int,int)
void writeCdmaDataDrop(int,int)
void writeGsmRatSwitched(int,int,int)
void writeGsmDataStateChange(java.lang.String,java.lang.String)
void writeGsmServiceStateChange(int,int,int,int)
void writeCdmaDataStateChange(java.lang.String,java.lang.String)
void writeCdmaServiceStateChange(int,int,int,int)
void <init>(com.android.internal.telephony.DataConnection)
void clearSettings()
void access$000(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataConnection$DisconnectParams)
com.android.internal.telephony.DataConnection$DcInactiveState access$100(com.android.internal.telephony.DataConnection)
void access$200(com.android.internal.telephony.DataConnection,com.android.internal.util.HierarchicalState)
void access$300(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataConnection$ConnectionParams,com.android.internal.telephony.DataConnection$FailCause)
void <init>(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataConnection$1)
void <init>(com.android.internal.telephony.IccSmsInterfaceManager)
void <init>(com.android.internal.telephony.PhoneSubInfo)
void <init>(com.android.internal.telephony.Phone)
com.android.internal.telephony.Phone getCdmaPhone()
void removeReferences()
com.android.internal.telephony.Phone getGsmPhone()
void setmIccSmsInterfaceManager(com.android.internal.telephony.IccSmsInterfaceManager)
void setmIccPhoneBookInterfaceManager(com.android.internal.telephony.IccPhoneBookInterfaceManager)
void setmPhoneSubInfo(com.android.internal.telephony.PhoneSubInfo)
void broadcastStickyIntent(android.content.Intent,java.lang.String)
void logv(java.lang.String)
void logw(java.lang.String)
void loge(java.lang.String)
void disableDnsCheck(boolean)
boolean isDnsCheckDisabled()
java.lang.String[] getActiveApnTypes()
java.lang.String getActiveApn()
void registerForUnknownConnection(android.os.Handler,int,java.lang.Object)
void unregisterForUnknownConnection(android.os.Handler)
void registerForPreciseCallStateChanged(android.os.Handler,int,java.lang.Object)
void unregisterForPreciseCallStateChanged(android.os.Handler)
void registerForNewRingingConnection(android.os.Handler,int,java.lang.Object)
void unregisterForNewRingingConnection(android.os.Handler)
void registerForIncomingRing(android.os.Handler,int,java.lang.Object)
void unregisterForIncomingRing(android.os.Handler)
void registerForDisconnect(android.os.Handler,int,java.lang.Object)
void unregisterForDisconnect(android.os.Handler)
void registerForMmiInitiate(android.os.Handler,int,java.lang.Object)
void unregisterForMmiInitiate(android.os.Handler)
void registerForMmiComplete(android.os.Handler,int,java.lang.Object)
void unregisterForMmiComplete(android.os.Handler)
void registerForServiceStateChanged(android.os.Handler,int,java.lang.Object)
void unregisterForServiceStateChanged(android.os.Handler)
void registerForSuppServiceFailed(android.os.Handler,int,java.lang.Object)
void unregisterForSuppServiceFailed(android.os.Handler)
void registerForCdmaOtaStatusChange(android.os.Handler,int,java.lang.Object)
void unregisterForCdmaOtaStatusChange(android.os.Handler)
void registerForSubscriptionInfoReady(android.os.Handler,int,java.lang.Object)
void unregisterForSubscriptionInfoReady(android.os.Handler)
void registerForEcmTimerReset(android.os.Handler,int,java.lang.Object)
void unregisterForEcmTimerReset(android.os.Handler)
void enableEnhancedVoicePrivacy(boolean,android.os.Message)
void getEnhancedVoicePrivacy(android.os.Message)
java.lang.String getCdmaMin()
boolean isMinInfoReady()
java.lang.String getCdmaPrlVersion()
int getVoiceMessageCount()
void setUnitTestMode(boolean)
boolean getUnitTestMode()
com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()
int enableApnType(java.lang.String)
int disableApnType(java.lang.String)
boolean isDataConnectivityEnabled()
java.lang.String getInterfaceName(java.lang.String)
java.lang.String getIpAddress(java.lang.String)
java.lang.String getGateway(java.lang.String)
java.lang.String[] getDnsServers(java.lang.String)
void notifyDataActivity()
int getCdmaEriIconIndex()
java.lang.String getCdmaEriText()
int getCdmaEriIconMode()
void exitEmergencyCallbackMode()
boolean isOtaSpNumber(java.lang.String)
void registerForCallWaiting(android.os.Handler,int,java.lang.Object)
void unregisterForCallWaiting(android.os.Handler)
void setOnEcbModeExitResponse(android.os.Handler,int,java.lang.Object)
void unsetOnEcbModeExitResponse(android.os.Handler)
com.android.internal.telephony.SmsHeader fromByteArray(byte[])
byte[] toByteArray(com.android.internal.telephony.SmsHeader)
com.android.internal.telephony.IPhoneStateListener asInterface(android.os.IBinder)
com.android.internal.telephony.gsm.stk.CommandDetails createFromParcel(android.os.Parcel)
com.android.internal.telephony.gsm.stk.CommandDetails[] newArray(int)
com.android.internal.telephony.gsm.stk.ComprehensionTlvTag[] values()
com.android.internal.telephony.gsm.stk.ComprehensionTlvTag valueOf(java.lang.String)
int value()
com.android.internal.telephony.gsm.stk.ComprehensionTlvTag fromInt(int)
com.android.internal.telephony.gsm.stk.ComprehensionTlvTag getTag()
com.android.internal.telephony.gsm.stk.ResultCode[] values()
com.android.internal.telephony.gsm.stk.AppInterface$CommandType[] values()
void d(java.lang.String,java.lang.String)
com.android.internal.telephony.gsm.stk.ImageDescriptor parse(byte[],int)
void <init>(com.android.internal.telephony.gsm.stk.CommandDetails)
void <init>(com.android.internal.telephony.gsm.stk.CommandDetails,com.android.internal.telephony.gsm.stk.TextMessage,com.android.internal.telephony.gsm.stk.TextMessage)
boolean setIcon(android.graphics.Bitmap)
com.android.internal.telephony.gsm.stk.TextColor[] values()
com.android.internal.telephony.gsm.stk.TextColor valueOf(java.lang.String)
com.android.internal.telephony.gsm.stk.TextColor fromInt(int)
void <init>(com.android.internal.telephony.gsm.stk.Duration,com.android.internal.telephony.gsm.stk.Tone,boolean)
android.os.Parcelable readParcelable(java.lang.ClassLoader)
void writeParcelable(android.os.Parcelable,int)
void <init>(android.os.Parcel,com.android.internal.telephony.gsm.stk.ToneSettings$1)
void <init>(int,int,com.android.internal.telephony.gsm.stk.TextAlignment,com.android.internal.telephony.gsm.stk.FontSize,boolean,boolean,boolean,boolean,com.android.internal.telephony.gsm.stk.TextColor)
com.android.internal.telephony.gsm.stk.LaunchBrowserMode[] values()
com.android.internal.telephony.gsm.stk.LaunchBrowserMode valueOf(java.lang.String)
void format(java.io.ByteArrayOutputStream)
void <init>(android.os.Handler,com.android.internal.telephony.gsm.SIMFileHandler)
com.android.internal.telephony.gsm.stk.RilMessageDecoder getInstance(android.os.Handler,com.android.internal.telephony.gsm.SIMFileHandler)
void sendStartDecodingMessageParams(com.android.internal.telephony.gsm.stk.RilMessage)
void sendMsgParamsDecoded(com.android.internal.telephony.gsm.stk.ResultCode,com.android.internal.telephony.gsm.stk.CommandParams)
void <init>(com.android.internal.telephony.gsm.stk.RilMessage)
void sendCmdForExecution(com.android.internal.telephony.gsm.stk.RilMessage)
void <init>(com.android.internal.telephony.gsm.stk.RilMessageDecoder,com.android.internal.telephony.gsm.stk.RilMessageDecoder$1)
com.android.internal.telephony.gsm.stk.CommandParamsFactory getInstance(com.android.internal.telephony.gsm.stk.RilMessageDecoder,com.android.internal.telephony.gsm.SIMFileHandler)
byte[] hexStringToBytes(java.lang.String)
void d(java.lang.Object,java.lang.String)
com.android.internal.telephony.gsm.stk.BerTlv decode(byte[])
void make(com.android.internal.telephony.gsm.stk.BerTlv)
com.android.internal.telephony.gsm.stk.ResultCode result()
boolean decodeMessageParams(com.android.internal.telephony.gsm.stk.RilMessage)
boolean access$200(com.android.internal.telephony.gsm.stk.RilMessageDecoder,com.android.internal.telephony.gsm.stk.RilMessage)
com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateCmdParamsReady access$300(com.android.internal.telephony.gsm.stk.RilMessageDecoder)
void access$400(com.android.internal.telephony.gsm.stk.RilMessageDecoder,com.android.internal.util.HierarchicalState)
com.android.internal.telephony.gsm.stk.RilMessage access$500(com.android.internal.telephony.gsm.stk.RilMessageDecoder)
void access$600(com.android.internal.telephony.gsm.stk.RilMessageDecoder,com.android.internal.telephony.gsm.stk.RilMessage)
com.android.internal.telephony.gsm.stk.RilMessageDecoder$StateStart access$700(com.android.internal.telephony.gsm.stk.RilMessageDecoder)
void access$800(com.android.internal.telephony.gsm.stk.RilMessageDecoder,com.android.internal.util.HierarchicalState)
void access$900(com.android.internal.telephony.gsm.stk.RilMessageDecoder,android.os.Message)
void <init>(android.os.Parcel,com.android.internal.telephony.gsm.stk.Duration$1)
com.android.internal.telephony.gsm.stk.Duration createFromParcel(android.os.Parcel)
com.android.internal.telephony.gsm.stk.Duration[] newArray(int)
com.android.internal.telephony.gsm.stk.Duration$TimeUnit[] values()
com.android.internal.telephony.gsm.stk.Duration$TimeUnit valueOf(java.lang.String)
void <init>(android.os.Parcel,com.android.internal.telephony.gsm.stk.TextMessage$1)
void <init>(android.os.Parcel,com.android.internal.telephony.gsm.stk.Input$1)
com.android.internal.telephony.gsm.stk.Input createFromParcel(android.os.Parcel)
com.android.internal.telephony.gsm.stk.Input[] newArray(int)
void <init>(com.android.internal.telephony.gsm.stk.StkCmdMessage)
void setResultCode(com.android.internal.telephony.gsm.stk.ResultCode)
void setMenuSelection(int)
void setInput(java.lang.String)
void setYesNo(boolean)
void setConfirmation(boolean)
com.android.internal.telephony.gsm.stk.CommandDetails getCmdDetails()
void registerForRecordsLoaded(android.os.Handler,int,java.lang.Object)
void <init>(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)
void unregisterForRecordsLoaded(android.os.Handler)
void removeCallbacksAndMessages(java.lang.Object)
void handleProactiveCommand(com.android.internal.telephony.gsm.stk.CommandParams)
void sendTerminalResponse(com.android.internal.telephony.gsm.stk.CommandDetails,com.android.internal.telephony.gsm.stk.ResultCode,boolean,int,com.android.internal.telephony.gsm.stk.ResponseData)
void handleSessionEnd()
void handleRilMsg(com.android.internal.telephony.gsm.stk.RilMessage)
com.android.internal.telephony.gsm.stk.AppInterface$CommandType getCommandType()
java.lang.String name()
void <init>(com.android.internal.telephony.gsm.stk.CommandParams)
com.android.internal.telephony.gsm.stk.Menu getMenu()
boolean removeMenu(com.android.internal.telephony.gsm.stk.Menu)
com.android.internal.telephony.gsm.stk.TextMessage geTextMessage()
void sendMenuSelection(int,boolean)
void eventDownload(int,int,int,byte[],boolean)
com.android.internal.telephony.gsm.stk.StkService getInstance(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.gsm.SIMRecords,android.content.Context,com.android.internal.telephony.gsm.SIMFileHandler,com.android.internal.telephony.gsm.SimCard)
com.android.internal.telephony.gsm.stk.AppInterface getInstance()
void handleCmdResponse(com.android.internal.telephony.gsm.stk.StkResponseMessage)
void onCmdResponse(com.android.internal.telephony.gsm.stk.StkResponseMessage)
boolean compareTo(com.android.internal.telephony.gsm.stk.CommandDetails)
boolean validateResponse(com.android.internal.telephony.gsm.stk.StkResponseMessage)
com.android.internal.telephony.gsm.stk.AppInterface$CommandType fromInt(int)
com.android.internal.telephony.gsm.stk.Input geInput()
void <init>(java.lang.String,boolean,boolean)
void <init>(com.android.internal.telephony.gsm.stk.CommandDetails,com.android.internal.telephony.gsm.stk.TextMessage)
com.android.internal.telephony.gsm.stk.Tone[] values()
com.android.internal.telephony.gsm.stk.Tone valueOf(java.lang.String)
com.android.internal.telephony.gsm.stk.Tone fromInt(int)
void <init>(java.lang.String,int,android.os.Parcel)
com.android.internal.telephony.gsm.stk.ResultCode valueOf(java.lang.String)
com.android.internal.telephony.gsm.stk.ResultCode fromInt(int)
com.android.internal.telephony.gsm.stk.Tone createFromParcel(android.os.Parcel)
com.android.internal.telephony.gsm.stk.Tone[] newArray(int)
void <init>(com.android.internal.telephony.gsm.stk.RilMessageDecoder)
void <init>(int,boolean,int,byte[],int)
int getTag()
boolean isComprehensionRequired()
int getValueIndex()
byte[] getRawValue()
com.android.internal.telephony.gsm.stk.ComprehensionTlv decode(byte[],int)
java.util.List decodeMany(byte[],int)
void <init>(com.android.internal.telephony.gsm.stk.ResultCode)
com.android.internal.telephony.gsm.stk.PresentationType[] values()
void <init>(android.os.Parcel,com.android.internal.telephony.gsm.stk.Menu$1)
com.android.internal.telephony.gsm.stk.CommandDetails retrieveCommandDetails(com.android.internal.telephony.gsm.stk.ComprehensionTlv)
com.android.internal.telephony.gsm.stk.DeviceIdentities retrieveDeviceIdentities(com.android.internal.telephony.gsm.stk.ComprehensionTlv)
void <init>(int,com.android.internal.telephony.gsm.stk.Duration$TimeUnit)
com.android.internal.telephony.gsm.stk.Duration retrieveDuration(com.android.internal.telephony.gsm.stk.ComprehensionTlv)
java.lang.String adnStringFieldToString(byte[],int,int)
com.android.internal.telephony.gsm.stk.Item retrieveItem(com.android.internal.telephony.gsm.stk.ComprehensionTlv)
int retrieveItemId(com.android.internal.telephony.gsm.stk.ComprehensionTlv)
com.android.internal.telephony.gsm.stk.IconId retrieveIconId(com.android.internal.telephony.gsm.stk.ComprehensionTlv)
com.android.internal.telephony.gsm.stk.ItemsIconId retrieveItemsIconId(com.android.internal.telephony.gsm.stk.ComprehensionTlv)
com.android.internal.telephony.gsm.stk.TextAlignment fromInt(int)
com.android.internal.telephony.gsm.stk.FontSize fromInt(int)
java.util.List retrieveTextAttribute(com.android.internal.telephony.gsm.stk.ComprehensionTlv)
java.lang.String retrieveAlphaId(com.android.internal.telephony.gsm.stk.ComprehensionTlv)
java.lang.String gsm7BitPackedToString(byte[],int,int)
java.lang.String gsm8BitUnpackedToString(byte[],int,int)
java.lang.String retrieveTextString(com.android.internal.telephony.gsm.stk.ComprehensionTlv)
void <init>(com.android.internal.telephony.gsm.stk.CommandDetails,com.android.internal.telephony.gsm.stk.Menu,boolean)
com.android.internal.telephony.gsm.stk.AppInterface$CommandType getCmdType()
com.android.internal.telephony.gsm.stk.StkCmdMessage$BrowserSettings getBrowserSettings()
com.android.internal.telephony.gsm.stk.ToneSettings getToneSettings()
com.android.internal.telephony.gsm.stk.StkCmdMessage$CallSettings getCallSettings()
com.android.internal.telephony.gsm.stk.Item createFromParcel(android.os.Parcel)
com.android.internal.telephony.gsm.stk.Item[] newArray(int)
com.android.internal.telephony.gsm.stk.FontSize[] values()
com.android.internal.telephony.gsm.stk.FontSize valueOf(java.lang.String)
com.android.internal.telephony.gsm.stk.Menu createFromParcel(android.os.Parcel)
com.android.internal.telephony.gsm.stk.Menu[] newArray(int)
void <init>(int,java.util.List)
java.util.List getComprehensionTlvs()
byte[] stringToGsm7BitPacked(java.lang.String,int,int)
byte[] stringToGsm8BitPacked(java.lang.String)
void <init>(android.os.Looper,com.android.internal.telephony.gsm.SIMFileHandler)
com.android.internal.telephony.gsm.stk.IconLoader getInstance(android.os.Handler,com.android.internal.telephony.gsm.SIMFileHandler)
void startLoadingIcon(int)
void loadIcons(int[],android.os.Message)
void loadIcon(int,android.os.Message)
void postIcon()
void readId()
boolean handleImageDescriptor(byte[])
void readIconData()
android.graphics.Bitmap parseToBnW(byte[],int)
void readClut()
android.graphics.Bitmap parseToRGB(byte[],int,boolean,byte[])
void loadEFImgTransparent(int,int,int,int,android.os.Message)
void loadEFImgLinearFixed(int,android.os.Message)
int bitToBnW(int)
android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)
int getMask(int)
int rgb(int,int,int)
void <init>(com.android.internal.telephony.gsm.stk.RilMessageDecoder,com.android.internal.telephony.gsm.SIMFileHandler)
com.android.internal.telephony.gsm.stk.ComprehensionTlv searchForTag(com.android.internal.telephony.gsm.stk.ComprehensionTlvTag,java.util.List)
com.android.internal.telephony.gsm.stk.CommandDetails processCommandDetails(java.util.List)
void sendCmdParams(com.android.internal.telephony.gsm.stk.ResultCode)
boolean processSelectItem(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)
boolean processDisplayText(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)
boolean processSetUpIdleModeText(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)
boolean processGetInkey(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)
boolean processGetInput(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)
boolean processEventNotify(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)
boolean processSetupCall(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)
boolean processRefresh(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)
boolean processLaunchBrowser(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)
boolean processPlayTone(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)
com.android.internal.telephony.gsm.stk.ResultCode setIcons(java.lang.Object)
com.android.internal.telephony.gsm.stk.ComprehensionTlv searchForNextTag(com.android.internal.telephony.gsm.stk.ComprehensionTlvTag,java.util.Iterator)
void <init>(com.android.internal.telephony.gsm.stk.CommandDetails,com.android.internal.telephony.gsm.stk.Input)
boolean processSetUpEventList(com.android.internal.telephony.gsm.stk.CommandDetails,java.util.List)
void <init>(com.android.internal.telephony.gsm.stk.CommandDetails,com.android.internal.telephony.gsm.stk.TextMessage,java.lang.String,com.android.internal.telephony.gsm.stk.LaunchBrowserMode)
void <init>(com.android.internal.telephony.gsm.stk.CommandDetails,com.android.internal.telephony.gsm.stk.TextMessage,com.android.internal.telephony.gsm.stk.Tone,com.android.internal.telephony.gsm.stk.Duration,boolean)
com.android.internal.telephony.gsm.stk.TextAlignment[] values()
com.android.internal.telephony.gsm.stk.TextAlignment valueOf(java.lang.String)
com.android.internal.telephony.gsm.stk.AppInterface$CommandType valueOf(java.lang.String)
com.android.internal.telephony.gsm.stk.PresentationType valueOf(java.lang.String)
com.android.internal.telephony.gsm.stk.StkCmdMessage createFromParcel(android.os.Parcel)
com.android.internal.telephony.gsm.stk.StkCmdMessage[] newArray(int)
com.android.internal.telephony.gsm.stk.TextMessage createFromParcel(android.os.Parcel)
com.android.internal.telephony.gsm.stk.TextMessage[] newArray(int)
com.android.internal.telephony.gsm.stk.ToneSettings createFromParcel(android.os.Parcel)
com.android.internal.telephony.gsm.stk.ToneSettings[] newArray(int)
void <init>(com.android.internal.telephony.gsm.stk.ResultCode,int)
boolean hasAdditionalInfo()
int additionalInfo()
void loadVoiceMail()
boolean containsCarrier(java.lang.String)
java.lang.String getCarrierName(java.lang.String)
java.lang.String getVoiceMailNumber(java.lang.String)
java.lang.String getVoiceMailTag(java.lang.String)
java.io.File getRootDirectory()
void <init>(java.io.File,java.lang.String)
void setInput(java.io.Reader)
java.lang.String calledPartyBCDToString(byte[],int,int)
boolean isCphsVoiceMessageIndicatorAddress()
boolean isCphsVoiceMessageSet()
boolean isCphsVoiceMessageClear()
com.android.internal.telephony.DriverCall$State[] values()
com.android.internal.telephony.Call$State stateFromDCState(com.android.internal.telephony.DriverCall$State)
void <init>(com.android.internal.telephony.gsm.GsmCallTracker)
void hangup(com.android.internal.telephony.gsm.GsmCall)
void attach(com.android.internal.telephony.Connection,com.android.internal.telephony.DriverCall)
void attachFake(com.android.internal.telephony.Connection,com.android.internal.telephony.Call$State)
void connectionDisconnected(com.android.internal.telephony.gsm.GsmConnection)
void detach(com.android.internal.telephony.gsm.GsmConnection)
boolean update(com.android.internal.telephony.gsm.GsmConnection,com.android.internal.telephony.DriverCall)
boolean isFull()
void onHangupLocal()
com.android.internal.telephony.CommandsInterface$RadioState[] values()
void <init>(com.android.internal.telephony.gsm.SimSmsInterfaceManager)
java.lang.Object access$000(com.android.internal.telephony.gsm.SimSmsInterfaceManager)
boolean access$102(com.android.internal.telephony.gsm.SimSmsInterfaceManager,boolean)
java.util.ArrayList access$300(com.android.internal.telephony.gsm.SimSmsInterfaceManager,java.util.ArrayList)
java.util.List access$202(com.android.internal.telephony.gsm.SimSmsInterfaceManager,java.util.List)
java.util.List access$200(com.android.internal.telephony.gsm.SimSmsInterfaceManager)
void <init>(com.android.internal.telephony.gsm.GSMPhone)
com.android.internal.telephony.gsm.SmsMessage newFromCDS(java.lang.String)
android.content.Intent putExtra(java.lang.String,byte[])
void acknowledgeLastIncomingSms(boolean,int,android.os.Message)
void handleStatusReport(android.os.AsyncResult)
int dispatchMessage(com.android.internal.telephony.SmsMessageBase)
boolean isTypeZero()
boolean isMWISetMessage()
void updateMessageWaitingIndicator(boolean)
boolean isMwiDontStore()
boolean isMWIClearMessage()
android.telephony.SmsMessage$MessageClass getMessageClass()
com.android.internal.telephony.SmsHeader getUserDataHeader()
byte[] getPdu()
int dispatchWapPdu(byte[])
void dispatchPortAddressedPdus(byte[][],int)
void dispatchPdus(byte[][])
int processMessagePart(com.android.internal.telephony.SmsMessageBase,com.android.internal.telephony.SmsHeader$ConcatRef,com.android.internal.telephony.SmsHeader$PortAddrs)
com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)
void sendRawPdu(byte[],byte[],android.app.PendingIntent,android.app.PendingIntent)
com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)
int getNextConcatenatedRef()
com.android.internal.telephony.SmsMessageBase$TextEncodingDetails calculateLength(java.lang.CharSequence,boolean)
com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[],int,int,int)
com.android.internal.telephony.SMSDispatcher$SmsTracker SmsTrackerFactory(java.util.HashMap,android.app.PendingIntent,android.app.PendingIntent)
void handleNotInService(int,com.android.internal.telephony.SMSDispatcher$SmsTracker)
void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)
void sendMultipartTextWithPermit(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)
void sendMultipartSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)
int resultToCause(int)
int getLac()
int getCid()
void <init>(com.android.internal.telephony.gsm.SmsCbHeader,java.lang.String,int,int)
boolean isEmergencyMessage(int)
void dispatchBroadcastPdus(byte[][],boolean)
boolean matchesLocation(java.lang.String,int,int)
void handleBroadcastSms(android.os.AsyncResult)
java.lang.String getCommonIccEFPath(int)
boolean isApplicationOnIcc(com.android.internal.telephony.IccCardApplication$AppType)
java.lang.String getEFPath(int)
void <init>(com.android.internal.telephony.gsm.GSMPhone,com.android.internal.telephony.SMSDispatcher)
void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)
void wait()
boolean updateMessageOnIccEf(int,int,byte[])
boolean copyMessageToIccEf(int,byte[],byte[])
void loadEFLinearFixedAll(int,android.os.Message)
java.util.List getAllMessagesFromIccEf()
boolean enableCellBroadcastRange(int,int)
boolean enableCellBroadcast(int)
boolean disableCellBroadcastRange(int,int)
boolean disableCellBroadcast(int)
java.lang.String getNameForUid(int)
boolean setCellBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[])
boolean setCellBroadcastActivation(boolean)
boolean access$400(com.android.internal.telephony.gsm.SimSmsInterfaceManager,boolean)
boolean access$500(com.android.internal.telephony.gsm.SimSmsInterfaceManager,com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[])
void onRadioOffOrNotAvailable()
void setSystemProperty(java.lang.String,java.lang.String)
java.lang.String getIMSI()
java.lang.String getMsisdnNumber()
void updateEF(com.android.internal.telephony.AdnRecord,int,int,int,java.lang.String,android.os.Message)
void setMsisdnNumber(java.lang.String,java.lang.String,android.os.Message)
java.lang.String getMsisdnAlphaTag()
android.os.AsyncResult forMessage(android.os.Message)
boolean isCphsMailboxEnabled()
void notifyMessageWaitingIndicator()
void updateEFTransparent(int,byte[],android.os.Message)
void setVoiceMessageWaiting(int,int)
boolean getVoiceCallForwardingFlag()
void setVoiceCallForwardingFlag(int,boolean)
void fetchSimRecords()
void onRefresh(boolean,int[])
java.lang.String getSIMOperatorNumeric()
void onSimReady()
int smallestDigitsMccForMnc(int)
void updateMccMncConfiguration(com.android.internal.telephony.PhoneBase,java.lang.String)
void broadcastIccStateChangedIntent(java.lang.String,java.lang.String)
void loadFromEF(int,int,int,android.os.Message)
java.lang.String getNumber()
java.lang.String getAlphaTag()
java.lang.String bcdToString(byte[],int,int)
void getSpnFsm(boolean,android.os.AsyncResult)
void parseEfSpdi(byte[])
int i(java.lang.String,java.lang.String,java.lang.Throwable)
boolean isValidObject()
java.lang.String networkNameToString(byte[],int,int)
boolean nextObject()
void handleSmses(java.util.ArrayList)
void loadEFLinearFixed(int,int,android.os.Message)
void handleSms(byte[])
void handleSimRefresh(int[])
void onRecordLoaded()
void handleFileUpdate(int)
com.android.internal.telephony.gsm.SmsMessage createFromPdu(byte[])
void onAllRecordsLoaded()
java.lang.String countryCodeForMcc(int)
void setVoiceMailByCountry(java.lang.String)
void setSpnFromConfig(java.lang.String)
java.lang.String getSpn(java.lang.String)
void loadEFTransparent(int,android.os.Message)
boolean isOnMatchingPlmn(java.lang.String)
int getDisplayRule(java.lang.String)
com.android.internal.telephony.gsm.SIMRecords$Get_Spn_Fsm_State[] values()
void <init>(com.android.internal.telephony.gsm.GsmServiceStateTracker,android.os.Handler)
void access$000(com.android.internal.telephony.gsm.GsmServiceStateTracker)
void <init>(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
boolean access$102(com.android.internal.telephony.gsm.GsmDataConnectionTracker,boolean)
void stopNetStatPoll()
void startNetStatPoll()
com.android.internal.telephony.DataConnectionTracker$State access$200(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
com.android.internal.telephony.DataConnectionTracker$State access$300(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
boolean isConnected()
boolean access$402(com.android.internal.telephony.gsm.GsmDataConnectionTracker,boolean)
boolean access$502(com.android.internal.telephony.gsm.GsmDataConnectionTracker,boolean)
void hangup(com.android.internal.telephony.gsm.GsmConnection)
void registerForVoiceCallStarted(android.os.Handler,int,java.lang.Object)
void unregisterForVoiceCallStarted(android.os.Handler)
void registerForVoiceCallEnded(android.os.Handler,int,java.lang.Object)
void unregisterForVoiceCallEnded(android.os.Handler)
void fakeHoldBeforeDial()
void fakeHoldForegroundBeforeDial()
void switchWaitingOrHoldingAndActive()
void <init>(android.content.Context,java.lang.String,com.android.internal.telephony.gsm.GsmCallTracker,com.android.internal.telephony.gsm.GsmCall)
void pollCallsWhenSafe()
android.os.Message obtainCompleteMessage()
com.android.internal.telephony.Connection dial(java.lang.String,int,com.android.internal.telephony.UUSInfo)
com.android.internal.telephony.Connection dial(java.lang.String,int)
android.os.Message obtainCompleteMessage(int)
void internalClearDisconnected()
void operationComplete()
boolean isCommandExceptionRadioNotAvailable(java.lang.Throwable)
void pollCallsAfterDelay()
boolean compareTo(com.android.internal.telephony.DriverCall)
boolean update(com.android.internal.telephony.DriverCall)
void <init>(android.content.Context,com.android.internal.telephony.DriverCall,com.android.internal.telephony.gsm.GsmCallTracker,int)
com.android.internal.telephony.gsm.GsmCall getCall()
void onDisconnect(com.android.internal.telephony.Connection$DisconnectCause)
android.os.Message obtainNoPollCompleteMessage(int)
void handlePollCalls(android.os.AsyncResult)
void handleRadioNotAvailable()
void dumpState()
int getGSMIndex()
void separate(com.android.internal.telephony.gsm.GsmConnection)
boolean isDialingOrAlerting()
void hangupForegroundResumeBackground()
void hangupAllConnections(com.android.internal.telephony.gsm.GsmCall)
void hangupWaitingOrBackground()
void hangupConnectionByIndex(com.android.internal.telephony.gsm.GsmCall,int)
com.android.internal.telephony.gsm.GsmConnection getConnectionByIndex(com.android.internal.telephony.gsm.GsmCall,int)
com.android.internal.telephony.Phone$SuppService getFailedService(int)
int getNetworkType()
void onRemoteDisconnect(int)
void handleRadioAvailable()
boolean parseCurrentTlvObject()
int getByte()
int d(java.lang.String,java.lang.String,java.lang.Throwable)
java.lang.String getSCAddress()
com.android.internal.telephony.gsm.GsmSmsAddress getAddress()
int gsmBcdByteToInt(byte)
long getSCTimestampMillis()
int constructUserData(boolean,boolean)
int getUserDataSeptetPadding()
java.lang.String gsm7BitPackedToString(byte[],int,int,int,int,int)
java.lang.String getUserDataGSM7Bit(int,int,int)
java.lang.String getUserDataUCS2(int)
boolean moreDataPresent()
com.android.internal.telephony.AdnRecordCache getAdnCache()
void checkThread()
void getEFLinearRecordSize(int,android.os.Message)
android.os.Handler access$000(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
void parseTag(com.android.internal.telephony.gsm.SimTlv,int)
void <init>(com.android.internal.telephony.gsm.UsimPhoneBookManager,java.util.ArrayList)
void parseEf(com.android.internal.telephony.gsm.SimTlv,java.util.Map,int)
boolean access$002(com.android.internal.telephony.gsm.UsimPhoneBookManager,boolean)
int access$102(com.android.internal.telephony.gsm.UsimPhoneBookManager,int)
void <init>(com.android.internal.telephony.gsm.GsmDataConnectionTracker$2)
void access$3100(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
void createWakeLock(android.content.Context)
void <init>(com.android.internal.telephony.gsm.GsmConnection,android.os.Looper)
com.android.internal.telephony.gsm.GsmCall parentFromDCState(com.android.internal.telephony.DriverCall$State)
java.lang.String extractNetworkPortionAlt(java.lang.String)
boolean equalsHandlesNulls(java.lang.Object,java.lang.Object)
void setPostDialState(com.android.internal.telephony.Connection$PostDialState)
void processNextPostDialChar()
com.android.internal.telephony.IccCard$State getState()
boolean isCsRestricted()
boolean isCsEmergencyRestricted()
boolean isCsNormalRestricted()
com.android.internal.telephony.Connection$DisconnectCause disconnectCauseFromCode(int)
void releaseWakeLock()
boolean isConnectingInOrOut()
void onConnectedInOrOut()
void onStartedHolding()
boolean processPostDialChar(char)
android.os.Message messageForRegistrant()
void access$000(com.android.internal.telephony.gsm.GsmConnection)
void access$100(com.android.internal.telephony.gsm.GsmConnection)
void loadSpnOverrides()
com.android.internal.telephony.gsm.SIMRecords$Get_Spn_Fsm_State valueOf(java.lang.String)
void <init>(com.android.internal.telephony.PhoneBase,java.lang.String,java.lang.Boolean)
void updateStateProperty()
java.lang.String getServiceProviderName()
java.io.Serializable readSerializable()
void <init>(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.gsm.NetworkInfo$State)
com.android.internal.telephony.gsm.NetworkInfo createFromParcel(android.os.Parcel)
com.android.internal.telephony.gsm.NetworkInfo[] newArray(int)
long access$600(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
long access$700(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
long getMobileTxPackets()
long access$802(com.android.internal.telephony.gsm.GsmDataConnectionTracker,long)
long getMobileRxPackets()
long access$902(com.android.internal.telephony.gsm.GsmDataConnectionTracker,long)
boolean access$1000(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
long access$1100(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
long access$1200(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
long access$1302(com.android.internal.telephony.gsm.GsmDataConnectionTracker,long)
int access$1402(com.android.internal.telephony.gsm.GsmDataConnectionTracker,int)
com.android.internal.telephony.PhoneBase access$1500(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
long access$1614(com.android.internal.telephony.gsm.GsmDataConnectionTracker,long)
long access$1702(com.android.internal.telephony.gsm.GsmDataConnectionTracker,long)
long access$1802(com.android.internal.telephony.gsm.GsmDataConnectionTracker,long)
long access$1902(com.android.internal.telephony.gsm.GsmDataConnectionTracker,long)
com.android.internal.telephony.DataConnectionTracker$Activity access$2000(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
boolean access$100(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
com.android.internal.telephony.DataConnectionTracker$Activity access$2102(com.android.internal.telephony.gsm.GsmDataConnectionTracker,com.android.internal.telephony.DataConnectionTracker$Activity)
com.android.internal.telephony.PhoneBase access$2200(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
android.content.ContentResolver access$2300(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
long access$2400(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
int access$2500(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
long access$2600(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
int access$2700(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
com.android.internal.telephony.PhoneBase access$2800(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
int access$2908(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
int access$3002(com.android.internal.telephony.gsm.GsmDataConnectionTracker,int)
boolean access$3202(com.android.internal.telephony.gsm.GsmDataConnectionTracker,boolean)
int access$3302(com.android.internal.telephony.gsm.GsmDataConnectionTracker,int)
int access$3402(com.android.internal.telephony.gsm.GsmDataConnectionTracker,int)
int access$3502(com.android.internal.telephony.gsm.GsmDataConnectionTracker,int)
boolean access$3600(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
android.os.Handler access$3800(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
int access$3700(com.android.internal.telephony.gsm.GsmDataConnectionTracker)
void <init>(com.android.internal.telephony.PhoneBase,java.lang.String)
void <init>(com.android.internal.telephony.gsm.GSMPhone,java.lang.String)
com.android.internal.telephony.gsm.GsmDataConnection makeDataConnection(com.android.internal.telephony.gsm.GSMPhone)
void setHttpProxy(java.lang.String,java.lang.String)
boolean getRoaming()
void onConnect(com.android.internal.telephony.DataConnection$ConnectionParams)
com.android.internal.telephony.DataConnection$FailCause getFailCauseFromRequest(int)
boolean isDnsOk(java.lang.String[])
com.android.internal.telephony.gsm.ApnSetting getApn()
void <init>(com.android.internal.telephony.gsm.GsmServiceStateTracker)
android.net.Uri getUriFor(java.lang.String)
void setSignalStrengthDefaultValues()
void registerForGprsAttached(android.os.Handler,int,java.lang.Object)
void unregisterForGprsAttached(android.os.Handler)
void registerForNetworkAttach(android.os.Handler,int,java.lang.Object)
void unregisterForNetworkAttach(android.os.Handler)
void registerForGprsDetached(android.os.Handler,int,java.lang.Object)
void unregisterForGprsDetached(android.os.Handler)
boolean isPsRestricted()
void registerForPsRestrictedEnabled(android.os.Handler,int,java.lang.Object)
void unregisterForPsRestrictedEnabled(android.os.Handler)
void registerForPsRestrictedDisabled(android.os.Handler,int,java.lang.Object)
void unregisterForPsRestrictedDisabled(android.os.Handler)
void restoreSavedNetworkSelection(android.os.Message)
void pollState()
void queueNextSignalStrengthPoll()
void setPowerStateToDesired()
void onSignalStrengthResult(android.os.AsyncResult)
void setLacAndCid(int,int)
void notifyLocationChanged()
void disableSingleLocationUpdate()
void handlePollStateResult(int,android.os.AsyncResult)
void setTimeFromNITZString(java.lang.String,long)
void updateSpnDisplay()
boolean isGprsConsistent(int,int)
java.lang.String getOperatorNumeric()
void onRestrictedStateChanged(android.os.AsyncResult)
boolean isDataConnectionAsDesired()
java.lang.String getStateInString()
boolean getAnyDataEnabled()
void powerOffRadioSafely()
com.android.internal.telephony.DataConnectionTracker$State getState()
void hangupIfAlive()
java.lang.String getOperatorAlphaLong()
android.content.Intent putExtra(java.lang.String,boolean)
void sendStickyBroadcast(android.content.Intent)
com.android.internal.telephony.CommandException$Error getCommandError()
void cancelPollState()
boolean regCodeIsRoaming(int)
int regCodeToServiceState(int)
void setPsc(int)
void setRadioTechnology(int)
void setOperatorName(java.lang.String,java.lang.String,java.lang.String)
void setIsManualSelection(boolean)
boolean isRoamingBetweenOperators(boolean,android.telephony.ServiceState)
void setRoaming(boolean)
void setEmergencyOnly(boolean)
void pollStateDone()
void <init>(int,int,int,int,int,int,int,boolean)
void setStateOutOfService()
void setStateInvalid()
void setStateOff()
java.lang.String networkTypeToString(int)
int binarySearch(java.lang.Object[],java.lang.Object)
java.util.TimeZone getDefault()
int getOffset(long)
boolean getAutoTime()
void setAndBroadcastNetworkSetTime(long)
java.util.TimeZone getNitzTimeZone(int,boolean,long)
java.util.TimeZone getTimeZone(int,boolean,long,java.lang.String)
java.lang.String getID()
void setAndBroadcastNetworkSetTimeZone(java.lang.String)
void saveNitzTimeZone(java.lang.String)
void notifyDataConnection(java.lang.String)
java.util.TimeZone findTimeZone(int,boolean,long)
java.lang.String[] getAvailableIDs(int)
java.util.TimeZone getTimeZone(java.lang.String)
boolean inDaylightTime(java.util.Date)
void notifySignalStrength()
void setCsEmergencyRestricted(boolean)
void setCsNormalRestricted(boolean)
void setPsRestricted(boolean)
void setNotification(int)
java.lang.String getOperatorAlphaShort()
int twoDigitsAt(java.lang.String,int)
int getCurrentGprsState()
boolean isConcurrentVoiceAndData()
java.lang.String displayNameFor(int)
java.util.Calendar getInstance(java.util.TimeZone)
void set(int,int)
long getTimeInMillis()
void add(int,int)
java.util.Date getTime()
void saveNitzTime(long)
int getInt(android.content.ContentResolver,java.lang.String)
void setTimeZone(java.lang.String)
boolean setCurrentTimeMillis(long)
void revertToNitz()
android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)
void parsePdu(byte[])
com.android.internal.telephony.gsm.SmsMessage newFromCMT(java.lang.String[])
com.android.internal.telephony.gsm.SmsMessage newFromCMTI(java.lang.String)
com.android.internal.telephony.SmsMessageBase newFromParcel(android.os.Parcel)
com.android.internal.telephony.gsm.SmsMessage createFromEfRecord(int,byte[])
int getTPLayerLengthForPDU(java.lang.String)
com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[])
java.io.ByteArrayOutputStream getSubmitPduHead(java.lang.String,java.lang.String,byte,boolean,com.android.internal.telephony.gsm.SmsMessage$SubmitPdu)
byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[],int,int)
byte[] encodeUCS2(java.lang.String,byte[])
byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String)
byte[] networkPortionToCalledPartyBCD(java.lang.String)
com.android.internal.telephony.SmsMessageBase$TextEncodingDetails countGsmSeptets(java.lang.CharSequence,boolean)
int getProtocolIdentifier()
boolean isReplace()
boolean isCphsMwiMessage()
java.lang.String getMessageBody()
boolean isStatusReportMessage()
boolean isReplyPathPresent()
void parseSmsDeliver(com.android.internal.telephony.gsm.SmsMessage$PduParser,int)
void parseSmsStatusReport(com.android.internal.telephony.gsm.SmsMessage$PduParser,int)
void parseUserData(com.android.internal.telephony.gsm.SmsMessage$PduParser,boolean)
void parseMessageBody()
boolean isEtwsMessage(int)
boolean isCmasMessage(int)
boolean isEtwsPopupAlert(int)
boolean isEtwsEmergencyUserAlert(int)
com.android.internal.telephony.gsm.NetworkInfo$State getState()
com.android.internal.telephony.gsm.NetworkInfo$State rilStateToState(java.lang.String)
void writeSerializable(java.io.Serializable)
void setFromServiceId(int)
void setToServiceId(int)
void setFromCodeScheme(int)
void setToCodeScheme(int)
void setSelected(boolean)
void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.AdnRecordCache)
void readPbrFileAndWait()
void readAdnFileAndWait(int)
void readEmailFileAndWait(int)
java.util.ArrayList loadEfFilesFromUsim()
void readIapFileAndWait(int)
void updatePhoneAdnRecord()
java.lang.String readEmailRecord(int)
void setEmails(java.lang.String[])
void <init>(java.lang.String,java.lang.String,java.lang.String[])
java.lang.Object set(int,java.lang.Object)
void parseType1EmailFile(int)
java.lang.Object[] toArray()
void requestLoadAllAdnLike(int,int,android.os.Message)
void createPbrFile(java.util.ArrayList)
void registerForRoamingOn(android.os.Handler,int,java.lang.Object)
void registerForRoamingOff(android.os.Handler,int,java.lang.Object)
android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)
void createAllPdpList()
android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)
android.net.IConnectivityManager asInterface(android.os.IBinder)
boolean getMobileDataEnabled()
boolean configure(java.lang.String)
boolean configure(int,int,int)
void unregisterForRoamingOn(android.os.Handler)
void unregisterForRoamingOff(android.os.Handler)
void destroyAllPdpList()
void setState(com.android.internal.telephony.DataConnectionTracker$State)
java.lang.String getActiveApnString()
boolean getRecordsLoaded()
boolean getDataOnRoamingEnabled()
com.android.internal.telephony.gsm.ApnSetting fetchDunApn()
boolean isApnTypeActive(java.lang.String)
boolean canHandleType(java.lang.String)
boolean isApnTypeAvailable(java.lang.String)
java.util.ArrayList getAllDataConnections()
boolean isDataAllowed()
void onGprsDetached()
void cleanUpConnection(boolean,java.lang.String)
void resetRetryCount()
boolean trySetupData(java.lang.String)
void onGprsAttached()
boolean getDesiredPowerState()
java.util.ArrayList buildWaitingApns()
void notifyNoData(com.android.internal.telephony.DataConnection$FailCause)
java.lang.String apnListToString(java.util.ArrayList)
boolean setupData(java.lang.String)
void disconnect(android.os.Message)
void resetSynchronously()
void gotoIdleAndNotifyDataConnection(java.lang.String)
java.lang.String[] parseTypes(java.lang.String)
void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String[],java.lang.String,java.lang.String)
java.util.ArrayList createApnList(android.database.Cursor)
boolean isInactive()
com.android.internal.telephony.gsm.GsmDataConnection findFreePdp()
com.android.internal.telephony.gsm.ApnSetting getNextApn()
void connect(android.os.Message,com.android.internal.telephony.gsm.ApnSetting)
java.lang.String getInterface()
java.lang.String getIpAddress()
java.lang.String getGatewayAddress()
java.lang.String[] getDnsServers()
boolean pdpStatesHasCID(java.util.ArrayList,int)
boolean pdpStatesHasActiveCID(java.util.ArrayList,int)
void createAllApnList()
void onApnChanged()
void onPdpStateChanged(android.os.AsyncResult,boolean)
void notifyDefaultData(java.lang.String)
void startPeriodicPdpPoll()
void resetPollStats()
void reRegisterNetwork(android.os.Message)
void doRecovery()
void restartRadio()
java.lang.Process exec(java.lang.String)
int waitFor()
void runPingTest()
boolean shouldPostNotification(com.android.internal.telephony.DataConnection$FailCause)
boolean retryAfterDisconnected(java.lang.String)
boolean isRetryNeeded()
int apnTypeToId(java.lang.String)
void onEnableApn(int,int)
void retryForeverUsingLastTimeout()
int getRetryTimer()
void increaseRetryCount()
void reconnectAfterFail(com.android.internal.telephony.DataConnection$FailCause,java.lang.String)
void onRecordsLoaded()
void onEnableNewApn()
boolean onTrySetupData(java.lang.String)
void onRoamingOff()
void onRoamingOn()
void setPreferredApn(int)
boolean isEventLoggable()
boolean isPermanentFail()
void startDelayedRetry(com.android.internal.telephony.DataConnection$FailCause,java.lang.String)
void onDataSetupComplete(android.os.AsyncResult)
void onDisconnectDone(android.os.AsyncResult)
void onResetDone(android.os.AsyncResult)
void onPollPdp()
void onVoiceCallStarted()
void onVoiceCallEnded()
void onCleanUpConnection(boolean,java.lang.String)
com.android.internal.telephony.gsm.ApnSetting getPreferredApn()
boolean removeAll(java.util.Collection)
com.android.internal.telephony.gsm.ApnSetting fromString(java.lang.String)
com.android.internal.telephony.gsm.NetworkInfo$State[] values()
com.android.internal.telephony.gsm.NetworkInfo$State valueOf(java.lang.String)
java.lang.String makeEmptyNull(java.lang.String)
boolean isTwoDigitShortCode(android.content.Context,java.lang.String)
boolean isShortCode(java.lang.String,com.android.internal.telephony.gsm.GSMPhone)
com.android.internal.telephony.gsm.GsmMmiCode newFromDialString(java.lang.String,com.android.internal.telephony.gsm.GSMPhone)
com.android.internal.telephony.gsm.GsmMmiCode newNetworkInitiatedUssd(java.lang.String,boolean,com.android.internal.telephony.gsm.GSMPhone)
com.android.internal.telephony.gsm.GsmMmiCode newFromUssdUserInput(java.lang.String,com.android.internal.telephony.gsm.GSMPhone)
boolean isEmptyOrNull(java.lang.CharSequence)
int scToCallForwardReason(java.lang.String)
int siToServiceClass(java.lang.String)
int siToTime(java.lang.String)
boolean isServiceCodeCallForwarding(java.lang.String)
boolean isServiceCodeCallBarring(java.lang.String)
java.lang.String scToBarringFacility(java.lang.String)
com.android.internal.telephony.MmiCode$State getState()
java.lang.CharSequence getMessage()
void onMMIDone(com.android.internal.telephony.gsm.GsmMmiCode)
boolean isCancelable()
boolean isMMI()
boolean isShortCode()
java.lang.String[] getStringArray(int)
boolean isEmergencyNumber(java.lang.String)
boolean isPinCommand()
boolean isActivate()
boolean isDeactivate()
boolean isTemporaryModeCLIR()
int getCLIRMode()
boolean isInterrogate()
boolean isRegister()
boolean isErasure()
boolean isPendingUSSD()
boolean isUssdRequest()
void sendUssd(java.lang.String)
void handlePasswordError(int)
void processCode()
java.lang.CharSequence getScString()
void <init>(java.lang.CharSequence)
void onUssdFinished(java.lang.String,boolean)
void onUssdFinishedError()
void onSetComplete(android.os.AsyncResult)
void onGetClirComplete(android.os.AsyncResult)
void onQueryCfComplete(android.os.AsyncResult)
void onQueryComplete(android.os.AsyncResult)
java.lang.CharSequence getErrorMessage(android.os.AsyncResult)
java.lang.CharSequence serviceClassToCFString(int)
java.lang.CharSequence replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])
java.lang.CharSequence makeCFQueryResultMessage(com.android.internal.telephony.CallForwardInfo,int)
java.lang.CharSequence createQueryCallWaitingResultMessage(int)
java.lang.CharSequence createQueryCallBarringResultMessage(int)
int hashCode()
void <init>(com.android.internal.telephony.gsm.GSMPhone$1)
com.android.internal.telephony.DataConnectionTracker$Activity[] values()
void writeStringList(java.util.List)
void setEnterNotificationParams(com.android.internal.telephony.DataConnection$ConnectionParams,com.android.internal.telephony.DataConnection$FailCause)
void access$2300(com.android.internal.telephony.DataConnection,com.android.internal.util.HierarchicalState)
void <init>(boolean,com.android.internal.telephony.test.CallInfo$State,boolean,java.lang.String)
com.android.internal.telephony.test.CallInfo createOutgoingCall(java.lang.String)
com.android.internal.telephony.test.CallInfo createIncomingCall(java.lang.String)
java.lang.String toCLCCLine(int)
com.android.internal.telephony.DriverCall toDriverCall(int)
boolean isActiveOrHeld()
boolean isConnecting()
java.lang.String getNextLine(boolean)
java.lang.String getNextLine()
java.lang.String getNextLineCtrlZ()
com.android.internal.telephony.test.SimulatedCommands$SimLockState[] values()
com.android.internal.telephony.test.SimulatedCommands$SimLockState valueOf(java.lang.String)
com.android.internal.telephony.test.CallInfo$State[] values()
com.android.internal.telephony.test.CallInfo$State valueOf(java.lang.String)
com.android.internal.telephony.test.SimulatedCommands$SimFdnState[] values()
com.android.internal.telephony.test.SimulatedCommands$SimFdnState valueOf(java.lang.String)
void <init>(java.io.InputStream,java.io.OutputStream)
void setReuseAddress(boolean)
void bind(java.net.SocketAddress)
void <init>(java.net.InetSocketAddress)
java.net.Socket accept()
void processLine(java.lang.String)
boolean triggerRing(java.lang.String)
void triggerRing(java.lang.String)
void progressConnectingCallState()
void progressConnectingToActive()
void setAutoProgressConnectingCall(boolean)
void setNextDialFailImmediately(boolean)
void setNextCallFailCause(int)
boolean triggerHangupForeground()
void triggerHangupForeground()
boolean triggerHangupBackground()
void triggerHangupBackground()
boolean triggerHangupAll()
void triggerHangupAll()
void sendUnsolicited(java.lang.String)
void triggerSsn(int,int)
void triggerIncomingUssd(java.lang.String,java.lang.String)
void triggerIncomingSMS(java.lang.String)
void pauseResponses()
void resumeResponses()
boolean onAnswer()
void onAnswer()
void onHangup()
boolean onChld(char,char)
void onCHLD(java.lang.String)
boolean releaseHeldOrUDUB()
void releaseHeldOrUDUB()
boolean releaseActiveAcceptHeldOrWaiting()
void releaseActiveAcceptHeldOrWaiting()
boolean switchActiveAndHeldOrWaiting()
void switchActiveAndHeldOrWaiting()
boolean separateCall(int)
void separateCall(int)
boolean conference()
boolean onDial(java.lang.String)
void onDial(java.lang.String)
java.util.List getClccLines()
void onCLCC()
void onSMSSend(java.lang.String)
java.lang.String[] splitCommands(java.lang.String)
java.lang.String extractNetworkPortion(java.lang.String)
boolean onHangup()
boolean explicitCallTransfer()
int countActiveLines()
java.util.List getDriverCalls()
void unimplemented(android.os.Message)
void <init>(com.android.internal.telephony.CommandException$Error)
void resultSuccess(android.os.Message,java.lang.Object)
void resultFail(android.os.Message,java.lang.Throwable)
boolean isSimLocked()
void forceDataDormancy(android.os.Message)
void <init>(java.lang.String[],java.util.ArrayList)
void acquireReference()
void setStartPosition(int)
int getColumnCount()
boolean setNumColumns(int)
boolean allocRow()
boolean putBlob(byte[],int,int)
void freeLastRow()
boolean putString(java.lang.String,int,int)
boolean putNull(int,int)
void releaseReference()
void fillWindow(int,android.database.CursorWindow)
void loadAllFromEF(int,int,android.os.Message)
byte[] buildAdnString(int)
boolean hasExtendedRecord()
void appendExtRecord(byte[])
void <init>(com.android.internal.telephony.IccCard)
void access$000(com.android.internal.telephony.IccCard,android.os.AsyncResult)
void access$100(com.android.internal.telephony.IccCard,android.os.AsyncResult)
void access$200(com.android.internal.telephony.IccCard,android.os.AsyncResult)
boolean access$400(com.android.internal.telephony.IccCard)
boolean access$302(com.android.internal.telephony.IccCard,boolean)
boolean access$300(com.android.internal.telephony.IccCard)
void access$500(com.android.internal.telephony.IccCard,java.lang.String)
boolean access$700(com.android.internal.telephony.IccCard)
boolean access$602(com.android.internal.telephony.IccCard,boolean)
boolean access$600(com.android.internal.telephony.IccCard)
boolean checkNoOperationsPending()
boolean validateNonNegativeInt(java.lang.String,int)
android.util.Pair parseNonNegativeInt(java.lang.String,java.lang.String)
int nextRandomizationTime(int)
int getRetryCount()
void setRetryCount(int)
boolean isRetryForever()
void <init>(java.lang.Object,java.lang.Object)
void parseRecord(byte[])
void <init>(int,int,java.lang.String,java.lang.String)
java.lang.String[] getEmails()
boolean stringCompareNullEqualsEmpty(java.lang.String,java.lang.String)
boolean equals(java.lang.Object[],java.lang.Object[])
boolean isEqual(com.android.internal.telephony.AdnRecord)
byte[] numberToCalledPartyBCD(java.lang.String)
java.lang.String calledPartyBCDFragmentToString(byte[],int,int)
java.lang.String getCompleteVoiceMailNumber()
void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
void <init>(com.android.internal.telephony.Phone,com.android.internal.telephony.SMSDispatcher)
void createWakelock()
void <init>(com.android.internal.telephony.SMSDispatcher,int,int)
void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)
void handleSendComplete(android.os.AsyncResult)
void handleIccFull()
void handleReachSentLimit(com.android.internal.telephony.SMSDispatcher$SmsTracker)
void send(int)
boolean isMultipartTracker(com.android.internal.telephony.SMSDispatcher$SmsTracker)
void dispatch(android.content.Intent,java.lang.String)
void sendBroadcast(android.content.Intent,java.lang.String)
java.lang.String getOriginatingAddress()
long getTimestampMillis()
int getColumnIndex(java.lang.String)
android.telephony.SmsMessage createFromPdu(byte[])
android.content.Intent putExtra(java.lang.String,java.io.Serializable)
void <init>(java.lang.String,android.net.Uri)
void <init>(java.util.HashMap,android.app.PendingIntent,android.app.PendingIntent)
java.lang.String getAppNameByIntent(android.app.PendingIntent)
boolean check(java.lang.String,int)
android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)
android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)
android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)
java.lang.String getTargetPackage()
int access$000()
int[] access$100()
com.android.internal.telephony.ITelephonyRegistry asInterface(android.os.IBinder)
com.android.internal.telephony.Connection getEarliestConnection()
int convertCallState(com.android.internal.telephony.Phone$State)
void notifyCallState(int,java.lang.String)
void notifyServiceState(android.telephony.ServiceState)
void notifyServiceState(com.android.internal.telephony.Phone)
void notifySignalStrength(android.telephony.SignalStrength)
void notifySignalStrength(com.android.internal.telephony.Phone)
void notifyMessageWaitingChanged(boolean)
void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)
void notifyCallForwardingChanged(boolean)
int convertDataActivityState(com.android.internal.telephony.Phone$DataActivityState)
void notifyDataActivity(int)
void notifyDataActivity(com.android.internal.telephony.Phone)
int convertDataState(com.android.internal.telephony.Phone$DataState)
void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,int,java.lang.String)
void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String)
void notifyDataConnectionFailed(java.lang.String)
void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String)
void fillInNotifierBundle(android.os.Bundle)
void notifyCellLocation(android.os.Bundle)
void notifyCellLocation(com.android.internal.telephony.Phone)
com.android.internal.telephony.Phone$State convertCallState(int)
com.android.internal.telephony.Phone$DataState convertDataState(int)
com.android.internal.telephony.Phone$DataActivityState convertDataActivityState(int)
com.android.internal.telephony.IccCardStatus$CardState[] values()
com.android.internal.telephony.IccCardStatus$CardState valueOf(java.lang.String)
boolean isCardPresent()
boolean onCreate()
java.util.ArrayList loadFromEf(int)
java.lang.String getType(android.net.Uri)
java.lang.String getAsString(java.lang.String)
boolean addIccRecordToEf(int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)
java.lang.String normalizeValue(java.lang.String)
boolean deleteIccRecordFromEf(int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String)
boolean updateIccRecordInEf(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
com.android.internal.telephony.IIccPhoneBook asInterface(android.os.IBinder)
void loadRecord(com.android.internal.telephony.AdnRecord,java.util.ArrayList)
boolean getVoiceMessageWaiting()
com.android.internal.telephony.DataConnection$SetupResult valueOf(java.lang.String)
void <init>(android.os.Message)
void <init>(com.android.internal.telephony.DataConnection$ResetSynchronouslyLock)
com.android.internal.telephony.Phone$State valueOf(java.lang.String)
com.android.internal.telephony.IccCardStatus$PinState[] values()
com.android.internal.telephony.IccCardStatus$PinState valueOf(java.lang.String)
int binarySearch(short[],short)
java.lang.String defaultTimeZoneForMcc(int)
java.lang.String defaultLanguageForMcc(int)
int wifiChannelsForMcc(int)
void setTimezoneFromMccIfNeeded(com.android.internal.telephony.PhoneBase,int)
void setLocaleFromMccIfNeeded(com.android.internal.telephony.PhoneBase,int)
void setWifiChannelsFromMcc(com.android.internal.telephony.PhoneBase,int)
void updateConfiguration(android.content.res.Configuration)
void setSystemLocale(java.lang.String,java.lang.String)
boolean setNumAllowedChannels(int,boolean)
com.android.internal.telephony.Call$State valueOf(java.lang.String)
boolean isDialing()
com.android.internal.telephony.IccCardApplication$AppState[] values()
com.android.internal.telephony.IccCardApplication$AppState valueOf(java.lang.String)
boolean isPinRequired()
boolean isPukRequired()
boolean isSubscriptionPersoEnabled()
boolean isAppReady()
boolean isAppNotReady()
java.lang.String getServiceCenterAddress()
java.lang.String getDisplayOriginatingAddress()
java.lang.String getDisplayMessageBody()
java.lang.String getPseudoSubject()
boolean isEmail()
java.lang.String getEmailBody()
java.lang.String getEmailFrom()
int getStatusOnIcc()
int getIndexOnIcc()
void extractEmailAddressFromMessageBody()
boolean isEmailAddress(java.lang.String)
boolean hasConnection(com.android.internal.telephony.Connection)
boolean hasConnections()
long getEarliestCreateTime()
long getEarliestConnectTime()
com.android.internal.telephony.Connection getLatestConnection()
boolean isGeneric()
void setGeneric(boolean)
int nextInt()
boolean nextBoolean()
boolean hasMore()
java.lang.String nextString()
com.android.internal.telephony.DriverCall fromCLCCLine(java.lang.String)
int compareTo(java.lang.Object)
android.os.Handler getTarget()
void resetSerial()
com.android.internal.telephony.CommandException fromRilErrno(int)
com.android.internal.telephony.CommandsInterface$RadioState valueOf(java.lang.String)
void <init>(com.android.internal.telephony.CallerInfoAsyncQuery,android.content.Context)
void <init>(com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler,android.os.Looper)
android.os.Handler createHandler(android.os.Looper)
void access$000(com.android.internal.telephony.CallerInfoAsyncQuery)
com.android.internal.telephony.CallerInfo markAsEmergency(android.content.Context)
com.android.internal.telephony.CallerInfo markAsVoiceMail()
com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri,android.database.Cursor)
com.android.internal.telephony.CallerInfo doSecondaryLookupIfNecessary(android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfo)
java.lang.String formatNumber(java.lang.String)
void <init>(com.android.internal.telephony.CallerInfoAsyncQuery$1)
void onQueryComplete(int,java.lang.Object,com.android.internal.telephony.CallerInfo)
void <init>(com.android.internal.telephony.CallerInfoAsyncQuery,android.content.Context,com.android.internal.telephony.CallerInfoAsyncQuery$1)
android.content.Context access$302(com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler,android.content.Context)
android.net.Uri access$402(com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler,android.net.Uri)
com.android.internal.telephony.CallerInfo access$502(com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler,com.android.internal.telephony.CallerInfo)
com.android.internal.telephony.Connection$PostDialState[] values()
com.android.internal.telephony.Connection$PostDialState valueOf(java.lang.String)
com.android.internal.telephony.Phone$DataState valueOf(java.lang.String)
com.android.internal.telephony.Phone$DataActivityState valueOf(java.lang.String)
boolean success()
com.android.internal.telephony.IccException getException()
com.android.internal.telephony.DriverCall$State valueOf(java.lang.String)
void dial(java.lang.String)
void call(java.lang.String)
boolean showCallScreenWithDialpad(boolean)
boolean endCall()
void answerRingingCall()
void silenceRinger()
boolean isOffhook()
boolean isSimPinEnabled()
void cancelMissedCallsNotification()
boolean supplyPin(java.lang.String)
void toggleRadioOnOff()
android.os.Bundle getCellLocation()
java.util.List getNeighboringCellInfo()
int getDataActivity()
int getDataState()
int getActivePhoneType()
boolean getCdmaNeedsProvisioning()
boolean hasIccCard()
void nextTok()
void skipPrefix()
char skipWhiteSpace(char)
com.android.internal.telephony.IccCardApplication$AppType[] values()
com.android.internal.telephony.IccCardApplication$AppType valueOf(java.lang.String)
com.android.internal.telephony.CommandException$Error[] values()
com.android.internal.telephony.CommandException$Error valueOf(java.lang.String)
void <init>(com.android.internal.telephony.cdma.RuimSmsInterfaceManager)
void <init>(com.android.internal.telephony.cdma.CDMAPhone,com.android.internal.telephony.SMSDispatcher)
java.lang.Object access$000(com.android.internal.telephony.cdma.RuimSmsInterfaceManager)
boolean access$102(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,boolean)
java.util.List access$202(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,java.util.List)
java.util.ArrayList access$300(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,java.util.ArrayList)
java.util.List access$200(com.android.internal.telephony.cdma.RuimSmsInterfaceManager)
void <init>(int,int,int,java.lang.String,int,int)
void <init>(com.android.internal.telephony.cdma.CDMAPhone)
void <init>(int,java.lang.String,int,int,int,int)
void <init>(java.lang.String,int,int,int,int,int)
java.lang.String idToString(int)
void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)
void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)
void <init>(com.android.internal.telephony.PhoneBase,android.content.Context,int)
void setIsoCountryProperty(java.lang.String)
boolean updateCurrentCarrierInProvider(java.lang.String)
com.android.internal.telephony.cdma.CdmaCall getRingingCall()
int getCurrentCdmaDataConnectionState()
com.android.internal.telephony.DataConnectionTracker$Activity getActivity()
java.lang.String stripSeparators(java.lang.String)
com.android.internal.telephony.cdma.CdmaCall getBackgroundCall()
com.android.internal.telephony.cdma.CdmaCall getForegroundCall()
java.lang.String getMdnNumber()
java.lang.String getPrlVersion()
java.lang.String getImsi()
boolean setDataEnabled(boolean)
com.android.internal.telephony.cdma.CdmaMmiCode newFromDialString(java.lang.String,com.android.internal.telephony.cdma.CDMAPhone)
boolean isPukCommand()
boolean getDataEnabled()
void onMMIDone(com.android.internal.telephony.cdma.CdmaMmiCode)
void enableSingleLocationUpdate()
void setDataOnRoamingEnabled(boolean)
boolean isInEmergencyCall()
void sendEmergencyCallbackModeChange()
void updateMessageWaitingIndicator(int)
boolean needsOtaServiceProvisioning()
void handleEnterEmergencyCallbackMode(android.os.Message)
void handleExitEmergencyCallbackMode(android.os.Message)
void handleTimerInEmergencyCallbackMode(int)
void loadEriFile()
boolean isEriFileLoaded()
boolean isInstance(java.lang.Object)
void storeVoiceMailNumber(java.lang.String)
void registerForNvLoaded(android.os.Handler,int,java.lang.Object)
void unregisterForNvLoaded(android.os.Handler)
void registerForEriFileLoaded(android.os.Handler,int,java.lang.Object)
void unregisterForEriFileLoaded(android.os.Handler)
int extractSelCodeFromOtaSpNum(java.lang.String)
boolean isIs683OtaSpDialStr(java.lang.String)
boolean regionMatches(int,java.lang.String,int,int)
boolean checkOtaSpNumBasedOnSysSelCode(int,java.lang.String[])
boolean isCarrierOtaSpNum(java.lang.String)
java.lang.String[] split(java.lang.CharSequence)
int getCdmaRoamingIndicator()
int getCdmaDefaultRoamingIndicator()
java.lang.String getCdmaEriText(int,int)
android.content.SharedPreferences$Editor edit()
android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)
void apply()
void <init>(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
boolean access$002(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,boolean)
com.android.internal.telephony.DataConnectionTracker$State access$100(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
com.android.internal.telephony.DataConnectionTracker$State access$200(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
void access$300(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,boolean,java.lang.String)
boolean access$400(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,java.lang.String)
boolean access$502(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,boolean)
boolean access$602(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,boolean)
void <init>(com.android.internal.telephony.cdma.EriManager)
void <init>(com.android.internal.telephony.cdma.EriManager,int,int,java.lang.String)
void <init>(com.android.internal.telephony.cdma.CdmaCallTracker)
void hangup(com.android.internal.telephony.cdma.CdmaConnection)
void handleEcmTimer(int)
com.android.internal.telephony.Connection dialThreeWay(java.lang.String)
void <init>(android.content.Context,java.lang.String,com.android.internal.telephony.cdma.CdmaCallTracker,com.android.internal.telephony.cdma.CdmaCall)
void disableDataCallInEmergencyCall(java.lang.String)
void updateParent(com.android.internal.telephony.cdma.CdmaCall,com.android.internal.telephony.cdma.CdmaCall)
void flashAndSetGenericTrue()
com.android.internal.telephony.Connection checkMtFindNewRinging(com.android.internal.telephony.DriverCall,int)
void checkAndEnableDataCallAfterEmergencyCallDropped()
com.android.internal.telephony.cdma.CdmaCall getCall()
void onLocalDisconnect()
int getCDMAIndex()
void separate(com.android.internal.telephony.cdma.CdmaConnection)
void hangupAllConnections(com.android.internal.telephony.cdma.CdmaCall)
void hangup(com.android.internal.telephony.cdma.CdmaCall)
void hangupConnectionByIndex(com.android.internal.telephony.cdma.CdmaCall,int)
com.android.internal.telephony.cdma.CdmaConnection getConnectionByIndex(com.android.internal.telephony.cdma.CdmaCall,int)
void notifyCallWaitingInfo(com.android.internal.telephony.cdma.CdmaCallWaitingNotification)
void <init>(android.content.Context,com.android.internal.telephony.cdma.CdmaCallWaitingNotification,com.android.internal.telephony.cdma.CdmaCallTracker,com.android.internal.telephony.cdma.CdmaCall)
void handleCallWaitingInfo(com.android.internal.telephony.cdma.CdmaCallWaitingNotification)
int compareTo(java.lang.String)
void <init>(android.content.Context,com.android.internal.telephony.DriverCall,com.android.internal.telephony.cdma.CdmaCallTracker,int)
void encodeMessageId(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)
int countAsciiSeptets(java.lang.CharSequence,boolean)
int get(int,int)
com.android.internal.telephony.SmsMessageBase$TextEncodingDetails calcTextEncodingDetails(java.lang.CharSequence,boolean)
byte[] encode7bitAscii(java.lang.String,boolean)
byte[] encodeUtf16(java.lang.String)
byte[] stringToGsm7BitPacked(java.lang.String,int,boolean,int,int)
void <init>(com.android.internal.telephony.cdma.sms.BearerData$1)
com.android.internal.telephony.cdma.sms.BearerData$Gsm7bitCodingResult encode7bitGsm(java.lang.String,int,boolean)
void encode7bitEms(com.android.internal.telephony.cdma.sms.UserData,byte[],boolean)
void encode16bitEms(com.android.internal.telephony.cdma.sms.UserData,byte[])
void encodeEmsUserDataPayload(com.android.internal.telephony.cdma.sms.UserData)
void encodeUserDataPayload(com.android.internal.telephony.cdma.sms.UserData)
void encodeUserData(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)
void encodeReplyOption(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)
byte[] encodeDtmfSmsAddress(java.lang.String)
void encodeCdmaSmsAddress(com.android.internal.telephony.cdma.sms.CdmaSmsAddress)
void encodeCallbackNumber(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)
void encodeMsgStatus(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)
void encodeMsgCount(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)
void encodeValidityPeriodRel(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)
void encodePrivacyIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)
void encodeLanguageIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)
void encodeDisplayMode(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)
void encodePriorityIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)
void encodeMsgDeliveryAlert(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)
byte[] encode(com.android.internal.telephony.cdma.sms.BearerData)
boolean decodeMessageId(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
boolean decodeUserData(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
java.lang.String decodeUtf8(byte[],int,int)
java.lang.String decodeUtf16(byte[],int,int)
java.lang.StringBuffer append(char)
java.lang.String decode7bitAscii(byte[],int,int)
java.lang.String decode7bitGsm(byte[],int,int)
java.lang.String decodeLatin(byte[],int,int)
void decodeUserDataPayload(com.android.internal.telephony.cdma.sms.UserData,boolean)
void decodeIs91VoicemailStatus(com.android.internal.telephony.cdma.sms.BearerData)
void decodeIs91ShortMessage(com.android.internal.telephony.cdma.sms.BearerData)
void decodeSmsAddress(com.android.internal.telephony.cdma.sms.CdmaSmsAddress)
void decodeIs91Cli(com.android.internal.telephony.cdma.sms.BearerData)
void decodeIs91(com.android.internal.telephony.cdma.sms.BearerData)
boolean decodeReplyOption(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
int cdmaBcdByteToInt(byte)
boolean decodeMsgCount(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
boolean decodeDepositIndex(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
java.lang.String toString(int,int)
java.lang.String decodeDtmfSmsAddress(byte[],int)
boolean decodeCallbackNumber(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
boolean decodeMsgStatus(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
com.android.internal.telephony.cdma.sms.BearerData$TimeStamp fromByteArray(byte[])
boolean decodeMsgCenterTimeStamp(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
boolean decodeValidityAbs(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
boolean decodeDeferredDeliveryAbs(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
boolean decodeValidityRel(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
boolean decodeDeferredDeliveryRel(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
boolean decodePrivacyIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
boolean decodeLanguageIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
boolean decodeDisplayMode(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
boolean decodePriorityIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
boolean decodeMsgDeliveryAlert(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
boolean decodeUserResponseCode(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)
com.android.internal.telephony.cdma.sms.BearerData decode(byte[])
byte[] parseToDtmf(java.lang.String)
int indexOfKey(int)
boolean valueAt(int)
java.lang.String filterNumericSugar(java.lang.String)
java.lang.String filterWhitespace(java.lang.String)
byte[] stringToAscii(java.lang.String)
com.android.internal.telephony.cdma.sms.CdmaSmsAddress parse(java.lang.String)
void put(int,boolean)
void put(int,int)
void registerForCdmaDataConnectionAttached(android.os.Handler,int,java.lang.Object)
void registerForCdmaDataConnectionDetached(android.os.Handler,int,java.lang.Object)
void createAllDataConnectionList()
void unregisterForCdmaDataConnectionAttached(android.os.Handler)
void unregisterForCdmaDataConnectionDetached(android.os.Handler)
void destroyAllDataConnectionList()
com.android.internal.telephony.cdma.CdmaDataConnection findFreeDataConnection()
boolean sendEmptyMessageDelayed(int,long)
void onNVReady()
boolean processPendingRadioPowerOffAfterDataOff()
void onRestartRadio()
com.android.internal.telephony.cdma.CdmaDataConnection makeDataConnection(com.android.internal.telephony.cdma.CDMAPhone)
int getBaseStationId()
void onCdmaDataDetached()
void onCdmaOtaProvision(android.os.AsyncResult)
void writeEventLogCdmaDataDrop()
void onDataStateChanged(android.os.AsyncResult)
long access$700(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
long access$800(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
long access$902(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,long)
long access$1002(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,long)
boolean access$1100(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
long access$1200(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
long access$1300(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
long access$1402(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,long)
com.android.internal.telephony.PhoneBase access$1500(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
long access$1614(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,long)
long access$1702(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,long)
long access$1802(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,long)
com.android.internal.telephony.DataConnectionTracker$Activity access$1900(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
com.android.internal.telephony.DataConnectionTracker$Activity access$2000(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
long access$2102(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,long)
com.android.internal.telephony.DataConnectionTracker$Activity access$2200(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
com.android.internal.telephony.DataConnectionTracker$Activity access$2300(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
com.android.internal.telephony.DataConnectionTracker$Activity access$2400(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
com.android.internal.telephony.DataConnectionTracker$Activity access$2502(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,com.android.internal.telephony.DataConnectionTracker$Activity)
com.android.internal.telephony.PhoneBase access$2600(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
long access$2700(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
int access$2800(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
long access$2900(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
int access$3000(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
int access$3108(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
int access$3202(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,int)
boolean access$3302(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,boolean)
int access$3402(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,int)
int access$3502(com.android.internal.telephony.cdma.CdmaDataConnectionTracker,int)
boolean access$3600(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
int access$3700(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
android.os.Handler access$3800(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)
void <init>(com.android.internal.telephony.cdma.CdmaServiceStateTracker,android.os.Handler)
void access$000(com.android.internal.telephony.cdma.CdmaServiceStateTracker)
void setCellLocationData(int,int,int,int,int)
void hangupAndPowerOff()
boolean isRoamIndForHomeSystem(java.lang.String)
int radioTechnologyToDataServiceState(int)
void setCssIndicator(int)
void setSystemAndNetworkId(int,int)
boolean isSidsAllZeros()
int getSystemId()
boolean isHomeSid(int)
void setCdmaDefaultRoamingIndicator(int)
void setCdmaRoamingIndicator(int)
int getCdmaEriIconIndex(int,int)
void setCdmaEriIconIndex(int)
int getCdmaEriIconMode(int,int)
void setCdmaEriIconMode(int)
void fixTimeZone(java.lang.String)
void setCdmaEriText(java.lang.String)
long abs(long)
void handleCdmaStatusReport(com.android.internal.telephony.cdma.SmsMessage)
byte[] getIncomingSmsFingerprint()
void parseSms()
int getTeleService()
int getNumOfVoicemails()
android.content.SharedPreferences$Editor putInt(java.lang.String,int)
int processCdmaWapPdu(byte[],int,java.lang.String)
boolean checkDuplicatePortOmadmWappush(byte[],int)
com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)
void sendSubmitPdu(com.android.internal.telephony.cdma.SmsMessage$SubmitPdu,android.app.PendingIntent,android.app.PendingIntent)
com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.SmsHeader)
com.android.internal.telephony.cdma.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,com.android.internal.telephony.cdma.sms.UserData,boolean)
boolean decodeUintvarInteger(int)
int getDecodedDataLength()
boolean decodeContentType(int)
java.lang.String getValueString()
long getValue32()
void <init>(com.android.internal.telephony.cdma.CDMAPhone,java.lang.String)
void loadEriFileFromModem()
void loadEriFileFromFileSystem()
void loadEriFileFromXml()
int getEriFileVersion()
int getEriNumberOfEntries()
int getEriFileType()
com.android.internal.telephony.cdma.EriInfo getEriInfo(int)
com.android.internal.telephony.cdma.EriManager$EriDisplayInformation getEriDisplayInformation(int,int)
void connectionDisconnected(com.android.internal.telephony.cdma.CdmaConnection)
void detach(com.android.internal.telephony.cdma.CdmaConnection)
boolean update(com.android.internal.telephony.cdma.CdmaConnection,com.android.internal.telephony.DriverCall)
void fetchRuimRecords()
java.lang.String getRUIMOperatorNumeric()
void onRuimReady()
void handleRuimRefresh(int[])
com.android.internal.telephony.cdma.SmsMessage createFromPdu(byte[])
com.android.internal.telephony.cdma.SmsMessage newFromCMT(java.lang.String[])
com.android.internal.telephony.cdma.SmsMessage newFromCMTI(java.lang.String)
com.android.internal.telephony.cdma.SmsMessage newFromCDS(java.lang.String)
byte convertDtmfToAscii(byte)
void createPdu()
com.android.internal.telephony.cdma.SmsMessage newFromParcel(android.os.Parcel)
com.android.internal.telephony.cdma.SmsMessage createFromEfRecord(int,byte[])
com.android.internal.telephony.cdma.SmsMessage$SubmitPdu privateGetSubmitPdu(java.lang.String,boolean,com.android.internal.telephony.cdma.sms.UserData)
int getNextMessageId()
java.lang.String cdmaCheckAndProcessPlusCode(java.lang.String)
void writeByte(int)
void <init>(com.android.internal.telephony.cdma.CdmaConnection,android.os.Looper)
com.android.internal.telephony.cdma.CdmaCall parentFromDCState(com.android.internal.telephony.DriverCall$State)
java.lang.String formatDialString(java.lang.String)
void doDisconnect()
boolean isPause(char)
boolean isWait(char)
int findNextPCharOrNonPOrNonWCharIndex(java.lang.String,int)
char findPOrWCharToAppend(java.lang.String,int,int)
void access$000(com.android.internal.telephony.cdma.CdmaConnection)
java.lang.Integer signalParamHash(int,int,int)
int getAudioToneFromSignalInfo(int,int,int)
void <init>(com.android.internal.telephony.CallManager)
com.android.internal.telephony.CallManager getInstance()
com.android.internal.telephony.Phone getPhoneBase(com.android.internal.telephony.Phone)
boolean isSamePhone(com.android.internal.telephony.Phone,com.android.internal.telephony.Phone)
java.util.List unmodifiableList(java.util.List)
java.util.List getAllPhones()
int getServiceState()
void registerForPhoneStates(com.android.internal.telephony.Phone)
boolean registerPhone(com.android.internal.telephony.Phone)
void unregisterForPhoneStates(com.android.internal.telephony.Phone)
void unregisterPhone(com.android.internal.telephony.Phone)
com.android.internal.telephony.Phone getDefaultPhone()
com.android.internal.telephony.Call getActiveFgCall()
com.android.internal.telephony.Phone getFgPhone()
com.android.internal.telephony.Call getFirstActiveBgCall()
com.android.internal.telephony.Phone getBgPhone()
com.android.internal.telephony.Call getFirstActiveRingingCall()
com.android.internal.telephony.Phone getRingingPhone()
com.android.internal.telephony.Call$State getActiveFgCallState()
void setAudioMode()
boolean hasActiveFgCall()
void acceptCall(com.android.internal.telephony.Call)
void rejectCall(com.android.internal.telephony.Call)
void switchHoldingAndActive(com.android.internal.telephony.Call)
void hangupForegroundResumeBackground(com.android.internal.telephony.Call)
boolean canConference(com.android.internal.telephony.Call)
boolean canDial(com.android.internal.telephony.Phone)
com.android.internal.telephony.Connection dial(com.android.internal.telephony.Phone,java.lang.String)
com.android.internal.telephony.Connection dial(com.android.internal.telephony.Phone,java.lang.String,com.android.internal.telephony.UUSInfo)
boolean hasActiveRingingCall()
boolean hasActiveBgCall()
boolean canTransfer(com.android.internal.telephony.Call)
void explicitCallTransfer(com.android.internal.telephony.Call)
java.util.List getPendingMmiCodes(com.android.internal.telephony.Phone)
boolean sendUssdResponse(com.android.internal.telephony.Phone,java.lang.String)
boolean sendDtmf(char)
boolean startDtmf(char)
boolean sendBurstDtmf(java.lang.String,int,int,android.os.Message)
void registerForPostDialCharacter(android.os.Handler,int,java.lang.Object)
void unregisterForPostDialCharacter(android.os.Handler)
java.util.List getRingingCalls()
java.util.List getForegroundCalls()
java.util.List getBackgroundCalls()
com.android.internal.telephony.Call getFirstActiveCall(java.util.ArrayList)
com.android.internal.telephony.Call getFirstNonIdleCall(java.util.List)
java.util.List getFgCallConnections()
java.util.List getBgCallConnections()
com.android.internal.telephony.Connection getFgCallLatestConnection()
com.android.internal.telephony.Call getFirstCallOfState(java.util.ArrayList,com.android.internal.telephony.Call$State)
boolean hasDisconnectedFgCall()
boolean hasDisconnectedBgCall()
boolean hasMoreThanOneRingingCall()
boolean access$000(com.android.internal.telephony.CallManager)
void clearWaiters()
void clearUserWriters()
void notifyWaiters(java.util.ArrayList,android.os.AsyncResult)
void sendErrorResponse(android.os.Message,java.lang.String)
java.util.ArrayList getRecordsIfLoaded(int)
int extensionEfForEf(int)
void updateAdnByIndex(int,com.android.internal.telephony.AdnRecord,int,java.lang.String,android.os.Message)
void updateAdnBySearch(int,com.android.internal.telephony.AdnRecord,com.android.internal.telephony.AdnRecord,java.lang.String,android.os.Message)
void delete(int)
void access$800(com.android.internal.telephony.DataConnection,android.os.Message)
com.android.internal.telephony.DataConnection$SetupResult access$900(com.android.internal.telephony.DataConnection,android.os.AsyncResult)
com.android.internal.telephony.DataConnection$DcActiveState access$1000(com.android.internal.telephony.DataConnection)
void access$1100(com.android.internal.telephony.DataConnection,com.android.internal.util.HierarchicalState)
void access$1200(com.android.internal.telephony.DataConnection,com.android.internal.util.HierarchicalState)
void access$1300(com.android.internal.telephony.DataConnection,java.lang.Object)
com.android.internal.telephony.DataConnection$DcDisconnectingBadDnsState access$1400(com.android.internal.telephony.DataConnection)
void access$1500(com.android.internal.telephony.DataConnection,com.android.internal.util.HierarchicalState)
void access$1600(com.android.internal.telephony.DataConnection,com.android.internal.util.HierarchicalState)
com.android.internal.telephony.ISms asInterface(android.os.IBinder)
java.util.ArrayList createStringArrayList()
com.android.internal.telephony.Connection$DisconnectCause[] values()
com.android.internal.telephony.Connection$DisconnectCause valueOf(java.lang.String)
boolean isUnderLimit(java.util.ArrayList,int)
void setEnterNotificationParams(com.android.internal.telephony.DataConnection$DisconnectParams)
com.android.internal.telephony.DataConnection$DcActivatingState access$500(com.android.internal.telephony.DataConnection)
void access$600(com.android.internal.telephony.DataConnection,com.android.internal.util.HierarchicalState)
void <init>(com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)
void setPropertiesByCarrier()
void sendIncomingCallRingNotification(int)
void notifyIncomingRing()
android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)
void checkCorrectThread(android.os.Handler)
java.lang.String getSavedNetworkSelection()
void add(android.os.Handler,int,java.lang.Object)
java.lang.CharSequence[] getTextArray(int)
android.content.res.AssetManager getAssets()
java.lang.String[] getLocales()
void logUnexpectedCdmaMethodCall(java.lang.String)
void simulateDataConnection(com.android.internal.telephony.Phone$DataState)
boolean decodeTextString(int)
boolean decodeShortInteger(int)
boolean decodeLongInteger(int)
boolean decodeIntegerValue(int)
boolean decodeValueLength(int)
boolean decodeExtensionMedia(int)
boolean decodeConstrainedEncoding(int)
boolean decodeContentLength(int)
boolean decodeContentLocation(int)
boolean decodeXWapApplicationId(int)
boolean decodeXWapContentURI(int)
boolean decodeXWapInitiatorURI(int)
void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)
java.lang.String[] createStringArray()
void allocate(android.content.Context,android.net.Uri)
com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,android.net.Uri,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)
boolean isUriNumber(java.lang.String)
boolean isVoiceMailNumber(java.lang.String)
com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)
void addQueryListener(int,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)
java.lang.String sanitizeUriToString(android.net.Uri)
void tearDownData(java.lang.Object)
void notifyConnectCompleted(com.android.internal.telephony.DataConnection$ConnectionParams,com.android.internal.telephony.DataConnection$FailCause)
void notifyDisconnectCompleted(com.android.internal.telephony.DataConnection$DisconnectParams)
com.android.internal.telephony.DataConnection$SetupResult onSetupConnectionCompleted(android.os.AsyncResult)
void reset(android.os.Message)
void connect(android.os.Message)
java.lang.String getStateAsString()
long getConnectionTime()
long getLastFailTime()
com.android.internal.telephony.DataConnection$FailCause getLastFailCause()
com.android.internal.telephony.DataConnection$DcDisconnectingState access$1800(com.android.internal.telephony.DataConnection)
void access$1900(com.android.internal.telephony.DataConnection,com.android.internal.util.HierarchicalState)
void access$2100(com.android.internal.telephony.DataConnection,com.android.internal.util.HierarchicalState)
int hexCharToInt(char)
int bitToRGB(int)
int[] getCLUT(byte[],int,int)
int[] mapTo2OrderBitColor(byte[],int,int,int[],int)
int[] mapToNon2OrderBitColor(byte[],int,int,int[],int)
android.graphics.Bitmap parseToRGB(byte[],int,boolean)
void onSetDataEnabled(boolean)
java.lang.String apnIdToType(int)
boolean isEnabled(int)
void setEnabled(int,boolean)
void makeDefaultPhone(android.content.Context)
void makeDefaultPhones(android.content.Context)
int getPhoneType(int)
com.android.internal.telephony.sip.SipPhone makeSipPhone(java.lang.String)
com.android.internal.telephony.IccCardStatus$CardState getCardState()
int getGsmUmtsSubscriptionAppIndex()
int getCdmaSubscriptionAppIndex()
int getNumApplications()
com.android.internal.telephony.IccCardApplication getApplication(int)
com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder)
void <init>(java.lang.String,android.net.LocalSocketAddress$Namespace)
void connect(android.net.LocalSocketAddress)
com.android.internal.telephony.IccCard$State[] values()
com.android.internal.telephony.IccCard$State valueOf(java.lang.String)
boolean isPinLocked()
com.android.internal.telephony.DataConnection$FailCause valueOf(java.lang.String)
com.android.internal.telephony.DataConnectionTracker$Activity valueOf(java.lang.String)
void <init>(android.content.AsyncQueryHandler,android.os.Looper)
void setContext(android.content.Context)
void setTarget(android.os.Handler)
void <init>(android.content.Context,android.os.Handler)
com.android.internal.telephony.Phone$State getPhoneState()
int getSignalStrength()
int getSignalStrengthDbm()
void notifyPhoneCallState(int)
boolean getNotifyPhoneCallState()
void notifyServiceState(int)
boolean getNotifyServiceState()
void notifySignalStrength(int)
boolean getNotifySignalStrength()
void registerIntent()
void unregisterIntent()
android.telephony.SignalStrength newFromBundle(android.os.Bundle)
android.telephony.ServiceState newFromBundle(android.os.Bundle)
void <init>(int,int,android.os.Message)
void <init>(int,android.os.Message)
void sendResult(android.os.Message,java.lang.Object,java.lang.Throwable)
void <init>(char)
void dispatchWapPdu_PushCO(byte[],int,int,int,int)
void dispatchWapPdu_MMS(byte[],int,int,int,int)
void dispatchWapPdu_default(byte[],int,int,java.lang.String,int,int)
android.content.Intent setType(java.lang.String)
int getResultCode()
com.android.internal.telephony.MmiCode$State[] values()
com.android.internal.telephony.MmiCode$State valueOf(java.lang.String)
int charToGsm(char,boolean)
int charToGsm(char)
int charToGsmExtended(char)
char gsmToChar(int)
char gsmExtendedToChar(int)
byte[] stringToGsm7BitPacked(java.lang.String)
int countGsmSeptetsUsingTables(java.lang.CharSequence,boolean,int,int)
void packSmsChar(byte[],int,int)
void stringToGsm8BitUnpackedField(java.lang.String,byte[],int,int)
int countGsmSeptets(char,boolean)
int countGsmSeptets(char)
int findGsmSeptetLimitIndex(java.lang.String,int,int,int,int)
void setEnabledSingleShiftTables(int[])
void setEnabledLockingShiftTables(int[])
int[] getEnabledSingleShiftTables()
int[] getEnabledLockingShiftTables()
void publish()
int checkCallingOrSelfPermission(java.lang.String)
int updateEfForIccType(int)
void registerForAbsent(android.os.Handler,int,java.lang.Object)
void unregisterForAbsent(android.os.Handler)
void registerForNetworkLocked(android.os.Handler,int,java.lang.Object)
void unregisterForNetworkLocked(android.os.Handler)
void registerForLocked(android.os.Handler,int,java.lang.Object)
void unregisterForLocked(android.os.Handler)
void supplyPin(java.lang.String,android.os.Message)
void supplyPuk(java.lang.String,java.lang.String,android.os.Message)
void supplyPin2(java.lang.String,android.os.Message)
void supplyPuk2(java.lang.String,java.lang.String,android.os.Message)
boolean getIccLockEnabled()
boolean getIccFdnEnabled()
void setIccLockEnabled(boolean,java.lang.String,android.os.Message)
void setIccFdnEnabled(boolean,java.lang.String,android.os.Message)
void changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)
void changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)
void handleIccCardStatus(com.android.internal.telephony.IccCardStatus)
void getIccCardStatusDone(android.os.AsyncResult)
com.android.internal.telephony.IccCard$State getIccCardState()
void onQueryFdnEnabled(android.os.AsyncResult)
void onQueryFacilityLock(android.os.AsyncResult)
java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence)
int getColumnIndexForPersonId(android.net.Uri,android.database.Cursor)
java.lang.String normalize(java.lang.String)
com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,android.net.Uri)
com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)
boolean isGlobalPhoneNumber(java.lang.String)
java.lang.String getCallerId(android.content.Context,java.lang.String)
boolean isEmergencyNumber()
boolean isVoiceMailNumber()
void readByteArray(byte[])
com.android.internal.telephony.SmsRawData createFromParcel(android.os.Parcel)
com.android.internal.telephony.SmsRawData[] newArray(int)
int getCallingPid()
java.lang.String transportDirName()
long requestBackupTime()
int initializeDevice()
int performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor)
int clearBackupData(android.content.pm.PackageInfo)
int finishBackup()
android.app.backup.RestoreSet[] getAvailableRestoreSets()
long getCurrentRestoreSet()
int startRestore(long,android.content.pm.PackageInfo[])
java.lang.String nextRestorePackage()
int getRestoreData(android.os.ParcelFileDescriptor)
void finishRestore()
java.io.File getDownloadCacheDirectory()
void deleteContents(java.io.File)
boolean readNextHeader()
java.lang.String getKey()
byte[] encode(byte[])
int getDataSize()
int readEntityData(byte[],int,int)
int v(java.lang.String,java.lang.String,java.lang.Throwable)
java.io.File[] listFiles()
void <init>(java.lang.String,java.lang.String,long)
byte[] decode(java.lang.String)
int writeEntityHeader(java.lang.String,int)
int writeEntityData(byte[],int)
com.android.internal.backup.IBackupTransport asInterface(android.os.IBinder)
com.android.internal.content.SelectionBuilder reset()
java.lang.String valueOf(java.lang.Object)
com.android.internal.content.SelectionBuilder append(java.lang.String,java.lang.Object[])
java.lang.String getSelection()
java.lang.String[] getSelectionArgs()
android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)
android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[],java.lang.String)
android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)
int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])
int update(android.database.sqlite.SQLiteDatabase,java.lang.String,android.content.ContentValues)
int delete(java.lang.String,java.lang.String,java.lang.String[])
int delete(android.database.sqlite.SQLiteDatabase,java.lang.String)
void register(android.content.Context,boolean)
boolean isPackageUpdating(java.lang.String)
void onBeginPackageChanges()
void onPackageAdded(java.lang.String,int)
void onPackageRemoved(java.lang.String,int)
void onPackageUpdateStarted(java.lang.String,int)
void onPackageUpdateFinished(java.lang.String,int)
void onPackageChanged(java.lang.String,int,java.lang.String[])
boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)
void onUidRemoved(int)
void onPackagesAvailable(java.lang.String[])
void onPackagesUnavailable(java.lang.String[])
void onPackageDisappeared(java.lang.String,int)
void onPackageAppeared(java.lang.String,int)
void onPackageModified(java.lang.String)
boolean didSomePackagesChange()
int isPackageAppearing(java.lang.String)
boolean anyPackagesAppearing()
int isPackageDisappearing(java.lang.String)
boolean anyPackagesDisappearing()
boolean isPackageModified(java.lang.String)
void onSomePackagesChanged()
void onFinishPackageChanges()
java.lang.String getSchemeSpecificPart()
java.lang.String getPackageName(android.content.Intent)
java.lang.String[] getStringArrayExtra(java.lang.String)
void setResultCode(int)
int createSecureContainer(java.lang.String,int,java.lang.String,java.lang.String,int)
java.lang.String getSecureContainerPath(java.lang.String)
java.lang.String createSdDir(long,java.lang.String,java.lang.String,int)
int mountSecureContainer(java.lang.String,java.lang.String,int)
java.lang.String mountSdDir(java.lang.String,java.lang.String,int)
int unmountSecureContainer(java.lang.String,boolean)
boolean unMountSdDir(java.lang.String)
int renameSecureContainer(java.lang.String,java.lang.String)
boolean renameSdDir(java.lang.String,java.lang.String)
java.lang.String getSdDir(java.lang.String)
int finalizeSecureContainer(java.lang.String)
boolean finalizeSdDir(java.lang.String)
int destroySecureContainer(java.lang.String,boolean)
boolean destroySdDir(java.lang.String)
java.lang.String[] getSecureContainerList()
boolean isSecureContainerMounted(java.lang.String)
boolean isContainerMounted(java.lang.String)
java.util.Enumeration entries()
boolean hasMoreElements()
java.lang.Object nextElement()
boolean isFilenameSafe(java.io.File)
android.util.Pair create(java.lang.Object,java.lang.Object)
int listPackageSharedLibsForAbiLI(java.util.zip.ZipFile,java.lang.String,java.util.List)
int listPackageGdbServerLI(java.util.zip.ZipFile,java.lang.String,java.util.List)
int listPackageNativeBinariesLI(java.util.zip.ZipFile,java.util.List)
void copyNativeBinaryLI(java.util.zip.ZipFile,java.util.zip.ZipEntry,java.io.File,java.io.File)
int copyNativeBinariesLI(java.io.File,java.io.File)
java.io.InputStream getInputStream(java.util.zip.ZipEntry)
java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)
boolean copyToFile(java.io.InputStream,java.io.File)
long getTime()
boolean setLastModified(long)
boolean removeNativeBinariesFromDirLI(java.io.File)
boolean removeNativeBinariesLI(java.lang.String)
void execSQL(java.lang.String)
long insert(java.lang.String,java.lang.String,android.content.ContentValues)
void createDatabase(android.database.sqlite.SQLiteDatabase)
long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])
void onDatabaseOpened(android.database.sqlite.SQLiteDatabase)
android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)
android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)
long replace(java.lang.String,java.lang.String,android.content.ContentValues)
long insert(android.database.sqlite.SQLiteDatabase,android.content.ContentValues)
int delete(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])
int update(android.database.sqlite.SQLiteDatabase,android.content.ContentValues,java.lang.String,java.lang.String[])
java.lang.String toString(long)
int update(android.database.sqlite.SQLiteDatabase,long,java.lang.Object)
void execSQL(java.lang.String,java.lang.Object[])
void onAccountsChanged(android.database.sqlite.SQLiteDatabase,android.accounts.Account[])
javax.microedition.khronos.egl.EGL getEGL()
android.annotation.SdkConstant$SdkConstantType[] values()
android.annotation.SdkConstant$SdkConstantType valueOf(java.lang.String)
void <init>(android.hardware.SensorManager$ListenerDelegate,android.os.Looper,android.hardware.SensorManager)
void onAccuracyChanged(android.hardware.Sensor,int)
boolean get(int)
void onSensorChanged(android.hardware.SensorEvent)
void returnToPool(android.hardware.SensorEvent)
void nativeClassInit()
android.view.IWindowManager asInterface(android.os.IBinder)
void <init>(android.hardware.SensorManager)
int watchRotation(android.view.IRotationWatcher)
int sensors_module_init()
int sensors_module_get_next_sensor(android.hardware.Sensor,int)
int getLegacySensorType(int)
void setLegacyType(int)
int getSensors()
java.util.List getSensorList(int)
android.hardware.Sensor getDefaultSensor(int)
boolean registerListener(android.hardware.SensorListener,int,int)
boolean registerListener(android.hardware.SensorListener,int)
boolean registerLegacyListener(int,int,android.hardware.SensorListener,int,int)
void <init>(android.hardware.SensorManager,android.hardware.SensorListener)
void registerSensor(int)
boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)
void unregisterLegacyListener(int,int,android.hardware.SensorListener,int)
void unregisterListener(android.hardware.SensorListener,int)
boolean unregisterSensor(int)
void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)
java.lang.Object getListener()
void unregisterListener(android.hardware.SensorListener)
void unregisterListener(java.lang.Object,android.hardware.Sensor)
void unregisterListener(java.lang.Object)
void unregisterListener(android.hardware.SensorEventListener)
boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)
boolean hasSensor(android.hardware.Sensor)
boolean sensors_enable_sensor(int,java.lang.String,int,int)
boolean enableSensorLocked(android.hardware.Sensor,int)
boolean disableSensorLocked(android.hardware.Sensor)
void <init>(android.hardware.SensorManager,android.hardware.SensorEventListener,android.hardware.Sensor,android.os.Handler)
boolean startLocked()
void addSensor(android.hardware.Sensor)
int removeSensor(android.hardware.Sensor)
java.util.List getSensors()
boolean getRotationMatrix(float[],float[],float[],float[])
float getInclination(float[])
boolean remapCoordinateSystemImpl(float[],int,int,float[])
boolean remapCoordinateSystem(float[],int,int,float[])
double asin(double)
float[] getOrientation(float[],float[])
double pow(double,double)
float getAltitude(float,float)
void onRotationChanged(int)
int getRotation()
void getAngleChange(float[],float[],float[])
void getRotationMatrixFromVector(float[],float[])
void getQuaternionFromVector(float[],float[])
int access$002(int)
void <init>(android.content.Context,android.hardware.usb.IUsbManager)
android.hardware.usb.UsbAccessory getCurrentAccessory()
android.hardware.usb.UsbAccessory[] getAccessoryList()
android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)
boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)
boolean hasPermission(android.hardware.usb.UsbAccessory)
java.lang.String getPackageName()
void requestAccessoryPermission(android.hardware.usb.UsbAccessory,java.lang.String,android.app.PendingIntent)
void requestPermission(android.hardware.usb.UsbAccessory,android.app.PendingIntent)
java.io.File getFunctionEnableFile(java.lang.String)
boolean isFunctionSupported(java.lang.String)
boolean isFunctionEnabled(java.lang.String)
boolean setFunctionEnabled(java.lang.String,boolean)
void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
java.lang.String getManufacturer()
java.lang.String getModel()
java.lang.String getDescription()
java.lang.String getVersion()
java.lang.String getSerial()
boolean compare(java.lang.String,java.lang.String)
void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String)
void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)
boolean hasDefaults(java.lang.String)
void clearDefaults(java.lang.String)
android.hardware.usb.IUsbManager asInterface(android.os.IBinder)
android.hardware.usb.UsbAccessory createFromParcel(android.os.Parcel)
android.hardware.usb.UsbAccessory[] newArray(int)
void <init>(android.hardware.Camera)
void dump()
java.lang.StringBuilder deleteCharAt(int)
java.lang.String flatten()
java.lang.String nextToken()
void unflatten(java.lang.String)
void remove(java.lang.String)
void set(java.lang.String,int)
void setPreviewSize(int,int)
android.hardware.Camera$Size strToSize(java.lang.String)
android.hardware.Camera$Size getPreviewSize()
java.util.ArrayList splitSize(java.lang.String)
java.util.List getSupportedPreviewSizes()
void setJpegThumbnailSize(int,int)
void <init>(android.hardware.Camera,int,int)
android.hardware.Camera$Size getJpegThumbnailSize()
java.util.List getSupportedJpegThumbnailSizes()
void setJpegThumbnailQuality(int)
int getJpegThumbnailQuality()
void setJpegQuality(int)
int getJpegQuality()
void setPreviewFrameRate(int)
int getPreviewFrameRate()
java.util.ArrayList splitInt(java.lang.String)
java.util.List getSupportedPreviewFrameRates()
void setPreviewFpsRange(int,int)
void splitInt(java.lang.String,int[])
void getPreviewFpsRange(int[])
java.util.ArrayList splitRange(java.lang.String)
java.util.List getSupportedPreviewFpsRange()
java.lang.String cameraFormatForPixelFormat(int)
void setPreviewFormat(int)
int pixelFormatForCameraFormat(java.lang.String)
int getPreviewFormat()
java.util.ArrayList split(java.lang.String)
java.util.List getSupportedPreviewFormats()
void setPictureSize(int,int)
android.hardware.Camera$Size getPictureSize()
java.util.List getSupportedPictureSizes()
void setPictureFormat(int)
int getPictureFormat()
java.util.List getSupportedPictureFormats()
void setRotation(int)
java.lang.String toString(double)
void setGpsLatitude(double)
void setGpsLongitude(double)
void setGpsAltitude(double)
void setGpsTimestamp(long)
void setGpsProcessingMethod(java.lang.String)
void removeGpsData()
java.lang.String getWhiteBalance()
void setWhiteBalance(java.lang.String)
java.util.List getSupportedWhiteBalance()
java.lang.String getColorEffect()
void setColorEffect(java.lang.String)
java.util.List getSupportedColorEffects()
java.lang.String getAntibanding()
void setAntibanding(java.lang.String)
java.util.List getSupportedAntibanding()
java.lang.String getSceneMode()
void setSceneMode(java.lang.String)
java.util.List getSupportedSceneModes()
java.lang.String getFlashMode()
void setFlashMode(java.lang.String)
java.util.List getSupportedFlashModes()
java.lang.String getFocusMode()
void setFocusMode(java.lang.String)
java.util.List getSupportedFocusModes()
float parseFloat(java.lang.String)
float getFocalLength()
float getHorizontalViewAngle()
float getVerticalViewAngle()
int getExposureCompensation()
void setExposureCompensation(int)
int getMaxExposureCompensation()
int getMinExposureCompensation()
float getExposureCompensationStep()
int getZoom()
void setZoom(int)
boolean isZoomSupported()
int getMaxZoom()
java.util.List getZoomRatios()
boolean isSmoothZoomSupported()
void splitFloat(java.lang.String,float[])
void getFocusDistances(float[])
void <init>(android.hardware.Camera,android.hardware.Camera$1)
double cos(double)
double sin(double)
void <init>(int,float)
void <init>(android.hardware.SensorManager$SensorThread)
int sensors_create_queue()
boolean open()
int sensors_data_poll(int,float[],int[],long[])
void sensors_destroy_queue(int)
void onSensorChangedLocked(android.hardware.Sensor,float[],long[],int)
android.hardware.SensorEvent createSensorEvent()
android.hardware.SensorEvent getFromPool()
android.os.Message obtain()
float max(float,float)
float min(float,float)
void computeGeocentricCoordinates(float,float,float)
double toRadians(double)
void <init>(float,float,float,long)
float getZ()
float getDeclination()
float getHorizontalStrength()
float getInclination()
float getFieldStrength()
double atan(double)
float[][] computeSchmidtQuasiNormFactors(int)
float filter(long,float)
void <init>(android.hardware.Camera,android.hardware.Camera,android.os.Looper)
android.hardware.Camera$ShutterCallback access$000(android.hardware.Camera)
void onShutter()
android.hardware.Camera$PictureCallback access$100(android.hardware.Camera)
void onPictureTaken(byte[],android.hardware.Camera)
android.hardware.Camera$PictureCallback access$200(android.hardware.Camera)
android.hardware.Camera$PreviewCallback access$300(android.hardware.Camera)
boolean access$400(android.hardware.Camera)
android.hardware.Camera$PreviewCallback access$302(android.hardware.Camera,android.hardware.Camera$PreviewCallback)
boolean access$500(android.hardware.Camera)
void access$600(android.hardware.Camera,boolean,boolean)
void onPreviewFrame(byte[],android.hardware.Camera)
android.hardware.Camera$PictureCallback access$700(android.hardware.Camera)
android.hardware.Camera$AutoFocusCallback access$800(android.hardware.Camera)
void onAutoFocus(boolean,android.hardware.Camera)
android.hardware.Camera$OnZoomChangeListener access$900(android.hardware.Camera)
void onZoomChange(int,boolean,android.hardware.Camera)
android.hardware.Camera$ErrorCallback access$1000(android.hardware.Camera)
void onError(int,android.hardware.Camera)
android.hardware.Camera open(int)
int getNumberOfCameras()
void getCameraInfo(int,android.hardware.Camera$CameraInfo)
android.hardware.Camera open()
void native_setup(java.lang.Object,int)
void native_release()
void setPreviewDisplay(android.view.Surface)
void setPreviewDisplay(android.view.SurfaceHolder)
void setHasPreviewCallback(boolean,boolean)
void setPreviewCallback(android.hardware.Camera$PreviewCallback)
void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)
void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)
void postEventFromNative(java.lang.Object,int,int,int,java.lang.Object)
void native_autoFocus()
void autoFocus(android.hardware.Camera$AutoFocusCallback)
void native_cancelAutoFocus()
void cancelAutoFocus()
void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)
void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)
void native_takePicture()
void setZoomChangeListener(android.hardware.Camera$OnZoomChangeListener)
void setErrorCallback(android.hardware.Camera$ErrorCallback)
void native_setParameters(java.lang.String)
void setParameters(android.hardware.Camera$Parameters)
java.lang.String native_getParameters()
android.hardware.Camera$Parameters getParameters()
int getLegacyType()
void onAccuracyChanged(int,int)
void mapSensorDataToWindow(int,float[],int)
void onSensorChanged(int,float[])
java.lang.String getVendor()
int getVersion()
float getMaximumRange()
float getResolution()
float getPower()
int getMinDelay()
void setRange(float,float)
void <init>(android.view.ViewDebug$ViewOperation,long[],java.util.concurrent.CountDownLatch)
java.lang.Object[] pre()
long threadCpuTimeNanos()
void run(java.lang.Object[])
void post(java.lang.Object[])
void countDown()
long getViewInstanceCount()
long getInstanceCount()
long getViewRootInstanceCount()
void <init>(android.view.ViewDebug$1)
void trace(android.view.View,android.view.ViewDebug$RecyclerTraceType,int[])
void startRecyclerTracing(java.lang.String,android.view.View)
void stopRecyclerTracing()
void newLine()
void trace(android.view.View,android.view.ViewDebug$HierarchyTraceType)
void startHierarchyTracing(java.lang.String,android.view.View)
void stopHierarchyTracing()
void trace(android.view.View,android.view.MotionEvent,android.view.ViewDebug$MotionEventTraceType)
void startMotionEventTracing(java.lang.String,android.view.View)
void stopMotionEventTracing()
android.view.View getRootView()
void dump(android.view.View,java.io.OutputStream)
void captureLayers(android.view.View,java.io.DataOutputStream)
void capture(android.view.View,java.io.OutputStream,java.lang.String)
void invalidate(android.view.View,java.lang.String)
void requestLayout(android.view.View,java.lang.String)
void profile(android.view.View,java.io.OutputStream,java.lang.String)
void dispatchCommand(android.view.View,java.lang.String,java.lang.String,java.io.OutputStream)
android.view.View findView(android.view.ViewGroup,java.lang.String,int)
int getIdentifier(java.lang.String,java.lang.String,java.lang.String)
android.view.View findView(android.view.View,java.lang.String)
void <init>(android.view.View)
void <init>(java.io.Writer,int)
void profileViewAndChildren(android.view.View,java.io.BufferedWriter)
void profileViewAndChildren(android.view.View,java.io.BufferedWriter,boolean)
long profileViewOperation(android.view.View,android.view.ViewDebug$ViewOperation)
boolean willNotDraw()
boolean await(long,java.util.concurrent.TimeUnit)
void getDisplayFrame(android.view.IWindow,android.graphics.Rect)
void captureViewLayer(android.view.View,java.io.DataOutputStream,boolean)
java.lang.Object resolveId(android.content.Context,int)
void writeUTF(java.lang.String)
void getLocationInWindow(int[])
android.graphics.Bitmap performViewCapture(android.view.View,boolean)
boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)
android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)
void <init>(java.io.OutputStream,int)
void <init>(android.graphics.Bitmap[],android.view.View,boolean,java.util.concurrent.CountDownLatch)
void <init>(java.io.OutputStream,java.lang.String)
void dumpViewHierarchyWithProperties(android.content.Context,android.view.ViewGroup,java.io.BufferedWriter,int)
boolean isRequestedView(android.view.View,java.lang.String,int)
boolean dumpViewWithProperties(android.content.Context,android.view.View,java.io.BufferedWriter,int)
void dumpViewProperties(android.content.Context,java.lang.Object,java.io.BufferedWriter)
java.lang.reflect.Field[] getDeclaredFields()
boolean isAnnotationPresent(java.lang.Class)
void setAccessible(boolean)
java.lang.annotation.Annotation getAnnotation(java.lang.Class)
java.lang.reflect.Field[] getExportedPropertyFields(java.lang.Class)
java.lang.reflect.Method[] getDeclaredMethods()
java.lang.Class[] getParameterTypes()
java.lang.Class getReturnType()
java.lang.reflect.Method[] getExportedPropertyMethods(java.lang.Class)
void dumpViewProperties(android.content.Context,java.lang.Object,java.io.BufferedWriter,java.lang.String)
void exportFields(android.content.Context,java.lang.Object,java.io.BufferedWriter,java.lang.Class,java.lang.String)
void exportMethods(android.content.Context,java.lang.Object,java.io.BufferedWriter,java.lang.Class,java.lang.String)
java.lang.Class getSuperclass()
java.lang.String category()
boolean resolveId()
android.view.ViewDebug$FlagToString[] flagMapping()
void exportUnrolledFlags(java.io.BufferedWriter,android.view.ViewDebug$FlagToString[],int,java.lang.String)
android.view.ViewDebug$IntToString[] mapping()
int 'from'()
java.lang.String 'to'()
void exportUnrolledArray(android.content.Context,java.io.BufferedWriter,android.view.ViewDebug$ExportedProperty,int[],java.lang.String,java.lang.String)
boolean isPrimitive()
boolean deepExport()
java.lang.String prefix()
void writeEntry(java.io.BufferedWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
java.lang.Class getType()
int getInt(java.lang.Object)
void writeValue(java.io.BufferedWriter,java.lang.Object)
boolean outputIf()
int mask()
int equals()
android.view.ViewDebug$IntToString[] indexMapping()
java.lang.String getResourceTypeName(int)
java.lang.String getResourceEntryName(int)
java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)
boolean dumpView(java.lang.Object,java.io.BufferedWriter,int)
void dumpViewHierarchy(android.view.ViewGroup,java.io.BufferedWriter,int)
java.lang.reflect.Field[] getFields()
java.lang.reflect.Field[] capturedViewGetPropertyFields(java.lang.Class)
java.lang.reflect.Method[] getMethods()
java.lang.reflect.Method[] capturedViewGetPropertyMethods(java.lang.Class)
boolean retrieveReturn()
java.lang.String capturedViewExportMethods(java.lang.Object,java.lang.Class,java.lang.String)
java.lang.String capturedViewExportFields(java.lang.Object,java.lang.Class,java.lang.String)
void dumpCapturedView(java.lang.String,java.lang.Object)
boolean onSingleTapUp(android.view.MotionEvent)
void onLongPress(android.view.MotionEvent)
boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)
boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)
void onShowPress(android.view.MotionEvent)
boolean onDown(android.view.MotionEvent)
boolean onDoubleTap(android.view.MotionEvent)
boolean onDoubleTapEvent(android.view.MotionEvent)
boolean onSingleTapConfirmed(android.view.MotionEvent)
boolean startViewServer(int)
boolean stopViewServer()
boolean isViewServerRunning()
android.view.IWindowSession openSession(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext)
boolean inputMethodClientHasFocus(com.android.internal.view.IInputMethodClient)
boolean injectKeyEvent(android.view.KeyEvent,boolean)
boolean injectPointerEvent(android.view.MotionEvent,boolean)
boolean injectTrackballEvent(android.view.MotionEvent,boolean)
boolean injectInputEventNoWait(android.view.InputEvent)
void pauseKeyDispatching(android.os.IBinder)
void resumeKeyDispatching(android.os.IBinder)
void setEventDispatching(boolean)
void addWindowToken(android.os.IBinder,int)
void removeWindowToken(android.os.IBinder)
android.view.IApplicationToken asInterface(android.os.IBinder)
void addAppToken(int,android.view.IApplicationToken,int,int,boolean)
void setAppGroupId(android.os.IBinder,int)
void setAppOrientation(android.view.IApplicationToken,int)
int getAppOrientation(android.view.IApplicationToken)
void setFocusedApp(android.os.IBinder,boolean)
void prepareAppTransition(int)
int getPendingAppTransition()
void overridePendingAppTransition(java.lang.String,int,int)
void executeAppTransition()
void setAppStartingWindow(android.os.IBinder,java.lang.String,int,java.lang.CharSequence,int,int,android.os.IBinder,boolean)
void setAppWillBeHidden(android.os.IBinder)
void setAppVisibility(android.os.IBinder,boolean)
void startAppFreezingScreen(android.os.IBinder,int)
void stopAppFreezingScreen(android.os.IBinder,boolean)
void removeAppToken(android.os.IBinder)
void moveAppToken(int,android.os.IBinder)
java.util.ArrayList createBinderArrayList()
void moveAppTokensToTop(java.util.List)
void moveAppTokensToBottom(java.util.List)
android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)
void setNewConfiguration(android.content.res.Configuration)
void disableKeyguard(android.os.IBinder,java.lang.String)
void reenableKeyguard(android.os.IBinder)
android.view.IOnKeyguardExitResult asInterface(android.os.IBinder)
void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)
boolean inKeyguardRestrictedInputMode()
float getAnimationScale(int)
void writeFloat(float)
float[] getAnimationScales()
void writeFloatArray(float[])
float readFloat()
void setAnimationScale(int,float)
float[] createFloatArray()
void setAnimationScales(float[])
int getSwitchState(int)
int getSwitchStateForDevice(int,int)
int getScancodeState(int)
int getScancodeStateForDevice(int,int)
int getTrackballScancodeState(int)
int getDPadScancodeState(int)
int getKeycodeState(int)
int getKeycodeStateForDevice(int,int)
int getTrackballKeycodeState(int)
int getDPadKeycodeState(int)
android.view.InputChannel monitorInput(java.lang.String)
boolean[] createBooleanArray()
boolean hasKeys(int[],boolean[])
void writeBooleanArray(boolean[])
android.view.InputDevice getInputDevice(int)
int[] getInputDeviceIds()
void setInTouchMode(boolean)
void setRotation(int,boolean,int)
android.view.IRotationWatcher asInterface(android.os.IBinder)
void <init>(android.view.OrientationListener,android.content.Context)
void registerListener(android.view.OrientationListener)
void <init>(android.view.OrientationListener,android.content.Context,int)
void onOrientationChanged(int)
void <init>(int,android.util.DisplayMetrics)
void <init>(int,android.util.DisplayMetrics,android.view.Display$1)
void <init>(android.view.SurfaceView)
boolean sendEmptyMessage(int)
android.view.IWindowSession asInterface(android.os.IBinder)
android.view.IWindow asInterface(android.os.IBinder)
int add(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)
int addWithoutInputChannel(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)
void remove(android.view.IWindow)
int relayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,boolean,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.content.res.Configuration,android.view.Surface)
void setTransparentRegion(android.view.IWindow,android.graphics.Region)
void setInsets(android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect)
boolean getInTouchMode()
boolean performHapticFeedback(android.view.IWindow,int,boolean)
void setWallpaperPosition(android.os.IBinder,float,float,float,float)
android.os.Bundle sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle,boolean)
android.view.InputChannel createFromParcel(android.os.Parcel)
android.view.InputChannel[] newArray(int)
void initialize(android.content.Context)
int getInflatedId()
void setInflatedId(int)
int getLayoutResource()
void setLayoutResource(int)
void dispatchDraw(android.graphics.Canvas)
android.view.View inflate()
android.view.LayoutInflater 'from'(android.content.Context)
void setId(int)
int indexOfChild(android.view.View)
void removeViewInLayout(android.view.View)
void onInflate(android.view.ViewStub,android.view.View)
void setOnInflateListener(android.view.ViewStub$OnInflateListener)
void onKeyguardExitResult(boolean)
void <init>(android.view.ViewRoot$1)
void <init>(android.view.Surface,android.view.Surface$1)
void init(android.view.SurfaceSession,int,java.lang.String,int,int,int,int,int)
void <init>(android.view.SurfaceSession,int,int,int,int,int,int)
void <init>(android.view.SurfaceSession,int,java.lang.String,int,int,int,int,int)
void setScale(float,float)
void setCompatibleDisplayMetrics(android.util.DisplayMetrics,android.content.res.CompatibilityInfo$Translator)
android.graphics.Canvas lockCanvasNative(android.graphics.Rect)
void setOrientation(int,int,int)
void setOrientation(int,int)
int getIdentity()
void init(android.os.Parcel)
android.util.DisplayMetrics access$100(android.view.Surface)
android.graphics.Matrix access$200(android.view.Surface)
void <init>(android.os.Parcel,android.view.Surface$1)
void setOverScrollMode(int)
int getIndexCount()
int getIndex(int)
int getDimensionPixelOffset(int,int)
void initializeScrollbars(android.content.res.TypedArray)
void initializeFadingEdge(android.content.res.TypedArray)
void setScrollContainer(boolean)
boolean isRestricted()
void <init>(android.view.View,java.lang.String)
void recomputePadding()
void scrollTo(int,int)
void computeOpaqueFlags()
void initScrollCache()
int getScaledFadingEdgeLength()
boolean isVerticalFadingEdgeEnabled()
int getVerticalFadingEdgeLength()
void setFadingEdgeLength(int)
boolean isHorizontalFadingEdgeEnabled()
int getHorizontalFadingEdgeLength()
int getSize(boolean)
int getVerticalScrollbarWidth()
int getHorizontalScrollbarHeight()
int getScrollBarFadeDuration()
int getScrollDefaultDelay()
int getScaledScrollBarSize()
void setHorizontalTrackDrawable(android.graphics.drawable.Drawable)
void setHorizontalThumbDrawable(android.graphics.drawable.Drawable)
void setAlwaysDrawHorizontalTrack(boolean)
void setVerticalTrackDrawable(android.graphics.drawable.Drawable)
void setVerticalThumbDrawable(android.graphics.drawable.Drawable)
void setAlwaysDrawVerticalTrack(boolean)
void <init>(android.view.ViewConfiguration,android.view.View)
void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)
android.view.View$OnFocusChangeListener getOnFocusChangeListener()
boolean isClickable()
boolean isLongClickable()
void setLongClickable(boolean)
void setOnLongClickListener(android.view.View$OnLongClickListener)
void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)
void sendAccessibilityEvent(int)
boolean onLongClick(android.view.View)
boolean showContextMenu()
boolean performHapticFeedback(int)
boolean performLongClick()
boolean showContextMenuForChild(android.view.View)
void setOnKeyListener(android.view.View$OnKeyListener)
void setOnTouchListener(android.view.View$OnTouchListener)
void requestChildFocus(android.view.View,android.view.View)
void onFocusChanged(boolean,int,android.graphics.Rect)
void refreshDrawableState()
void handleFocusGainInternal(int,android.graphics.Rect)
boolean requestRectangleOnScreen(android.graphics.Rect,boolean)
boolean requestRectangleOnScreen(android.graphics.Rect)
boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)
void offset(int,int)
int getScrollX()
int getScrollY()
void clearChildFocus(android.view.View)
void clearFocus()
void clearFocusForRemoval()
void unFocus()
boolean hasFocus()
boolean isFocusable()
boolean hasFocusable()
android.view.inputmethod.InputMethodManager peekInstance()
void focusOut(android.view.View)
void onFocusLost()
void focusIn(android.view.View)
void onFocusChange(android.view.View,boolean)
void reset(java.lang.Object)
android.view.accessibility.AccessibilityManager getInstance(android.content.Context)
android.view.accessibility.AccessibilityEvent obtain(int)
void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)
void setClassName(java.lang.CharSequence)
void setPackageName(java.lang.CharSequence)
void setContentDescription(java.lang.CharSequence)
void addFocusables(java.util.ArrayList,int,int)
void setItemCount(int)
void setCurrentItemIndex(int)
boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
java.lang.CharSequence getContentDescription()
void resetPressedState()
void removeLongPressCallback()
android.view.View findFocus()
int getDrawingCacheQuality()
void setDrawingCacheQuality(int)
boolean getKeepScreenOn()
void setKeepScreenOn(boolean)
int getNextFocusLeftId()
void setNextFocusLeftId(int)
int getNextFocusRightId()
void setNextFocusRightId(int)
int getNextFocusUpId()
void setNextFocusUpId(int)
int getNextFocusDownId()
void setNextFocusDownId(int)
boolean isShown()
boolean fitSystemWindows(android.graphics.Rect)
boolean isFitsSystemWindowsFlagSet()
boolean setVisible(boolean,boolean)
void setSoundEffectsEnabled(boolean)
boolean isSoundEffectsEnabled()
void setHapticFeedbackEnabled(boolean)
boolean isHapticFeedbackEnabled()
void setWillNotCacheDrawing(boolean)
boolean willNotCacheDrawing()
void dispatchSetPressed(boolean)
boolean isSaveEnabled()
void setSaveEnabled(boolean)
boolean getFilterTouchesWhenObscured()
void setFilterTouchesWhenObscured(boolean)
boolean isFocusableInTouchMode()
android.view.View focusSearch(android.view.View,int)
android.view.View focusSearch(int)
boolean dispatchUnhandledMove(android.view.View,int)
android.view.View findViewShouldExist(android.view.View,int)
android.view.View findUserSetNextFocus(android.view.View,int)
void addFocusables(java.util.ArrayList,int)
java.util.ArrayList getFocusables(int)
boolean isInTouchMode()
void addTouchables(java.util.ArrayList)
java.util.ArrayList getTouchables()
boolean requestFocus(int)
boolean requestFocus(int,android.graphics.Rect)
boolean hasAncestorThatBlocksDescendantFocus()
boolean ensureTouchMode(boolean)
boolean requestFocusFromTouch()
int getDescendantFocusability()
void onStartTemporaryDetach()
void dispatchStartTemporaryDetach()
void removeUnsetPressCallback()
void onFinishTemporaryDetach()
void dispatchFinishTemporaryDetach()
void captureViewInfo(java.lang.String,android.view.View)
boolean onKeyPreIme(int,android.view.KeyEvent)
boolean dispatchKeyEventPreIme(android.view.KeyEvent)
boolean onKey(android.view.View,int,android.view.KeyEvent)
boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)
boolean onKeyShortcut(int,android.view.KeyEvent)
boolean dispatchKeyShortcutEvent(android.view.KeyEvent)
boolean onFilterTouchEventForSecurity(android.view.MotionEvent)
boolean onTouch(android.view.View,android.view.MotionEvent)
boolean dispatchTrackballEvent(android.view.MotionEvent)
void dispatchWindowFocusChanged(boolean)
boolean hasWindowFocus()
void onVisibilityChanged(android.view.View,int)
void dispatchVisibilityChanged(android.view.View,int)
boolean initialAwakenScrollBars()
void onDisplayHint(int)
void dispatchDisplayHint(int)
void onWindowVisibilityChanged(int)
void dispatchWindowVisibilityChanged(int)
int getWindowVisibility()
android.view.WindowManagerImpl getDefault()
android.view.Display getDefaultDisplay()
void getWindowVisibleDisplayFrame(android.graphics.Rect)
void onConfigurationChanged(android.content.res.Configuration)
void dispatchConfigurationChanged(android.content.res.Configuration)
void performCollectViewAttributes(int)
void dispatchCollectViewAttributes(int)
void needGlobalAttributesUpdate(boolean)
void postCheckForLongClick(int)
boolean onKeyLongPress(int,android.view.KeyEvent)
boolean onKeyMultiple(int,int,android.view.KeyEvent)
android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
boolean checkInputConnectionProxy(android.view.View)
android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()
void onCreateContextMenu(android.view.ContextMenu)
void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)
void <init>(android.view.View,android.view.View$1)
int getPressedStateDuration()
void removeTapCallback()
int getTapTimeout()
void setTouchDelegate(android.view.TouchDelegate)
android.view.TouchDelegate getTouchDelegate()
void focusableViewAvailable(android.view.View)
void destroyDrawingCache()
void recomputeViewAttributes(android.view.View)
void bringChildToFront(android.view.View)
void bringToFront()
void onScrollChanged(int,int,int,int)
void getDrawingRect(android.graphics.Rect)
void getFocusedRect(android.graphics.Rect)
boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)
boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)
boolean getGlobalVisibleRect(android.graphics.Rect)
boolean getLocalVisibleRect(android.graphics.Rect)
boolean awakenScrollBars()
void scrollBy(int,int)
boolean awakenScrollBars(int,boolean)
boolean awakenScrollBars(int)
boolean isHorizontalScrollBarEnabled()
boolean isVerticalScrollBarEnabled()
boolean postAtTime(java.lang.Runnable,long)
void invalidateChild(android.view.View,android.graphics.Rect)
boolean isOpaque()
int getOpacity()
boolean hasOpaqueScrollbars()
android.view.ViewRoot$RunQueue getRunQueue()
void post(java.lang.Runnable)
void postDelayed(java.lang.Runnable,long)
void postInvalidateDelayed(long)
void postInvalidateDelayed(long,int,int,int,int)
void postInvalidate(int,int,int,int)
android.view.View$AttachInfo$InvalidateInfo acquire()
void computeScroll()
void setHorizontalFadingEdgeEnabled(boolean)
void setVerticalFadingEdgeEnabled(boolean)
int computeVerticalScrollOffset()
float getTopFadingEdgeStrength()
int computeVerticalScrollExtent()
int computeVerticalScrollRange()
float getBottomFadingEdgeStrength()
int computeHorizontalScrollOffset()
float getLeftFadingEdgeStrength()
int computeHorizontalScrollExtent()
int computeHorizontalScrollRange()
float getRightFadingEdgeStrength()
void setHorizontalScrollBarEnabled(boolean)
void setVerticalScrollBarEnabled(boolean)
void setScrollbarFadingEnabled(boolean)
boolean isScrollbarFadingEnabled()
void setScrollBarStyle(int)
int getScrollBarStyle()
android.graphics.Interpolator$Result timeToValues(float[])
boolean isVerticalScrollBarHidden()
void setParameters(int,int,int,boolean)
void onDrawHorizontalScrollBar(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,int,int)
void onDrawVerticalScrollBar(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,int,int)
void onDrawScrollBars(android.graphics.Canvas)
void assignParent(android.view.ViewParent)
void requestTransparentRegion(android.view.View)
int getWindowAttachCount()
android.os.IBinder getApplicationWindowToken()
android.view.IWindowSession getWindowSession()
void merge(android.view.ViewTreeObserver)
void dispatchAttachedToWindow(android.view.View$AttachInfo,int)
void dispatchDetachedFromWindow()
void dispatchSaveInstanceState(android.util.SparseArray)
void dispatchRestoreInstanceState(android.util.SparseArray)
long getDrawingTime()
void setDuplicateParentStateEnabled(boolean)
boolean isDuplicateParentStateEnabled()
void setDrawingCacheEnabled(boolean)
boolean isDrawingCacheEnabled()
android.graphics.Bitmap getDrawingCache(boolean)
android.graphics.Bitmap getDrawingCache()
void buildDrawingCache(boolean)
void setDrawingCacheBackgroundColor(int)
int getDrawingCacheBackgroundColor()
void buildDrawingCache()
int getScaledMaximumDrawingCacheSize()
void setDensity(int)
void setHasAlpha(boolean)
void setBitmap(android.graphics.Bitmap)
void <init>(android.graphics.Bitmap)
void eraseColor(int)
int save()
void scale(float,float)
void restoreToCount(int)
android.graphics.Bitmap createSnapshot(android.graphics.Bitmap$Config,int,boolean)
boolean isInEditMode()
boolean isPaddingOffsetRequired()
int getLeftPaddingOffset()
int getRightPaddingOffset()
int getTopPaddingOffset()
int getBottomPaddingOffset()
int getSaveCount()
int getSolidColor()
int saveLayer(float,float,float,float,android.graphics.Paint,int)
void setFadeColor(int)
void setLocalMatrix(android.graphics.Matrix)
boolean postRotate(float)
java.lang.String printFlags(int)
java.lang.String printPrivateFlags(int)
boolean isLayoutRequested()
boolean setFrame(int,int,int,int)
boolean verifyDrawable(android.graphics.drawable.Drawable)
android.graphics.Rect getBounds()
void invalidateDrawable(android.graphics.drawable.Drawable)
boolean postAtTime(java.lang.Runnable,java.lang.Object,long)
void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)
void removeCallbacks(java.lang.Runnable,java.lang.Object)
void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)
void unscheduleDrawable(android.graphics.drawable.Drawable)
int[] getDrawableState()
void childDrawableStateChanged(android.view.View)
int[] onCreateDrawableState(int)
int[] mergeDrawableStates(int[],int[])
void setCallback(android.graphics.drawable.Drawable$Callback)
void set(java.lang.Object)
boolean getPadding(android.graphics.Rect)
int getMinimumHeight()
int getMinimumWidth()
void dispatchSetSelected(boolean)
android.view.ViewTreeObserver getViewTreeObserver()
void getLocationOnScreen(int[])
android.view.View findViewTraversal(int)
android.view.View findViewWithTagTraversal(java.lang.Object)
android.view.View findViewWithTag(java.lang.Object)
void setIsRootNamespace(boolean)
boolean isRootNamespace()
java.lang.Object getTag()
void setTag(java.lang.Object)
java.lang.Object getTag(int)
void setTagInternal(android.view.View,int,java.lang.Object)
void setTag(int,java.lang.Object)
void setTagInternal(int,java.lang.Object)
boolean onConsistencyCheck(int)
boolean dispatchConsistencyCheck(int)
void debug(int)
void debug()
java.lang.String debugIndent(int)
java.lang.String debug(java.lang.String)
int getBaseline()
void forceLayout()
int getSuggestedMinimumWidth()
int getDefaultSize(int,int)
int getSuggestedMinimumHeight()
void setMinimumHeight(int)
void setMinimumWidth(int)
android.view.animation.Animation getAnimation()
void setStartTime(long)
void setAnimation(android.view.animation.Animation)
void onAnimationStart()
void onAnimationEnd()
boolean onSetAlpha(int)
boolean op(int,int,int,int,android.graphics.Region$Op)
void applyDrawableToTransparentRegion(android.graphics.drawable.Drawable,android.graphics.Region)
boolean gatherTransparentRegion(android.graphics.Region)
boolean performHapticFeedback(int,int)
boolean performHapticFeedback(int,boolean)
void onCloseSystemDialogs(java.lang.String)
android.graphics.Region getTransparentRegion()
void translate(int,int)
boolean op(android.graphics.Region,android.graphics.Region$Op)
boolean op(android.graphics.Rect,android.graphics.Region$Op)
void rememberWindowAttachCount()
int[] stateSetUnion(int[],int[])
android.view.View inflate(android.content.Context,int,android.view.ViewGroup)
void onOverScrolled(int,int,boolean,boolean)
boolean overScrollBy(int,int,int,int,int,int,int,int,boolean)
int getOverScrollMode()
boolean access$302(android.view.View,boolean)
void access$400(android.view.View,int)
android.content.Context access$000(android.view.Window)
android.view.Display getDefaultDisplay(android.view.Display)
void <init>(android.view.Window,android.view.WindowManager)
android.view.View peekDecorView()
java.lang.String access$100(android.view.Window)
android.view.Window access$200(android.view.Window)
android.os.IBinder access$300(android.view.Window)
void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)
void removeViewImmediate(android.view.View)
android.content.res.TypedArray obtainStyledAttributes(int[])
android.content.res.TypedArray getWindowStyle()
void setContainer(android.view.Window)
android.view.Window getContainer()
boolean hasChildren()
void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)
android.view.WindowManager getWindowManager()
void setCallback(android.view.Window$Callback)
android.view.Window$Callback getCallback()
void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)
void setLayout(int,int)
void setWindowAnimations(int)
void setSoftInputMode(int)
void clearFlags(int)
int copyFrom(android.view.WindowManager$LayoutParams)
void setAttributes(android.view.WindowManager$LayoutParams)
int getForcedWindowFlags()
boolean hasSoftInputMode()
void onActive()
void makeActive()
void setBackgroundDrawableResource(int)
int getFeatures()
int getLocalFeatures()
void setDefaultWindowFormat(int)
android.view.ViewDebug$RecyclerTraceType[] values()
android.view.ViewDebug$RecyclerTraceType valueOf(java.lang.String)
float a(float,float)
float o(float,float)
float complexToFloat(int)
float getFloat()
android.view.animation.Animation$Description parseValue(android.util.TypedValue)
android.content.res.XmlResourceParser getAnimation(int)
android.view.animation.Animation createAnimationFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser)
android.view.animation.Animation loadAnimation(android.content.Context,int)
android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)
android.view.animation.Animation createAnimationFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser,android.view.animation.AnimationSet,android.util.AttributeSet)
void addAnimation(android.view.animation.Animation)
android.view.animation.LayoutAnimationController createLayoutAnimationFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser)
android.view.animation.LayoutAnimationController loadLayoutAnimation(android.content.Context,int)
android.view.animation.LayoutAnimationController createLayoutAnimationFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)
android.view.animation.Animation makeInAnimation(android.content.Context,boolean)
android.view.animation.Animation makeOutAnimation(android.content.Context,boolean)
android.view.animation.Animation makeInChildBottomAnimation(android.content.Context)
android.view.animation.Interpolator createInterpolatorFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser)
android.view.animation.Interpolator loadInterpolator(android.content.Context,int)
android.util.TypedValue peekValue(int)
void <init>(int,float,int,float,int,float,int,float)
android.graphics.Matrix getMatrix()
void applyTransformation(float,android.view.animation.Transformation)
void initialize(int,int,int,int)
float resolveSize(int,float,int,int)
void <init>(float,float,float,float,float,float)
void <init>(float,float,float,float,int,float,int,float)
void setScale(float,float,float,float)
void ensureInterpolator()
void setStartOffset(long)
void setFillEnabled(boolean)
void setFillBefore(boolean)
void setInterpolator(android.content.Context,int)
void setRepeatCount(int)
void setRepeatMode(int)
void setZAdjustment(int)
void setDetachWallpaper(boolean)
android.view.animation.Animation clone()
void setEmpty()
boolean isInitialized()
void restrictDuration(long)
void scaleCurrentDuration(float)
void startNow()
boolean isFillEnabled()
android.view.animation.Interpolator getInterpolator()
long getStartTime()
long getDuration()
long getStartOffset()
int getRepeatMode()
boolean getFillBefore()
boolean getFillAfter()
int getZAdjustment()
boolean getDetachWallpaper()
boolean willChangeTransformationMatrix()
boolean willChangeBounds()
long computeDurationHint()
boolean getTransformation(long,android.view.animation.Transformation)
boolean hasStarted()
boolean hasEnded()
void set(float,float,float,float)
boolean mapRect(android.graphics.RectF)
void inset(float,float)
void set(android.graphics.RectF)
void union(android.graphics.RectF)
void set(android.view.animation.Transformation)
void getInvalidateRegion(int,int,int,int,android.graphics.RectF,android.view.animation.Transformation)
void initializeInvalidateRegion(int,int,int,int)
void setAnimation(android.content.Context,int)
void <init>(android.view.animation.Animation,float)
void <init>(android.view.animation.Animation)
void setOrder(int)
float getDelay()
void setDelay(float)
boolean willOverlap()
long getDelayForView(android.view.View)
long max(long,long)
android.view.animation.Animation getAnimationForView(android.view.View)
boolean isDone()
int getTransformedIndex(android.view.animation.LayoutAnimationController$AnimationParameters)
float nextFloat()
void setAlpha(float)
int getTransformationType()
void setTransformationType(int)
float getAlpha()
void set(android.graphics.Matrix)
boolean preConcat(android.graphics.Matrix)
void compose(android.view.animation.Transformation)
void toShortString(java.lang.StringBuilder)
java.lang.String toShortString()
void printShortString(java.io.PrintWriter)
void setFlag(int,boolean)
android.view.animation.AnimationSet clone()
long min(long,long)
void restoreChildrenStartOffset()
java.util.List getAnimations()
void <init>(android.view.animation.Animation,float,float)
float getColumnDelay()
void setColumnDelay(float)
float getRowDelay()
void setRowDelay(float)
int getDirection()
void setDirection(int)
int getDirectionPriority()
void setDirectionPriority(int)
int getTransformedColumnIndex(android.view.animation.GridLayoutAnimationController$AnimationParameters)
int getTransformedRowIndex(android.view.animation.GridLayoutAnimationController$AnimationParameters)
void <init>(float,float,int,float,int,float)
void setRotate(float)
void setRotate(float,float,float)
float bounce(float)
void <init>(android.view.OrientationEventListener)
android.view.OrientationListener access$000(android.view.OrientationEventListener)
int access$100(android.view.OrientationEventListener)
int access$102(android.view.OrientationEventListener,int)
android.view.View$AttachInfo$InvalidateInfo newInstance()
void onAcquired(android.view.View$AttachInfo$InvalidateInfo)
void onReleased(android.view.View$AttachInfo$InvalidateInfo)
void onReleased(android.util.Poolable)
void onAcquired(android.util.Poolable)
android.util.Poolable newInstance()
android.view.KeyEvent createFromParcelBody(android.os.Parcel)
android.view.MotionEvent createFromParcelBody(android.os.Parcel)
android.view.InputEvent createFromParcel(android.os.Parcel)
android.view.InputEvent[] newArray(int)
void <init>(android.view.AbsSavedState$1)
void <init>(android.view.ViewGroup)
void access$000(android.view.ViewGroup)
void setNextPoolable(android.view.View$AttachInfo$InvalidateInfo)
android.view.View$AttachInfo$InvalidateInfo getNextPoolable()
android.util.Poolable acquire()
void release(android.util.Poolable)
java.lang.Object getNextPoolable()
void setNextPoolable(java.lang.Object)
android.util.Pool finitePool(android.util.PoolableManager,int)
android.util.Pool synchronizedPool(android.util.Pool)
void setBaseAttributes(android.content.res.TypedArray,int,int)
void <init>(android.view.ViewGroup$MarginLayoutParams)
void <init>(android.view.ViewGroup$LayoutParams)
void setMargins(int,int,int,int)
void enable()
void disable()
void <init>(android.view.inputmethod.InputConnection,boolean)
void setTarget(android.view.inputmethod.InputConnection)
void dump(android.util.Printer,java.lang.String)
void writeBundle(android.os.Bundle)
android.view.inputmethod.InputMethodInfo createFromParcel(android.os.Parcel)
android.view.inputmethod.InputMethodInfo[] newArray(int)
void <init>(android.view.inputmethod.InputMethodManager)
void <init>(android.view.inputmethod.InputMethodManager,boolean)
void <init>(android.view.inputmethod.InputMethodManager,android.os.Looper)
void <init>(android.view.inputmethod.InputMethodManager,android.os.Looper,android.view.inputmethod.InputConnection)
void <init>(com.android.internal.view.IInputMethodManager,android.os.Looper)
android.view.inputmethod.InputMethodManager getInstance(android.os.Looper)
android.view.inputmethod.InputMethodManager getInstance(android.content.Context)
com.android.internal.view.IInputMethodClient getClient()
com.android.internal.view.IInputContext getInputContext()
void showStatusIcon(android.os.IBinder,java.lang.String,int)
void hideStatusIcon(android.os.IBinder)
void setFullscreenMode(boolean)
boolean isFullscreenMode()
void checkFocus()
boolean isActive(android.view.View)
boolean isAcceptingText()
void clearConnectionLocked()
void clearBindingLocked()
void finishInputLocked()
void reportFinishInputConnection(android.view.inputmethod.InputConnection)
void displayCompletions(android.view.View,android.view.inputmethod.CompletionInfo[])
void updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)
boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)
boolean showSoftInput(android.view.View,int)
void showSoftInputUnchecked(int,android.os.ResultReceiver)
boolean hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)
void toggleSoftInputFromWindow(android.os.IBinder,int,int)
void startInputInner()
void restartInput(android.view.View)
void windowDismissed(android.os.IBinder)
void focusInLocked(android.view.View)
void scheduleCheckFocusLocked(android.view.View)
void closeCurrentInput()
void onWindowFocus(android.view.View,android.view.View,int,boolean,int)
void startGettingWindowFocus(android.view.View)
void updateSelection(android.view.View,int,int,int,int)
boolean isWatchingCursor(android.view.View)
void set(android.graphics.Rect)
void updateCursor(android.view.View,int,int,int,int)
void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)
void hideSoftInputFromInputMethod(android.os.IBinder,int)
void showSoftInputFromInputMethod(android.os.IBinder,int)
void showInputMethodPicker()
void dispatchKeyEvent(android.content.Context,int,android.view.KeyEvent,com.android.internal.view.IInputMethodCallback)
void dispatchTrackballEvent(android.content.Context,int,android.view.MotionEvent,com.android.internal.view.IInputMethodCallback)
void <init>(java.io.PrintWriter)
void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
android.os.Bundle readBundle()
android.view.inputmethod.EditorInfo createFromParcel(android.os.Parcel)
android.view.inputmethod.EditorInfo[] newArray(int)
void <init>(long,int,java.lang.CharSequence)
void <init>(long,int,java.lang.CharSequence,java.lang.CharSequence)
long getId()
java.lang.CharSequence getLabel()
android.view.inputmethod.ExtractedText createFromParcel(android.os.Parcel)
android.view.inputmethod.ExtractedText[] newArray(int)
android.view.inputmethod.ExtractedTextRequest createFromParcel(android.os.Parcel)
android.view.inputmethod.ExtractedTextRequest[] newArray(int)
void <init>(android.view.inputmethod.InputConnection,android.os.IBinder,int,int)
android.os.IBinder getConnectionToken()
void <init>(android.view.inputmethod.InputConnection,android.view.inputmethod.InputBinding)
android.view.inputmethod.InputConnection getConnection()
java.lang.String flattenToShortString()
android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)
android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)
android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])
void <init>(android.content.Context,android.content.pm.ResolveInfo)
void <init>(java.lang.String,java.lang.String,java.lang.CharSequence,java.lang.String)
java.lang.String getServiceName()
android.content.pm.ServiceInfo getServiceInfo()
java.lang.String getSettingsActivity()
int getIsDefaultResourceId()
android.view.inputmethod.InputBinding createFromParcel(android.os.Parcel)
android.view.inputmethod.InputBinding[] newArray(int)
int getSpanFlags(java.lang.Object)
void removeComposingSpans(android.text.Spannable)
void setComposingSpans(android.text.Spannable,int,int)
void setComposingSpans(android.text.Spannable)
int getComposingSpanStart(android.text.Spannable)
int getComposingSpanEnd(android.text.Spannable)
android.text.Editable$Factory getInstance()
android.text.Editable newEditable(java.lang.CharSequence)
void setSelection(android.text.Spannable,int)
void clearMetaKeyState(android.text.Editable,int)
void replaceText(java.lang.CharSequence,int,boolean)
void sendCurrentText()
int getSelectionStart(java.lang.CharSequence)
int getSelectionEnd(java.lang.CharSequence)
android.text.Editable delete(int,int)
int getCapsMode(java.lang.CharSequence,int,int)
java.lang.String substring(java.lang.CharSequence,int,int)
void ensureDefaultComposingSpans()
int getMetaState(java.lang.CharSequence,int)
void extendSelection(android.text.Spannable,int)
void setSelection(android.text.Spannable,int,int)
void <init>(long,java.lang.String,int,int)
android.content.res.Resources$Theme getTheme()
android.view.inputmethod.CompletionInfo createFromParcel(android.os.Parcel)
android.view.inputmethod.CompletionInfo[] newArray(int)
int getLayoutDimension(int,java.lang.String)
java.lang.String sizeToString(int)
boolean onScale(android.view.ScaleGestureDetector)
boolean onScaleBegin(android.view.ScaleGestureDetector)
void onScaleEnd(android.view.ScaleGestureDetector)
java.lang.Void[] pre()
void run(java.lang.Void[])
void post(java.lang.Void[])
void <init>(android.view.ViewRoot)
void setSurfaceFormat(int)
void setSurfaceType(int)
boolean isCreating()
void setSurfaceKeepScreenOn(boolean)
void nativeDispose(boolean)
android.view.InputChannel[] nativeOpenInputChannelPair(java.lang.String)
android.view.InputChannel[] openInputChannelPair(java.lang.String)
java.lang.String nativeGetName()
void nativeTransferTo(android.view.InputChannel)
void transferToBinderOutParameter(android.view.InputChannel)
void nativeReadFromParcel(android.os.Parcel)
void nativeWriteToParcel(android.os.Parcel)
android.view.ViewDebug$MotionEventTraceType[] values()
android.view.ViewDebug$MotionEventTraceType valueOf(java.lang.String)
void <init>(android.view.Surface)
void setMatrix(android.graphics.Matrix)
void <init>(android.graphics.Matrix)
void getMatrix(android.graphics.Matrix)
void <init>(android.view.InputChannel)
android.view.InputChannel getInputChannel()
void nativeRegisterInputChannel(android.view.InputChannel,android.view.InputHandler,android.os.MessageQueue)
void registerInputChannel(android.view.InputChannel,android.view.InputHandler,android.os.MessageQueue)
void nativeUnregisterInputChannel(android.view.InputChannel)
void unregisterInputChannel(android.view.InputChannel)
android.view.InputQueue$FinishedCallback obtain(long)
void dispatchKeyEvent(android.view.InputHandler,android.view.KeyEvent,long)
void dispatchMotionEvent(android.view.InputHandler,android.view.MotionEvent,long)
java.lang.Object access$000()
void nativeFinished(long)
void access$100(long)
android.view.ViewDebug$HierarchyTraceType[] values()
android.view.ViewDebug$HierarchyTraceType valueOf(java.lang.String)
void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener,android.os.Handler)
void <init>(android.view.GestureDetector$OnGestureListener,android.os.Handler)
void <init>(android.view.GestureDetector$OnGestureListener)
void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener)
android.content.pm.ApplicationInfo getApplicationInfo()
void <init>(android.content.Context,android.view.GestureDetector$OnGestureListener,android.os.Handler,boolean)
void <init>(android.view.GestureDetector,android.os.Handler)
void <init>(android.view.GestureDetector)
void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener)
void init(android.content.Context,boolean)
int getTouchSlop()
int getDoubleTapSlop()
int getMinimumFlingVelocity()
int getMaximumFlingVelocity()
int getScaledDoubleTapSlop()
void setIsLongpressEnabled(boolean)
boolean isLongpressEnabled()
float getX(int)
float getY(int)
boolean isConsideredDoubleTap(android.view.MotionEvent,android.view.MotionEvent,android.view.MotionEvent)
android.view.MotionEvent obtain(android.view.MotionEvent)
long getDownTime()
boolean sendEmptyMessageAtTime(int,long)
long getEventTime()
void dispatchLongPress()
android.view.MotionEvent access$000(android.view.GestureDetector)
android.view.GestureDetector$OnGestureListener access$100(android.view.GestureDetector)
void access$200(android.view.GestureDetector)
android.view.GestureDetector$OnDoubleTapListener access$300(android.view.GestureDetector)
boolean access$400(android.view.GestureDetector)
int getDoubleTapTimeout()
void <init>(android.view.VelocityTracker$1)
android.view.KeyEvent createFromParcel(android.os.Parcel)
android.view.KeyEvent[] newArray(int)
android.view.MotionEvent createFromParcel(android.os.Parcel)
android.view.MotionEvent[] newArray(int)
void executeActions(android.os.Handler)
void <init>(android.view.ViewRoot,android.content.Context)
void dispatchResized(int,int,android.graphics.Rect,android.graphics.Rect,boolean,android.content.res.Configuration)
boolean supportsProcesses()
int checkCallingPermission(java.lang.String)
int checkPermission(java.lang.String,int,int)
void <init>(android.os.ParcelFileDescriptor)
void dispatchCloseSystemDialogs(java.lang.String)
void setNextPoolable(android.view.VelocityTracker)
android.view.VelocityTracker getNextPoolable()
void releasePointerList(android.view.VelocityTracker$Pointer)
android.view.VelocityTracker$Pointer obtainPointer()
long getHistoricalEventTime(int)
void releasePointer(android.view.VelocityTracker$Pointer)
android.view.VelocityTracker$Pointer getPointer(int)
void access$000(android.view.SurfaceView,boolean,boolean)
void onScrollChanged()
void destroy()
void windowsVisible()
void windowsGone()
boolean keyDispatchingTimedOut()
long getKeyDispatchingTimeout()
android.view.Surface access$300(android.view.ViewRoot)
void <init>(android.view.FocusFinder$1)
android.view.FocusFinder initialValue()
java.lang.Object initialValue()
int getNumStreamTypes()
void <init>(android.content.Context,android.media.AudioService)
void postVolumeChanged(int,int)
void onShowVolumeChanged(int,int)
void onStopSounds()
void onVolumeChanged(int,int)
int getStreamVolume(int)
int getStreamMaxVolume(int)
void setRingerIcon()
android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)
boolean isBluetoothA2dpOn()
void setLargeIcon(int)
void setSmallIcon(int)
void setDuration(int)
void setGravity(int,int,int)
boolean isStreamAffectedByRingerMode(int)
int getRingerMode()
boolean shouldVibrate(int)
android.media.ToneGenerator getOrCreateToneGenerator(int)
boolean startTone(int)
void onPlaySound(int,int)
void stopTone()
void onVibrate()
void onFreeResources()
void <init>(android.view.LayoutInflater$Factory,android.view.LayoutInflater$Factory)
android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)
void kill()
void checkIsAlive()
void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)
void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)
void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)
void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)
void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)
void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)
void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)
void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)
void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)
void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)
void addOnComputeInternalInsetsListener(android.view.ViewTreeObserver$OnComputeInternalInsetsListener)
void removeOnComputeInternalInsetsListener(android.view.ViewTreeObserver$OnComputeInternalInsetsListener)
void onGlobalFocusChanged(android.view.View,android.view.View)
void dispatchOnGlobalFocusChange(android.view.View,android.view.View)
void onGlobalLayout()
void dispatchOnGlobalLayout()
boolean onPreDraw()
boolean dispatchOnPreDraw()
void onTouchModeChanged(boolean)
void dispatchOnTouchModeChanged(boolean)
void dispatchOnScrollChanged()
boolean hasComputeInternalInsetsListeners()
void onComputeInternalInsets(android.view.ViewTreeObserver$InternalInsetsInfo)
void dispatchOnComputeInternalInsets(android.view.ViewTreeObserver$InternalInsetsInfo)
int getMaxKeyCode()
int getDeadChar(int,int)
void <init>(long,long,int,int,int)
void <init>(long,long,int,int,int,int)
void <init>(long,long,int,int,int,int,int,int)
void <init>(long,long,int,int,int,int,int,int,int,int)
void <init>(android.view.KeyEvent)
void <init>(android.view.KeyEvent,long,int)
android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int)
android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)
void <init>(android.view.KeyEvent,int)
android.view.KeyEvent changeAction(android.view.KeyEvent,int)
boolean isDown()
boolean native_isSystemKey(int)
boolean isSystem()
boolean native_hasDefaultAction(int)
boolean hasDefaultAction()
boolean isModifierKey(int)
boolean isAltPressed()
boolean isShiftPressed()
boolean isSymPressed()
void startTracking()
boolean isTracking()
boolean isLongPress()
java.lang.String getCharacters()
int getScanCode()
int getKeyboardDevice()
char getDisplayLabel(int)
char getDisplayLabel()
int getUnicodeChar(int)
int getUnicodeChar()
boolean getKeyData(int,android.view.KeyCharacterMap$KeyData)
char getMatch(char[],int)
char getMatch(char[])
char getMatch(int,char[],int)
char getNumber(int)
char getNumber()
boolean isPrintingKey(int)
boolean isPrintingKey()
boolean dispatch(android.view.KeyEvent$Callback)
void performedLongPress(android.view.KeyEvent)
void handleUpEvent(android.view.KeyEvent)
void readBaseFromParcel(android.os.Parcel)
void writeBaseToParcel(android.os.Parcel)
int access$076(android.view.KeyEvent,int)
void <init>(android.view.InputDevice$1)
void access$200(android.view.InputDevice,android.os.Parcel)
android.view.InputDevice createFromParcel(android.os.Parcel)
android.view.InputDevice[] newArray(int)
void forceLayout(android.view.View)
void handleGetNewSurface()
void <init>(float,float,float,float,int,int,android.graphics.Shader$TileMode)
android.graphics.Shader setShader(android.graphics.Shader)
void <init>(android.graphics.PorterDuff$Mode)
android.graphics.Xfermode setXfermode(android.graphics.Xfermode)
void setKeyFrame(int,int,float[])
void initViewGroup()
void initFromAttributes(android.content.Context,android.util.AttributeSet)
void setClipChildren(boolean)
void setClipToPadding(boolean)
void setAnimationCacheEnabled(boolean)
void setPersistentDrawingCache(int)
void setAddStatesFromChildren(boolean)
void setAlwaysDrawnWithCacheEnabled(boolean)
void setLayoutAnimation(android.view.animation.LayoutAnimationController)
android.view.FocusFinder getInstance()
android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)
void removeFromArray(int)
void addInArray(android.view.View,int)
void setAction(int)
void requestDisallowInterceptTouchEvent(boolean)
boolean onRequestFocusInDescendants(int,android.graphics.Rect)
android.view.MotionEvent obtain(long,long,int,float,float,int)
void dispatchFreezeSelfOnly(android.util.SparseArray)
void dispatchThawSelfOnly(android.util.SparseArray)
boolean canAnimate()
void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup$LayoutParams,int,int)
void bindLayoutAnimation(android.view.View)
boolean clipRect(int,int,int,int)
boolean drawChild(android.graphics.Canvas,android.view.View,long)
int getChildDrawingOrder(int,int)
void notifyAnimationListener()
float width()
float height()
boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)
boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)
void concat(android.graphics.Matrix)
int saveLayerAlpha(float,float,float,float,int,int)
void finishAnimatingView(android.view.View,android.view.animation.Animation)
void setBooleanFlag(int,boolean)
void setStaticTransformationsEnabled(boolean)
android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
void addView(android.view.View,int,int)
void addViewInner(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)
void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)
boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)
boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams)
void cleanupLayoutState(android.view.View)
android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
void onChildViewAdded(android.view.View,android.view.View)
void removeFromArray(int,int)
void removeViewInternal(android.view.View)
void removeViewsInternal(int,int)
void removeViewsInLayout(int,int)
void removeViewInternal(int,android.view.View)
void removeViewAt(int)
void removeViews(int,int)
void addDisappearingView(android.view.View)
void onChildViewRemoved(android.view.View,android.view.View)
void removeAllViewsInLayout()
void removeDetachedView(android.view.View,boolean)
void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams)
void detachViewFromParent(android.view.View)
void detachViewFromParent(int)
void detachViewsFromParent(int,int)
void detachAllViewsFromParent()
android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)
boolean intersect(int,int,int,int)
void offsetRectBetweenParentAndChild(android.view.View,android.graphics.Rect,boolean,boolean)
void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)
void offsetChildrenTopAndBottom(int)
void startLayoutAnimation()
void scheduleLayoutAnimation()
android.view.animation.LayoutAnimationController getLayoutAnimation()
boolean isAnimationCacheEnabled()
boolean isAlwaysDrawnWithCacheEnabled()
boolean isChildrenDrawnWithCacheEnabled()
void setChildrenDrawnWithCacheEnabled(boolean)
boolean isChildrenDrawingOrderEnabled()
void setChildrenDrawingOrderEnabled(boolean)
int getPersistentDrawingCache()
void measureChild(android.view.View,int,int)
void measureChildren(int,int)
int getChildMeasureSpec(int,int,int)
void measureChildWithMargins(android.view.View,int,int,int,int)
void clearDisappearingChildren()
android.view.animation.Animation$AnimationListener getLayoutAnimationListener()
boolean addStatesFromChildren()
void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)
android.view.animation.LayoutAnimationController access$100(android.view.ViewGroup)
android.view.animation.Animation$AnimationListener access$200(android.view.ViewGroup)
int getScrollBarSize()
int getFadingEdgeLength()
int getJumpTapTimeout()
int getEdgeSlop()
int getScaledEdgeSlop()
int getScaledPagingTouchSlop()
int getWindowTouchSlop()
int getScaledWindowTouchSlop()
int getMaximumDrawingCacheSize()
int getScaledOverscrollDistance()
int getScaledOverflingDistance()
long getZoomControlsTimeout()
long getGlobalActionKeyTimeout()
float getScrollFriction()
void <init>(android.view.WindowOrientationListener)
void setAllow180Rotation(boolean)
int getCurrentRotation(int)
boolean canDetectOrientation()
void readBooleanArray(boolean[])
void dispatchFinishedEvent(int,boolean)
android.view.MotionEvent obtain(int,int)
void setPointerCoordsAtSampleIndex(int,android.view.MotionEvent$PointerCoords[])
android.view.MotionEvent obtain(long,long,int,int,int[],android.view.MotionEvent$PointerCoords[],int,float,float,int,int,int,int)
void setPointerCoordsAtSampleIndex(int,float,float,float,float)
android.view.MotionEvent obtain(long,long,int,float,float,float,float,int,float,float,int,int)
android.view.MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)
android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)
void scale(float)
int getActionMasked()
int getActionIndex()
long getEventTimeNano()
float getPressure()
float getSize()
float getTouchMajor()
float getTouchMinor()
float getToolMajor()
float getToolMinor()
float getOrientation()
int findPointerIndex(int)
float getPressure(int)
float getSize(int)
float getTouchMajor(int)
float getTouchMinor(int)
float getToolMajor(int)
float getToolMinor(int)
float getOrientation(int)
void getPointerCoordsAtSampleIndex(int,android.view.MotionEvent$PointerCoords)
float getRawX()
float getRawY()
float getXPrecision()
float getYPrecision()
float getHistoricalX(int)
float getHistoricalY(int)
float getHistoricalPressure(int)
float getHistoricalSize(int)
float getHistoricalTouchMajor(int)
float getHistoricalTouchMinor(int)
float getHistoricalToolMajor(int)
float getHistoricalToolMinor(int)
float getHistoricalOrientation(int)
float getHistoricalPressure(int,int)
float getHistoricalSize(int,int)
float getHistoricalTouchMajor(int,int)
float getHistoricalTouchMinor(int,int)
float getHistoricalToolMajor(int,int)
float getHistoricalToolMinor(int,int)
float getHistoricalOrientation(int,int)
int getEdgeFlags()
void setEdgeFlags(int)
void offsetLocation(float,float)
void setPointerCoordsAtSampleIndex(int,android.view.MotionEvent$PointerCoords)
void incrementNumSamplesAndReserveStorage(int)
void addBatch(long,float,float,float,float,int)
void addBatch(long,android.view.MotionEvent$PointerCoords[],int)
void updateWindow(boolean,boolean)
void showSurface()
void hideSurface()
boolean formatHasAlpha(int)
void drawColor(int,android.graphics.PorterDuff$Mode)
void setZOrderMediaOverlay(boolean)
void setZOrderOnTop(boolean)
void setWindowType(int)
android.content.res.CompatibilityInfo getCompatibilityInfo()
boolean supportsScreen()
void translateLayoutParamsInAppWindowToScreen(android.view.WindowManager$LayoutParams)
void reportSurfaceDestroyed()
void surfaceCreated(android.view.SurfaceHolder)
void surfaceChanged(android.view.SurfaceHolder,int,int,int)
void surfaceRedrawNeeded(android.view.SurfaceHolder)
void surfaceDestroyed(android.view.SurfaceHolder)
boolean isFixedSize()
android.view.View$BaseSavedState createFromParcel(android.os.Parcel)
android.view.View$BaseSavedState[] newArray(int)
android.view.VelocityTracker newInstance()
void onAcquired(android.view.VelocityTracker)
void onReleased(android.view.VelocityTracker)
int ctor_native(int)
char get_native(int,int,int)
char getNumber_native(int,int)
char getMatch(int,char[])
char getMatch_native(int,int,char[],int)
char getDisplayLabel_native(int,int)
boolean getKeyData_native(int,int,android.view.KeyCharacterMap$KeyData)
long[] getEvents_native(int,char[])
int getType(int)
void dtor_native(int)
int getKeyboardType_native(int)
int getKeyboardType()
boolean[] deviceHasKeys(int[])
boolean deviceHasKey(int)
android.view.Surface createFromParcel(android.os.Parcel)
android.view.Surface[] newArray(int)
android.view.WindowManager$LayoutParams createFromParcel(android.os.Parcel)
android.view.WindowManager$LayoutParams[] newArray(int)
void access$000(android.view.ViewRoot,java.lang.Runnable)
void access$100(android.view.ViewRoot,android.view.KeyEvent,boolean)
void access$200(android.view.ViewRoot,android.view.MotionEvent,boolean)
int getDeviceId()
android.view.InputDevice getDevice()
int getSource()
void setSource(int)
void <init>(android.view.IWindowSession,android.view.IWindow,android.os.Handler,android.view.View$AttachInfo$Callbacks)
android.view.AbsSavedState createFromParcel(android.os.Parcel)
android.view.AbsSavedState[] newArray(int)
float getMin()
float getMax()
float getRange()
float getFlat()
float getFuzz()
void <init>(float,float,float,float,android.view.InputDevice$1)
float access$300(android.view.InputDevice$MotionRange)
float access$400(android.view.InputDevice$MotionRange)
float access$500(android.view.InputDevice$MotionRange)
float access$600(android.view.InputDevice$MotionRange)
void init(int)
int getDisplayId()
int getOrientation()
int getPixelFormat()
float getRefreshRate()
void getMetrics(android.util.DisplayMetrics)
android.view.Display createMetricsBasedDisplay(int,android.util.DisplayMetrics)
boolean mayUseInputMethod(int)
void <init>(int,int,int,int,int)
void <init>(int,int,int,int,int,int,int)
java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)
void backup()
android.view.View findNextFocus(android.view.ViewGroup,android.view.View,android.graphics.Rect,int)
android.view.View findNextFocusFromRect(android.view.ViewGroup,android.graphics.Rect,int)
boolean isBetterCandidate(int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)
boolean isCandidate(android.graphics.Rect,android.graphics.Rect,int)
boolean beamBeats(int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)
int majorAxisDistance(int,android.graphics.Rect,android.graphics.Rect)
int minorAxisDistance(int,android.graphics.Rect,android.graphics.Rect)
int getWeightedDistanceFor(int,int)
boolean beamsOverlap(int,android.graphics.Rect,android.graphics.Rect)
boolean isToDirectionOf(int,android.graphics.Rect,android.graphics.Rect)
int majorAxisDistanceToFarEdge(int,android.graphics.Rect,android.graphics.Rect)
int majorAxisDistanceRaw(int,android.graphics.Rect,android.graphics.Rect)
int majorAxisDistanceToFarEdgeRaw(int,android.graphics.Rect,android.graphics.Rect)
boolean isTouchCandidate(int,int,android.graphics.Rect,int)
boolean contains(android.graphics.Rect)
android.view.View findNearestTouchable(android.view.ViewGroup,int,int,int,int[])
android.content.res.XmlResourceParser getLayout(int)
void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.view.Menu)
void inflate(int,android.view.Menu)
void <init>(android.view.MenuInflater,android.view.Menu)
void readGroup(android.util.AttributeSet)
void readItem(android.util.AttributeSet)
android.view.SubMenu addSubMenuItem()
void resetGroup()
boolean hasAddedItem()
void addItem()
android.content.Context access$000(android.view.MenuInflater)
void <init>(android.graphics.Rect)
void inset(int,int)
void <init>(android.graphics.Rect,android.view.View)
void <init>(android.view.FocusFinder)
int getContantForFocusDirection(int)
void removeAt(int)
void <init>(android.view.accessibility.AccessibilityManager)
boolean getBooleanProperty(int)
void setBooleanProperty(int,boolean)
boolean isPassword()
void setPassword(boolean)
void setFullScreen(boolean)
boolean isFullScreen()
void setEventType(int)
int getItemCount()
int getCurrentItemIndex()
int getFromIndex()
void setFromIndex(int)
int getAddedCount()
void setAddedCount(int)
int getRemovedCount()
void setRemovedCount(int)
void setEventTime(long)
java.lang.CharSequence getClassName()
java.lang.CharSequence getPackageName()
java.util.List getText()
java.lang.CharSequence getBeforeText()
void setBeforeText(java.lang.CharSequence)
android.os.Parcelable getParcelableData()
void setParcelableData(android.os.Parcelable)
android.view.accessibility.AccessibilityEvent obtain()
void readList(java.util.List,java.lang.ClassLoader)
void initFromParcel(android.os.Parcel)
void writeList(java.util.List)
void <init>(android.view.accessibility.AccessibilityManager,android.os.Looper)
android.view.accessibility.IAccessibilityManagerClient asInterface(android.os.IBinder)
android.view.accessibility.AccessibilityEvent createFromParcel(android.os.Parcel)
android.view.accessibility.AccessibilityEvent[] newArray(int)
android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)
void addClient(android.view.accessibility.IAccessibilityManagerClient)
long clearCallingIdentity()
boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
void restoreCallingIdentity(long)
java.util.List getAccessibilityServiceList()
android.view.IWindowSession getWindowSession(android.os.Looper)
java.lang.Throwable fillInStackTrace()
void addFirstDrawHandler(java.lang.Runnable)
void addConfigCallback(android.content.ComponentCallbacks)
void profile()
void initializeGLInner()
int eglGetError()
void destroyGL()
void initializeGL()
boolean eglInitialize(javax.microedition.khronos.egl.EGLDisplay,int[])
boolean eglChooseConfig(javax.microedition.khronos.egl.EGLDisplay,int[],javax.microedition.khronos.egl.EGLConfig[],int,int[])
boolean eglMakeCurrent(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLSurface,javax.microedition.khronos.egl.EGLContext)
void <init>(javax.microedition.khronos.opengles.GL)
void nativeAbandonGlCaches()
boolean eglDestroyContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)
boolean eglDestroySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)
boolean eglTerminate(javax.microedition.khronos.egl.EGLDisplay)
void checkEglErrors()
android.view.SurfaceHolder$Callback2 willYouTakeTheSurface()
android.content.res.CompatibilityInfo$Translator getTranslator()
void translateWindowLayout(android.view.WindowManager$LayoutParams)
int getHostVisibility()
void unscheduleTraversals()
void translateRectInScreenToAppWindow(android.graphics.Rect)
android.view.InputQueue$Callback willYouTakeTheInputQueue()
void onInputQueueCreated(android.view.InputQueue)
android.os.MessageQueue myQueue()
void setView(android.view.View,android.view.WindowManager$LayoutParams,android.view.View)
android.view.View getView()
android.view.WindowLeaked getLocation()
void scheduleTraversals()
void setLayoutParams(android.view.WindowManager$LayoutParams,boolean)
void handleAppVisibility(boolean)
void translateRectInAppWindowToScreen(android.graphics.Rect)
void union(android.graphics.Rect)
void setTo(android.content.res.Configuration)
boolean ensureTouchModeLocally(boolean)
int getRootMeasureSpec(int,int)
boolean isValid()
int relayoutWindow(android.view.WindowManager$LayoutParams,int,boolean)
void updateConfiguration(android.content.res.Configuration,boolean)
void abortAnimation()
void setViewport(int,int)
boolean set(int,int,int,int)
void translateRegionInWindowToScreen(android.graphics.Region)
boolean set(android.graphics.Region)
android.graphics.Rect getTranslatedContentInsets(android.graphics.Rect)
android.graphics.Rect getTranslatedVisbileInsets(android.graphics.Rect)
void set(android.view.ViewTreeObserver$InternalInsetsInfo)
void draw(boolean)
void performTraversals()
boolean scrollToRectOrFocus(android.graphics.Rect,boolean)
boolean computeScrollOffset()
int getCurrY()
void glDisable(int)
void glClearColor(float,float,float,float)
void glClear(int)
void glEnable(int)
void translateCanvas(android.graphics.Canvas)
void setScreenDensity(int)
boolean eglSwapBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)
boolean intersect(android.graphics.Rect)
void startScroll(int,int,int,int)
boolean isViewDescendantOf(android.view.View,android.view.View)
void onInputQueueDestroyed(android.view.InputQueue)
int diff(android.content.res.Configuration)
void startMethodTracing(java.lang.String)
void stopMethodTracing()
void handleFinishedEvent(int,boolean)
void deliverKeyEvent(android.view.KeyEvent,boolean)
void deliverPointerEvent(android.view.MotionEvent)
void deliverTrackballEvent(android.view.MotionEvent)
void sendAccessibilityEvents()
void doDie()
void deliverKeyEventToViewHierarchy(android.view.KeyEvent,boolean)
void finishInputEvent()
void startInputEvent(java.lang.Runnable)
boolean enterTouchMode()
boolean leaveTouchMode()
android.view.ViewGroup findAncestorToTakeFocusInTouchMode(android.view.View)
void translateEventInScreenToAppWindow(android.view.MotionEvent)
void reset(int)
float collect(float,long,java.lang.String)
int generate(float)
boolean isDirectional(int)
boolean isKeyboardKey(android.view.KeyEvent)
boolean checkForLeavingTouchModeAndConsume(android.view.KeyEvent)
void captureMotionLog(java.lang.String,android.view.MotionEvent)
void captureKeyLog(java.lang.String,android.view.KeyEvent)
int enqueuePendingEvent(java.lang.Object,boolean)
java.lang.Object retrievePendingEvent(int)
android.media.AudioManager getAudioManager()
void translateRectInScreenToAppWinFrame(android.graphics.Rect)
java.lang.String getCanonicalName()
void die(boolean)
void dispatchKey(android.view.KeyEvent,boolean)
void dispatchKey(android.view.KeyEvent)
boolean sendMessageAtTime(android.os.Message,long)
void dispatchMotion(android.view.MotionEvent,boolean)
void dispatchMotion(android.view.MotionEvent)
void dispatchPointer(android.view.MotionEvent,boolean)
void dispatchTrackball(android.view.MotionEvent,boolean)
void dispatchPointer(android.view.MotionEvent)
void dispatchTrackball(android.view.MotionEvent)
android.graphics.Rect getWindowFrame()
int getSources()
android.view.KeyCharacterMap getKeyCharacterMap()
android.view.InputDevice$MotionRange getMotionRange(int)
void addMotionRange(int,float,float,float,float)
void appendSourceDescriptionIfApplicable(java.lang.StringBuilder,int,java.lang.String)
void appendRangeDescriptionIfApplicable(java.lang.StringBuilder,int,java.lang.String)
float computeLowpassAlpha(int)
void calculateNewRotation(float,float)
float lowpassFilter(float,float,float)
float vectorMagnitude(float,float,float)
float tiltAngle(float,float)
void handleAccelerationDistrust(float)
void checkFullyTilted(float)
float computeNewOrientation(float,float)
void filterOrientation(float,float)
void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect)
void applyDisplay(int,android.graphics.Rect,android.graphics.Rect)
boolean isVertical(int)
boolean isHorizontal(int)
void <init>(android.view.LayoutInflater,android.content.Context)
android.view.LayoutInflater$Factory getFactory()
void setFactory(android.view.LayoutInflater$Factory)
android.view.LayoutInflater$Filter getFilter()
void setFilter(android.view.LayoutInflater$Filter)
android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)
android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup)
java.lang.String getPositionDescription()
void rInflate(org.xmlpull.v1.XmlPullParser,android.view.View,android.util.AttributeSet)
android.view.View createViewFromTag(java.lang.String,android.util.AttributeSet)
boolean onLoadClass(java.lang.Class)
void failNotAllowed(java.lang.String,java.lang.String,android.util.AttributeSet)
java.lang.reflect.Constructor getConstructor(java.lang.Class[])
java.lang.Object newInstance(java.lang.Object[])
android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)
android.view.View onCreateView(java.lang.String,android.util.AttributeSet)
void parseRequestFocus(org.xmlpull.v1.XmlPullParser,android.view.View)
void parseInclude(org.xmlpull.v1.XmlPullParser,android.view.View,android.util.AttributeSet)
int getAttributeResourceValue(java.lang.String,java.lang.String,int)
void attachBaseContext(android.content.Context)
void initializeTheme()
void setTheme(int)
android.view.LayoutInflater cloneInContext(android.content.Context)
void applyStyle(int,boolean)
void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)
android.content.res.Resources$Theme newTheme()
void setTo(android.content.res.Resources$Theme)
void addView(android.view.View,android.view.ViewGroup$LayoutParams,boolean)
void addViewNesting(android.view.View,android.view.ViewGroup$LayoutParams)
int findViewLocked(android.view.View,boolean)
android.view.View removeViewLocked(int)
void finishRemoveViewLocked(android.view.View,int)
void removeItem(java.lang.Object[],java.lang.Object[],int)
java.lang.StackTraceElement[] getStackTrace()
void setStackTrace(java.lang.StackTraceElement[])
void closeAll(android.os.IBinder,java.lang.String,java.lang.String)
android.view.WindowManager$LayoutParams getRootViewLayoutParameter(android.view.View)
void closeAll()
void <init>(android.content.Context,android.view.ScaleGestureDetector$OnScaleGestureListener)
void setContext(android.view.MotionEvent)
float getRawX(android.view.MotionEvent,int)
float getRawY(android.view.MotionEvent,int)
boolean isInProgress()
float getFocusX()
float getFocusY()
float sqrt(float)
float getCurrentSpan()
float getPreviousSpan()
float getScaleFactor()
long getTimeDelta()
void setTouchableInsets(int)
int getTouchableInsets()
char getShortcut(java.lang.String)
boolean hasValue(int)
void setItem(android.view.MenuItem)
java.util.List getAllProviders()
java.util.List getProviders(android.location.Criteria,boolean)
java.lang.String getBestProvider(android.location.Criteria,boolean)
boolean providerMeetsCriteria(java.lang.String,android.location.Criteria)
void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)
void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)
void removeUpdates(android.location.ILocationListener)
void removeUpdatesPI(android.app.PendingIntent)
boolean addGpsStatusListener(android.location.IGpsStatusListener)
void removeGpsStatusListener(android.location.IGpsStatusListener)
void locationCallbackFinished(android.location.ILocationListener)
boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)
void writeDouble(double)
void addProximityAlert(double,double,float,long,android.app.PendingIntent)
void removeProximityAlert(android.app.PendingIntent)
android.os.Bundle getProviderInfo(java.lang.String)
boolean isProviderEnabled(java.lang.String)
android.location.Location getLastKnownLocation(java.lang.String)
void reportLocation(android.location.Location,boolean)
boolean geocoderIsPresent()
java.lang.String getFromLocation(double,double,int,android.location.GeocoderParams,java.util.List)
java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,java.util.List)
void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)
void removeTestProvider(java.lang.String)
void setTestProviderLocation(java.lang.String,android.location.Location)
void clearTestProviderLocation(java.lang.String)
void setTestProviderEnabled(java.lang.String,boolean)
void clearTestProviderEnabled(java.lang.String)
void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)
void clearTestProviderStatus(java.lang.String)
int access$002(android.location.Criteria,int)
int access$102(android.location.Criteria,int)
int access$202(android.location.Criteria,int)
int access$302(android.location.Criteria,int)
int access$402(android.location.Criteria,int)
boolean access$502(android.location.Criteria,boolean)
boolean access$602(android.location.Criteria,boolean)
boolean access$702(android.location.Criteria,boolean)
boolean access$802(android.location.Criteria,boolean)
android.location.Criteria createFromParcel(android.os.Parcel)
android.location.Criteria[] newArray(int)
android.location.IGeocodeProvider asInterface(android.os.IBinder)
double readDouble()
void <init>(android.location.GpsStatus)
android.location.GpsSatellite[] access$000(android.location.GpsStatus)
void <init>(android.location.GpsStatus,android.location.GpsSatellite[])
android.location.ILocationManager asInterface(android.os.IBinder)
android.location.ILocationListener asInterface(android.os.IBinder)
android.location.IGpsStatusListener asInterface(android.os.IBinder)
void <init>(android.location.LocationManager$ListenerTransport,android.location.LocationManager)
void <init>(android.location.LocationManager$ListenerTransport,android.os.Looper,android.location.LocationManager)
void <init>(android.location.LocationManager,android.location.LocationListener,android.os.Looper)
void onLocationChanged(android.location.Location)
void putString(java.lang.String,java.lang.String)
void putInt(java.lang.String,int)
void putBundle(java.lang.String,android.os.Bundle)
void onStatusChanged(java.lang.String,int,android.os.Bundle)
void onProviderEnabled(java.lang.String)
void onProviderDisabled(java.lang.String)
void <init>(android.location.Location)
android.os.Bundle getBundle(java.lang.String)
android.location.ILocationManager access$100(android.location.LocationManager)
void _handleMessage(android.os.Message)
void access$000(android.location.LocationManager$ListenerTransport,android.os.Message)
void onGpsStarted()
void onGpsStopped()
void onFirstFix(int)
void onSvStatusChanged(int,int[],float[],float[],float[],int,int,int)
void onNmeaReceived(long,java.lang.String)
void <init>(android.location.GeocoderParams$1)
java.util.Locale access$102(android.location.GeocoderParams,java.util.Locale)
java.lang.String access$202(android.location.GeocoderParams,java.lang.String)
android.location.GeocoderParams createFromParcel(android.os.Parcel)
android.location.GeocoderParams[] newArray(int)
void <init>(android.location.LocationManager$GpsStatusListenerTransport)
void <init>(android.location.LocationManager,android.location.GpsStatus$Listener)
void <init>(android.location.LocationManager,android.location.GpsStatus$NmeaListener)
android.location.GpsStatus access$200(android.location.LocationManager)
void setTimeToFirstFix(int)
void setStatus(int,int[],float[],float[],float[],int,int,int)
void <init>(android.location.LocationManager$GpsStatusListenerTransport,long,java.lang.String)
java.util.ArrayList access$300(android.location.LocationManager$GpsStatusListenerTransport)
android.location.GpsStatus$NmeaListener access$400(android.location.LocationManager$GpsStatusListenerTransport)
android.location.GpsStatus$Listener access$500(android.location.LocationManager$GpsStatusListenerTransport)
void addGpsStatusListener(android.location.IGpsStatusListener)
int getTimeToFirstFix()
void setStatus(android.location.GpsSatellite)
void setStatus(android.location.GpsStatus)
java.lang.Iterable getSatellites()
int getMaxSatellites()
void <init>(android.location.ILocationManager)
android.location.LocationProvider createProvider(java.lang.String,android.os.Bundle)
java.util.List getProviders(boolean)
android.location.LocationProvider getProvider(java.lang.String)
void _requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.LocationListener,android.os.Looper)
void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)
void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)
void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)
void _requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)
void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)
void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)
void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)
void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)
void requestSingleUpdate(java.lang.String,android.app.PendingIntent)
void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)
void removeUpdates(android.location.LocationListener)
void removeUpdates(android.app.PendingIntent)
boolean addGpsStatusListener(android.location.GpsStatus$Listener)
void removeGpsStatusListener(android.location.GpsStatus$Listener)
boolean addNmeaListener(android.location.GpsStatus$NmeaListener)
void removeNmeaListener(android.location.GpsStatus$NmeaListener)
android.location.GpsStatus getGpsStatus(android.location.GpsStatus)
boolean isPresent()
void <init>(android.content.Context,java.util.Locale)
java.util.List getFromLocation(double,double,int)
java.util.List getFromLocationName(java.lang.String,int)
java.util.List getFromLocationName(java.lang.String,int,double,double,double,double)
void set(android.location.Location)
void <init>(android.os.Bundle)
java.lang.String format(double)
java.lang.String convert(double,int)
int countTokens()
double convert(java.lang.String)
boolean hasMoreTokens()
double tan(double)
void computeDistanceAndBearing(double,double,double,double,float[])
void distanceBetween(double,double,double,double,float[])
float distanceTo(android.location.Location)
float bearingTo(android.location.Location)
java.lang.String getProvider()
void setProvider(java.lang.String)
void setTime(long)
double getLatitude()
void setLatitude(double)
double getLongitude()
void setLongitude(double)
boolean hasAltitude()
double getAltitude()
void setAltitude(double)
void removeAltitude()
boolean hasSpeed()
float getSpeed()
void setSpeed(float)
void removeSpeed()
boolean hasBearing()
float getBearing()
void setBearing(float)
void removeBearing()
boolean hasAccuracy()
float getAccuracy()
void setAccuracy(float)
void removeAccuracy()
void setExtras(android.os.Bundle)
long access$002(android.location.Location,long)
double access$102(android.location.Location,double)
double access$202(android.location.Location,double)
boolean access$302(android.location.Location,boolean)
double access$402(android.location.Location,double)
boolean access$502(android.location.Location,boolean)
float access$602(android.location.Location,float)
boolean access$702(android.location.Location,boolean)
float access$802(android.location.Location,float)
boolean access$902(android.location.Location,boolean)
float access$1002(android.location.Location,float)
android.os.Bundle access$1102(android.location.Location,android.os.Bundle)
boolean meetsCriteria(android.location.Criteria)
int getStatus(android.os.Bundle)
long getStatusUpdateTime()
java.lang.String getInternalState()
void enableLocationTracking(boolean)
void setMinTime(long,android.os.WorkSource)
void updateNetworkState(int,android.net.NetworkInfo)
void updateLocation(android.location.Location)
boolean sendExtraCommand(java.lang.String,android.os.Bundle)
void addListener(int)
void removeListener(int)
int getPrn()
float getSnr()
float getElevation()
float getAzimuth()
boolean hasEphemeris()
boolean hasAlmanac()
boolean usedInFix()
void <init>(java.util.Locale)
java.util.Locale getLocale()
int getMaxAddressLineIndex()
java.lang.String getAddressLine(int)
void setAddressLine(int,java.lang.String)
java.lang.String getFeatureName()
void setFeatureName(java.lang.String)
java.lang.String getAdminArea()
void setAdminArea(java.lang.String)
java.lang.String getSubAdminArea()
void setSubAdminArea(java.lang.String)
java.lang.String getLocality()
void setLocality(java.lang.String)
java.lang.String getSubLocality()
void setSubLocality(java.lang.String)
java.lang.String getThoroughfare()
void setThoroughfare(java.lang.String)
java.lang.String getSubThoroughfare()
void setSubThoroughfare(java.lang.String)
java.lang.String getPremises()
void setPremises(java.lang.String)
java.lang.String getPostalCode()
void setPostalCode(java.lang.String)
java.lang.String getCountryCode()
void setCountryCode(java.lang.String)
java.lang.String getCountryName()
void setCountryName(java.lang.String)
boolean hasLatitude()
void clearLatitude()
boolean hasLongitude()
void clearLongitude()
java.lang.String getPhone()
void setPhone(java.lang.String)
void setUrl(java.lang.String)
java.lang.String getLanguage()
java.lang.String getCountry()
java.util.HashMap access$002(android.location.Address,java.util.HashMap)
java.util.HashMap access$000(android.location.Address)
int access$102(android.location.Address,int)
int access$100(android.location.Address)
java.lang.String access$202(android.location.Address,java.lang.String)
java.lang.String access$302(android.location.Address,java.lang.String)
java.lang.String access$402(android.location.Address,java.lang.String)
java.lang.String access$502(android.location.Address,java.lang.String)
java.lang.String access$602(android.location.Address,java.lang.String)
java.lang.String access$702(android.location.Address,java.lang.String)
java.lang.String access$802(android.location.Address,java.lang.String)
java.lang.String access$902(android.location.Address,java.lang.String)
java.lang.String access$1002(android.location.Address,java.lang.String)
java.lang.String access$1102(android.location.Address,java.lang.String)
java.lang.String access$1202(android.location.Address,java.lang.String)
boolean access$1302(android.location.Address,boolean)
boolean access$1300(android.location.Address)
double access$1402(android.location.Address,double)
boolean access$1502(android.location.Address,boolean)
boolean access$1500(android.location.Address)
double access$1602(android.location.Address,double)
java.lang.String access$1702(android.location.Address,java.lang.String)
java.lang.String access$1802(android.location.Address,java.lang.String)
android.os.Bundle access$1902(android.location.Address,android.os.Bundle)
void <init>(android.location.Criteria)
void setHorizontalAccuracy(int)
int getHorizontalAccuracy()
void setVerticalAccuracy(int)
int getVerticalAccuracy()
void setSpeedAccuracy(int)
int getSpeedAccuracy()
void setBearingAccuracy(int)
int getBearingAccuracy()
void setCostAllowed(boolean)
boolean isCostAllowed()
void setAltitudeRequired(boolean)
boolean isAltitudeRequired()
void setSpeedRequired(boolean)
boolean isSpeedRequired()
void setBearingRequired(boolean)
boolean isBearingRequired()
android.location.Address createFromParcel(android.os.Parcel)
android.location.Address[] newArray(int)
void onGpsStatusChanged(int)
android.location.GpsSatellite next()
android.location.Location createFromParcel(android.os.Parcel)
android.location.Location[] newArray(int)
android.location.INetInitiatedListener asInterface(android.os.IBinder)
android.location.ILocationProvider asInterface(android.os.IBinder)
android.location.IGpsStatusProvider asInterface(android.os.IBinder)
java.lang.String getClientPackage()
java.lang.String getVariant()
int part1(int,double,java.lang.String,int[])
int test(int,double,java.lang.String)
int part3(java.lang.String)
int part2(double,int,java.lang.String)
void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)
void register()
void connected()
void disconnected()
java.lang.String name(int)
org.apache.harmony.dalvik.ddmc.Chunk handleNHGT(org.apache.harmony.dalvik.ddmc.Chunk)
org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)
byte[] getLeakInfo()
int type(java.lang.String)
void <init>(int,byte[],int,int)
org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)
org.apache.harmony.dalvik.ddmc.Chunk handleMPRS(org.apache.harmony.dalvik.ddmc.Chunk)
org.apache.harmony.dalvik.ddmc.Chunk handleMPRE(org.apache.harmony.dalvik.ddmc.Chunk)
org.apache.harmony.dalvik.ddmc.Chunk handleMPSS(org.apache.harmony.dalvik.ddmc.Chunk)
org.apache.harmony.dalvik.ddmc.Chunk handleMPSE(org.apache.harmony.dalvik.ddmc.Chunk)
org.apache.harmony.dalvik.ddmc.Chunk handleMPRQ(org.apache.harmony.dalvik.ddmc.Chunk)
java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)
int getInt()
java.lang.String getString(java.nio.ByteBuffer,int)
void startMethodTracing(java.lang.String,int,int)
void startMethodTracingDdms(int,int)
boolean isMethodTracingActive()
org.apache.harmony.dalvik.ddmc.Chunk handleTHEN(org.apache.harmony.dalvik.ddmc.Chunk)
org.apache.harmony.dalvik.ddmc.Chunk handleTHST(org.apache.harmony.dalvik.ddmc.Chunk)
org.apache.harmony.dalvik.ddmc.Chunk handleSTKL(org.apache.harmony.dalvik.ddmc.Chunk)
byte get()
void threadNotify(boolean)
byte[] getThreadStats()
java.lang.StackTraceElement[] getStackTraceById(int)
org.apache.harmony.dalvik.ddmc.Chunk createStackChunk(java.lang.StackTraceElement[],int)
java.lang.String getClassName()
java.lang.String getMethodName()
java.nio.ByteBuffer putInt(int)
void putString(java.nio.ByteBuffer,java.lang.String)
int getLineNumber()
void <init>(int,java.nio.ByteBuffer)
org.apache.harmony.dalvik.ddmc.Chunk handleHPIF(org.apache.harmony.dalvik.ddmc.Chunk)
org.apache.harmony.dalvik.ddmc.Chunk handleHPSGNHSG(org.apache.harmony.dalvik.ddmc.Chunk,boolean)
org.apache.harmony.dalvik.ddmc.Chunk handleHPDU(org.apache.harmony.dalvik.ddmc.Chunk)
org.apache.harmony.dalvik.ddmc.Chunk handleHPDS(org.apache.harmony.dalvik.ddmc.Chunk)
org.apache.harmony.dalvik.ddmc.Chunk handleHPGC(org.apache.harmony.dalvik.ddmc.Chunk)
org.apache.harmony.dalvik.ddmc.Chunk handleREAE(org.apache.harmony.dalvik.ddmc.Chunk)
org.apache.harmony.dalvik.ddmc.Chunk handleREAQ(org.apache.harmony.dalvik.ddmc.Chunk)
org.apache.harmony.dalvik.ddmc.Chunk handleREAL(org.apache.harmony.dalvik.ddmc.Chunk)
boolean heapInfoNotify(int)
boolean heapSegmentNotify(int,int,boolean)
void dumpHprofData(java.lang.String)
void dumpHprofDataDdms()
void enableRecentAllocations(boolean)
boolean getRecentAllocationStatus()
byte[] getRecentAllocations()
org.apache.harmony.dalvik.ddmc.Chunk handleHELO(org.apache.harmony.dalvik.ddmc.Chunk)
org.apache.harmony.dalvik.ddmc.Chunk handleFEAT(org.apache.harmony.dalvik.ddmc.Chunk)
java.lang.String getProperty(java.lang.String,java.lang.String)
java.lang.String getAppName()
java.nio.ByteBuffer order(java.nio.ByteOrder)
boolean waitingForDebugger()
void sendWAIT(int)
java.lang.String[] getVmFeatureList()
void sendChunk(org.apache.harmony.dalvik.ddmc.Chunk)
void halt(int)
void sendAPNM(java.lang.String)
void setAppName(java.lang.String)
void registrationComplete()
int staticGetMemoryClass()
int getMemoryClass()
java.util.List getRecentTasks(int,int)
java.util.List getTasks(int,int,android.app.IThumbnailReceiver)
java.util.List getRunningTasks(int,int,android.app.IThumbnailReceiver)
java.util.List getRunningTasks(int)
java.util.List getServices(int,int)
java.util.List getRunningServices(int)
android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)
boolean clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)
java.util.List getProcessesInErrorState()
java.util.List getRunningExternalApplications()
java.util.List getRunningAppProcesses()
android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])
void killBackgroundProcesses(java.lang.String)
void restartPackage(java.lang.String)
void forceStopPackage(java.lang.String)
android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()
boolean isUserAMonkey()
void setSearchDialog(android.app.SearchDialog)
void onBackPressed()
void <init>(android.app.IntentService,android.os.Looper)
void onHandleIntent(android.content.Intent)
void stopSelf(int)
android.app.SearchableInfo createFromParcel(android.os.Parcel)
android.app.SearchableInfo[] newArray(int)
boolean activityStarting(android.content.Intent,java.lang.String)
boolean activityResuming(java.lang.String)
boolean appCrashed(java.lang.String,int,java.lang.String,java.lang.String,long,java.lang.String)
int appEarlyNotResponding(java.lang.String,int,java.lang.String)
int appNotResponding(java.lang.String,int,java.lang.String)
void setProgressBarIndeterminateVisibility(boolean)
void onSetContentView()
void <init>(android.app.LauncherActivity)
android.content.Intent getTargetIntent()
void <init>(android.app.LauncherActivity,android.app.LauncherActivity$IconResizer)
void setListAdapter(android.widget.ListAdapter)
void setTextFilterEnabled(boolean)
void onListItemClick(android.widget.ListView,android.view.View,int,long)
android.app.LauncherActivity$ListItem itemForPosition(int)
java.util.List onQueryPackageManager(android.content.Intent)
void <init>(android.content.pm.PackageManager,android.content.pm.ResolveInfo,android.app.LauncherActivity$IconResizer)
java.util.List makeListItems()
android.app.IApplicationThread asInterface(android.os.IBinder)
void schedulePauseActivity(android.os.IBinder,boolean,boolean,int)
void scheduleStopActivity(android.os.IBinder,boolean,int)
void scheduleWindowVisibility(android.os.IBinder,boolean)
void scheduleResumeActivity(android.os.IBinder,boolean)
void scheduleSendResult(android.os.IBinder,java.util.List)
void scheduleLaunchActivity(android.content.Intent,android.os.IBinder,int,android.content.pm.ActivityInfo,android.os.Bundle,java.util.List,java.util.List,boolean,boolean)
void scheduleRelaunchActivity(android.os.IBinder,java.util.List,java.util.List,int,boolean,android.content.res.Configuration)
void scheduleNewIntent(java.util.List,android.os.IBinder)
void scheduleDestroyActivity(android.os.IBinder,boolean,int)
void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,int,java.lang.String,android.os.Bundle,boolean)
void scheduleCreateService(android.os.IBinder,android.content.pm.ServiceInfo)
void scheduleBindService(android.os.IBinder,android.content.Intent,boolean)
void scheduleUnbindService(android.os.IBinder,android.content.Intent)
void scheduleServiceArgs(android.os.IBinder,int,int,android.content.Intent)
void scheduleStopService(android.os.IBinder)
android.app.IInstrumentationWatcher asInterface(android.os.IBinder)
java.util.HashMap readHashMap(java.lang.ClassLoader)
void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.util.List,android.content.ComponentName,java.lang.String,android.os.Bundle,android.app.IInstrumentationWatcher,int,boolean,android.content.res.Configuration,java.util.Map)
void scheduleExit()
void scheduleSuicide()
void requestThumbnail(android.os.IBinder)
void scheduleConfigurationChanged(android.content.res.Configuration)
void updateTimeZone()
void processInBackground()
android.os.ParcelFileDescriptor readFileDescriptor()
void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])
android.content.IIntentReceiver asInterface(android.os.IBinder)
void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)
void scheduleLowMemory()
void scheduleActivityConfigurationChanged(android.os.IBinder)
void profilerControl(boolean,java.lang.String,android.os.ParcelFileDescriptor)
void setSchedulingGroup(int)
void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,int)
void scheduleDestroyBackupAgent(android.content.pm.ApplicationInfo)
void getMemoryInfo(android.os.Debug$MemoryInfo)
void dispatchPackageBroadcast(int,java.lang.String[])
void scheduleCrash(java.lang.String)
void connected(android.content.ComponentName,android.os.IBinder)
android.app.ResultInfo createFromParcel(android.os.Parcel)
android.app.ResultInfo[] newArray(int)
void <init>(android.app.LoadedApk$ServiceDispatcher,android.content.ComponentName,android.os.IBinder)
void death(android.content.ComponentName,android.os.IBinder)
void binderDied()
void <init>(android.app.WallpaperManager$Globals,android.os.Looper)
android.graphics.Bitmap access$002(android.app.WallpaperManager$Globals,android.graphics.Bitmap)
android.graphics.Bitmap access$102(android.app.WallpaperManager$Globals,android.graphics.Bitmap)
void <init>(android.app.ActivityThread)
void activityIdle(android.os.IBinder,android.content.res.Configuration)
void ensureJitEnabled()
boolean queueIdle()
void <init>(android.app.ActivityThread,android.app.ActivityThread$1)
void <init>(android.app.ActivityThread$1)
void <init>(android.app.ActivityThread,int)
void initGlobals(android.os.Looper)
android.app.WallpaperManager getInstance(android.content.Context)
android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)
android.app.IWallpaperManager getIWallpaperManager()
android.graphics.Bitmap peekWallpaperBitmap(android.content.Context,boolean)
android.graphics.drawable.Drawable peekDrawable()
void <init>(android.graphics.Bitmap,android.app.WallpaperManager$1)
android.graphics.drawable.Drawable peekFastDrawable()
android.app.WallpaperInfo getWallpaperInfo()
java.lang.String getResourceName(int)
android.os.ParcelFileDescriptor setWallpaper(java.lang.String)
java.io.InputStream openRawResource(int)
void setWallpaper(java.io.InputStream,java.io.FileOutputStream)
void setResource(int)
void setStream(java.io.InputStream)
int getWidthHint()
int getDesiredMinimumWidth()
int getHeightHint()
int getDesiredMinimumHeight()
void setDimensionHints(int,int)
void suggestDesiredDimensions(int,int)
void setWallpaperOffsets(android.os.IBinder,float,float)
void setWallpaperOffsetSteps(float,float)
void sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)
void clearWallpaperOffsets(android.os.IBinder)
void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)
android.graphics.Bitmap generateBitmap(android.content.Context,android.graphics.Bitmap,int,int)
int getThreshold()
void setThreshold(int)
int getTrimmedLength(java.lang.CharSequence)
void replaceText(java.lang.CharSequence)
void performCompletion()
boolean isLandscapeMode(android.content.Context)
void ensureImeVisible(boolean)
boolean enoughToFilter()
boolean access$400(android.app.SearchDialog$SearchAutoComplete)
android.app.IServiceConnection asInterface(android.os.IBinder)
boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)
void onGroupCollapse(int)
void onGroupExpand(int)
void ensureList()
void onRestoreInstanceState(android.os.Bundle)
void onContentChanged()
void setEmptyView(android.view.View)
void setOnChildClickListener(android.widget.ExpandableListView$OnChildClickListener)
void setOnGroupExpandListener(android.widget.ExpandableListView$OnGroupExpandListener)
void setOnGroupCollapseListener(android.widget.ExpandableListView$OnGroupCollapseListener)
void setListAdapter(android.widget.ExpandableListAdapter)
void setAdapter(android.widget.ExpandableListAdapter)
android.widget.ExpandableListView getExpandableListView()
android.widget.ExpandableListAdapter getExpandableListAdapter()
long getSelectedId()
long getSelectedPosition()
boolean setSelectedChild(int,int,boolean)
void setSelectedGroup(int)
android.app.IWallpaperManager asInterface(android.os.IBinder)
void onWallpaperChanged()
android.graphics.Bitmap getCurrentWallpaperLocked(android.content.Context)
android.graphics.Bitmap getDefaultWallpaperLocked(android.content.Context)
android.os.ParcelFileDescriptor getWallpaper(android.app.IWallpaperManagerCallback,android.os.Bundle)
android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)
android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)
void enableCarMode(int)
int getCurrentModeType()
void setNightMode(int)
int getNightMode()
android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)
java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])
java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])
android.content.Intent addCategory(java.lang.String)
android.content.Intent setPackage(java.lang.String)
android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)
void removeCategory(java.lang.String)
android.content.Intent setClassName(java.lang.String,java.lang.String)
android.content.Intent getLaunchIntentForPackage(java.lang.String)
int[] getPackageGids(java.lang.String)
android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)
java.util.List queryPermissionsByGroup(java.lang.String,int)
android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)
java.util.List getAllPermissionGroups(int)
android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)
android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)
android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)
android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)
java.lang.String[] getSystemSharedLibraryNames()
android.content.pm.FeatureInfo[] getSystemAvailableFeatures()
boolean hasSystemFeature(java.lang.String)
int checkPermission(java.lang.String,java.lang.String)
boolean addPermission(android.content.pm.PermissionInfo)
boolean addPermissionAsync(android.content.pm.PermissionInfo)
void removePermission(java.lang.String)
int checkSignatures(java.lang.String,java.lang.String)
int checkUidSignatures(int,int)
int checkSignatures(int,int)
java.lang.String[] getPackagesForUid(int)
int getUidForSharedUser(java.lang.String)
android.content.pm.ParceledListSlice getInstalledPackages(int,java.lang.String)
android.os.Parcelable populateList(java.util.List,android.os.Parcelable$Creator)
boolean isLastSlice()
java.util.List getInstalledPackages(int)
android.content.pm.ParceledListSlice getInstalledApplications(int,java.lang.String)
java.util.List getInstalledApplications(int)
java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)
android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int)
java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int)
java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int)
java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int)
java.util.List queryBroadcastReceivers(android.content.Intent,int)
android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int)
android.content.pm.ResolveInfo resolveService(android.content.Intent,int)
java.util.List queryIntentServices(android.content.Intent,java.lang.String,int)
java.util.List queryIntentServices(android.content.Intent,int)
android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)
java.util.List queryContentProviders(java.lang.String,int,int)
android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)
java.util.List queryInstrumentation(java.lang.String,int)
android.graphics.drawable.Drawable getCachedIcon(android.app.ContextImpl$ApplicationPackageManager$ResourceName)
void putCachedIcon(android.app.ContextImpl$ApplicationPackageManager$ResourceName,android.graphics.drawable.Drawable)
android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)
android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)
java.lang.String toURI()
android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)
android.graphics.drawable.Drawable getDefaultActivityIcon()
android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)
android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)
android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)
android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)
java.lang.String toUri(int)
android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)
android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)
android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)
android.content.res.Resources getResourcesForActivity(android.content.ComponentName)
android.app.ContextImpl getSystemContext()
int myUid()
android.content.res.Resources getTopLevelResources(java.lang.String,android.app.LoadedApk)
boolean isSafeMode()
void configurationChanged()
void <init>(android.app.ContextImpl,android.content.pm.IPackageManager)
android.app.ActivityThread currentActivityThread()
void scheduleGcIdler()
void handlePackageBroadcast(int,java.lang.String[],boolean)
java.lang.CharSequence getCachedString(android.app.ContextImpl$ApplicationPackageManager$ResourceName)
void putCachedString(android.app.ContextImpl$ApplicationPackageManager$ResourceName,java.lang.CharSequence)
java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)
android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)
java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)
void installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String)
void movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,int)
java.lang.String getInstallerPackageName(java.lang.String)
void deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver,int)
void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver)
void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)
void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)
void freeStorage(long,android.content.IntentSender)
void getPackageSizeInfo(java.lang.String,android.content.pm.IPackageStatsObserver)
void addPackageToPreferred(java.lang.String)
void removePackageFromPreferred(java.lang.String)
java.util.List getPreferredPackages(int)
void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)
void clearPackagePreferredActivities(java.lang.String)
int getPreferredActivities(java.util.List,java.util.List,java.lang.String)
void setComponentEnabledSetting(android.content.ComponentName,int,int)
int getComponentEnabledSetting(android.content.ComponentName)
void setApplicationEnabledSetting(java.lang.String,int,int)
int getApplicationEnabledSetting(java.lang.String)
android.app.DownloadManager$Query setFilterById(long[])
android.app.DownloadManager$Query setFilterByStatus(int)
android.app.DownloadManager$Query setOnlyIncludeVisibleInDownloadsUi(boolean)
android.app.DownloadManager$Query orderBy(java.lang.String,int)
java.lang.String getWhereClauseForIds(long[])
java.lang.String[] getWhereArgsForIds(long[])
java.lang.String statusClause(java.lang.String,int)
java.lang.String joinStrings(java.lang.String,java.lang.Iterable)
android.database.Cursor runQuery(android.content.ContentResolver,java.lang.String[],android.net.Uri)
void <init>(android.os.Parcel,android.app.ActivityManager$1)
android.app.ActivityManager$RunningServiceInfo createFromParcel(android.os.Parcel)
android.app.ActivityManager$RunningServiceInfo[] newArray(int)
void <init>(android.app.ListActivity)
void <init>(android.app.KeyguardManager,java.lang.String)
android.view.IWindowManager access$000(android.app.KeyguardManager)
void disableKeyguard()
void reenableKeyguard()
java.util.concurrent.ExecutorService singleThreadExecutor()
void add(java.lang.Runnable)
void remove(java.lang.Runnable)
java.lang.Object poll()
void waitToFinish()
android.app.ActivityManager$RunningAppProcessInfo createFromParcel(android.os.Parcel)
android.app.ActivityManager$RunningAppProcessInfo[] newArray(int)
void <init>(android.app.LoadedApk$ServiceDispatcher)
void <init>(android.content.Context,android.app.ActivityThread)
android.content.IContentProvider acquireProvider(android.content.Context,java.lang.String)
android.content.IContentProvider acquireExistingProvider(android.content.Context,java.lang.String)
boolean releaseProvider(android.content.IContentProvider)
android.content.ComponentName getErrorReportReceiver(android.content.pm.PackageManager,java.lang.String,java.lang.String)
android.content.ComponentName getErrorReportReceiver(android.content.Context,java.lang.String,int)
void <init>(android.app.ContextImpl$SharedPreferencesImpl)
android.content.SharedPreferences$Editor putLong(java.lang.String,long)
java.lang.Float valueOf(float)
android.content.SharedPreferences$Editor putFloat(java.lang.String,float)
android.content.SharedPreferences$Editor remove(java.lang.String)
android.content.SharedPreferences$Editor clear()
android.app.ContextImpl$SharedPreferencesImpl$MemoryCommitResult commitToMemory()
void <init>(android.app.ContextImpl$SharedPreferencesImpl$EditorImpl,android.app.ContextImpl$SharedPreferencesImpl$MemoryCommitResult)
void <init>(android.app.ContextImpl$SharedPreferencesImpl$EditorImpl,java.lang.Runnable)
void access$100(android.app.ContextImpl$SharedPreferencesImpl,android.app.ContextImpl$SharedPreferencesImpl$MemoryCommitResult,java.lang.Runnable)
void notifyListeners(android.app.ContextImpl$SharedPreferencesImpl$MemoryCommitResult)
void <init>(android.app.ContextImpl$1)
int access$300(android.app.ContextImpl$SharedPreferencesImpl)
java.util.Map access$400(android.app.ContextImpl$SharedPreferencesImpl)
void <init>(java.util.Map)
java.util.Map access$402(android.app.ContextImpl$SharedPreferencesImpl,java.util.Map)
int access$308(android.app.ContextImpl$SharedPreferencesImpl)
java.util.WeakHashMap access$500(android.app.ContextImpl$SharedPreferencesImpl)
void <init>(java.util.Collection)
void await()
boolean commit()
void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)
void access$600(android.app.ContextImpl$SharedPreferencesImpl$EditorImpl,android.app.ContextImpl$SharedPreferencesImpl$MemoryCommitResult)
android.graphics.drawable.Drawable loadThumbnail(android.content.pm.PackageManager)
java.lang.CharSequence loadAuthor(android.content.pm.PackageManager)
java.lang.CharSequence loadDescription(android.content.pm.PackageManager)
android.app.WallpaperInfo createFromParcel(android.os.Parcel)
android.app.WallpaperInfo[] newArray(int)
void instrumentationStatus(android.content.ComponentName,int,android.os.Bundle)
void instrumentationFinished(android.content.ComponentName,int,android.os.Bundle)
void <init>(java.lang.String,int,java.lang.String[])
void writeToParcel(android.content.ComponentName,android.os.Parcel)
android.content.ComponentName readFromParcel(android.os.Parcel)
void <init>(java.lang.Runnable)
void waitForComplete()
void <init>(android.app.LoadedApk$ReceiverDispatcher)
void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean)
void setExtrasClassLoader(java.lang.ClassLoader)
void setClassLoader(java.lang.ClassLoader)
void setOrderedHint(boolean)
void setResult(int,java.lang.String,android.os.Bundle)
void clearAbortBroadcast()
void setInitialStickyHint(boolean)
boolean onException(java.lang.Object,java.lang.Throwable)
java.lang.String getResultData()
android.os.Bundle getResultExtras(boolean)
boolean getAbortBroadcast()
android.content.Intent access$102(android.app.LoadedApk$ReceiverDispatcher$Args,android.content.Intent)
int access$202(android.app.LoadedApk$ReceiverDispatcher$Args,int)
java.lang.String access$302(android.app.LoadedApk$ReceiverDispatcher$Args,java.lang.String)
android.os.Bundle access$402(android.app.LoadedApk$ReceiverDispatcher$Args,android.os.Bundle)
boolean access$502(android.app.LoadedApk$ReceiverDispatcher$Args,boolean)
boolean access$602(android.app.LoadedApk$ReceiverDispatcher$Args,boolean)
int access$200(android.app.LoadedApk$ReceiverDispatcher$Args)
java.lang.String access$300(android.app.LoadedApk$ReceiverDispatcher$Args)
android.os.Bundle access$400(android.app.LoadedApk$ReceiverDispatcher$Args)
void writeMap(java.util.Map)
void writeFileDescriptor(java.io.FileDescriptor)
void <init>(android.app.SearchDialog)
void beforeTextChanged(java.lang.CharSequence,int,int,int)
android.app.SearchableInfo access$000(android.app.SearchDialog)
android.app.SearchDialog$SearchAutoComplete access$100(android.app.SearchDialog)
boolean isPerformingCompletion()
java.lang.String access$202(android.app.SearchDialog,java.lang.String)
void access$300(android.app.SearchDialog)
boolean access$500(android.app.SearchDialog)
java.lang.String access$600(android.app.SearchDialog)
java.lang.String access$200(android.app.SearchDialog)
android.os.Bundle access$700(android.app.SearchDialog)
void access$800(android.app.SearchDialog,boolean)
boolean autoUrlDetect()
int getImeOptions()
int access$900(android.app.SearchDialog)
int access$902(android.app.SearchDialog,int)
void setImeOptions(int)
void setInputType(int)
void afterTextChanged(android.text.Editable)
void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)
void setButton(int,java.lang.CharSequence,android.os.Message)
void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)
void setButton(java.lang.CharSequence,android.os.Message)
void setButton2(java.lang.CharSequence,android.os.Message)
void setButton3(java.lang.CharSequence,android.os.Message)
void setButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)
void setButton2(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)
void setButton3(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)
com.android.internal.app.AlertController access$000(android.app.AlertDialog)
void <init>(android.app.PendingIntent,android.app.PendingIntent$OnFinished,android.os.Handler)
void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)
void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)
void setDiskWriteResult(boolean)
void <init>(android.app.NativeActivity)
int access$000(android.app.NativeActivity)
void access$100(android.app.NativeActivity,int,int,boolean)
void <init>(android.app.Instrumentation,java.lang.String)
void onStart()
void sendStatus(int,android.os.Bundle)
void endPerformanceSnapshot()
void putAll(android.os.Bundle)
void finishInstrumentation(int,android.os.Bundle)
void finish(int,android.os.Bundle)
void setAutomaticPerformanceSnapshots()
boolean isProfiling()
void beginSnapshot(java.lang.String)
void startPerformanceSnapshot()
android.os.Bundle endSnapshot()
android.content.ComponentName getComponentName()
android.content.Context getTargetContext()
java.lang.String getProfileFilePath()
void startMethodTracing(java.lang.String,int)
void startProfiling()
void stopProfiling()
void addIdleHandler(android.os.MessageQueue$IdleHandler)
void <init>(android.app.Instrumentation$1)
void waitForIdle(java.lang.Runnable)
void validateNotAppThread()
void waitForIdle()
void waitForIdleSync()
void runOnMainSync(java.lang.Runnable)
java.lang.String getProcessName()
android.app.Activity startActivitySync(android.content.Intent)
void addMonitor(android.app.Instrumentation$ActivityMonitor)
void <init>(android.content.IntentFilter,android.app.Instrumentation$ActivityResult,boolean)
android.app.Instrumentation$ActivityMonitor addMonitor(android.content.IntentFilter,android.app.Instrumentation$ActivityResult,boolean)
void <init>(java.lang.String,android.app.Instrumentation$ActivityResult,boolean)
android.app.Instrumentation$ActivityMonitor addMonitor(java.lang.String,android.app.Instrumentation$ActivityResult,boolean)
int getHits()
boolean checkMonitorHit(android.app.Instrumentation$ActivityMonitor,int)
android.app.Activity waitForActivity()
android.app.Activity waitForMonitor(android.app.Instrumentation$ActivityMonitor)
android.app.Activity waitForActivityWithTimeout(long)
android.app.Activity waitForMonitorWithTimeout(android.app.Instrumentation$ActivityMonitor,long)
void removeMonitor(android.app.Instrumentation$ActivityMonitor)
void <init>(android.app.Instrumentation,android.app.Activity,int,int)
boolean invokeMenuActionSync(android.app.Activity,int,int)
void sendKeySync(android.view.KeyEvent)
boolean invokeContextMenuAction(android.app.Activity,int,int)
void sendStringSync(java.lang.String)
void sendKeyDownUpSync(int)
void sendCharacterSync(int)
void sendPointerSync(android.view.MotionEvent)
void sendTrackballEventSync(android.view.MotionEvent)
android.app.Application newApplication(java.lang.Class,android.content.Context)
android.app.Application newApplication(java.lang.ClassLoader,java.lang.String,android.content.Context)
void attach(android.content.Context)
void callApplicationOnCreate(android.app.Application)
void attach(android.content.Context,android.app.ActivityThread,android.app.Instrumentation,android.os.IBinder,android.app.Application,android.content.Intent,android.content.pm.ActivityInfo,java.lang.CharSequence,android.app.Activity,java.lang.String,java.lang.Object,android.content.res.Configuration)
android.app.Activity newActivity(java.lang.Class,android.content.Context,android.os.IBinder,android.app.Application,android.content.Intent,android.content.pm.ActivityInfo,java.lang.CharSequence,android.app.Activity,java.lang.String,java.lang.Object)
android.app.Activity newActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)
boolean filterEquals(android.content.Intent)
void <init>(android.app.Instrumentation,android.app.Instrumentation$ActivityWaiter)
boolean match(android.content.Context,android.app.Activity,android.content.Intent)
void callActivityOnCreate(android.app.Activity,android.os.Bundle)
void callActivityOnDestroy(android.app.Activity)
void performRestoreInstanceState(android.os.Bundle)
void callActivityOnRestoreInstanceState(android.app.Activity,android.os.Bundle)
void onPostCreate(android.os.Bundle)
void callActivityOnPostCreate(android.app.Activity,android.os.Bundle)
void onNewIntent(android.content.Intent)
void callActivityOnNewIntent(android.app.Activity,android.content.Intent)
void callActivityOnStart(android.app.Activity)
void onRestart()
void callActivityOnRestart(android.app.Activity)
void callActivityOnResume(android.app.Activity)
void callActivityOnStop(android.app.Activity)
void performSaveInstanceState(android.os.Bundle)
void callActivityOnSaveInstanceState(android.app.Activity,android.os.Bundle)
void performPause()
void callActivityOnPause(android.app.Activity)
void performUserLeaving()
void callActivityOnUserLeaving(android.app.Activity)
void runFinalization()
void resetAllCounts()
java.util.ArrayList getIntegerArrayList(java.lang.String)
void putIntegerArrayList(java.lang.String,java.util.ArrayList)
void addValue(java.lang.String,int,android.os.Bundle)
int getGlobalAllocCount()
void putLong(java.lang.String,long)
int getGlobalFreedCount()
int getGlobalFreedSize()
int getGlobalGcInvocationCount()
android.os.Bundle getAllocCounts()
int getBinderSentTransactions()
int getBinderReceivedTransactions()
android.os.Bundle getBinderCounts()
boolean isBlocking()
android.app.Instrumentation$ActivityResult getResult()
int startActivity(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean)
void checkStartActivityResult(int,java.lang.Object)
android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int)
void init(android.app.ActivityThread,android.content.Context,android.content.Context,android.content.ComponentName,android.app.IInstrumentationWatcher)
boolean access$100(android.app.Instrumentation)
java.lang.Object access$200(android.app.Instrumentation)
java.util.List access$300(android.app.Instrumentation)
android.app.Application getApplication()
android.content.Context getApplicationContext()
java.lang.String getResDir()
java.lang.String getPackageResourcePath()
java.lang.String getAppDir()
java.lang.String getPackageCodePath()
java.io.File makeBackupFile(java.io.File)
java.io.File getPreferencesDir()
java.io.File makeFilename(java.io.File,java.lang.String)
java.io.File getSharedPrefsFile(java.lang.String)
boolean hasFileChangedUnexpectedly()
void <init>(java.io.File,int,java.util.Map)
boolean isLoaded()
boolean getFileStatus(java.lang.String,android.os.FileUtils$FileStatus)
void replace(java.util.Map,android.os.FileUtils$FileStatus)
android.content.SharedPreferences getSharedPreferences(java.lang.String,int)
java.io.File getDataDirFile()
java.io.File getFilesDir()
java.io.FileInputStream openFileInput(java.lang.String)
void setFilePermissionsFromMode(java.lang.String,int,int)
java.io.FileOutputStream openFileOutput(java.lang.String,int)
boolean deleteFile(java.lang.String)
java.io.File getExternalStorageAppFilesDirectory(java.lang.String)
java.io.File getExternalStorageAndroidDataDir()
java.io.File getExternalFilesDir(java.lang.String)
java.io.File getCacheDir()
java.io.File getExternalStorageAppCacheDirectory(java.lang.String)
java.io.File getExternalCacheDir()
java.io.File getFileStreamPath(java.lang.String)
java.lang.String[] list()
java.lang.String[] fileList()
java.io.File validateFilePath(java.lang.String,boolean)
android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)
android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)
boolean deleteDatabase(java.lang.String)
java.io.File getDatabasePath(java.lang.String)
java.io.File getDatabasesDir()
java.lang.String[] databaseList()
android.app.WallpaperManager getWallpaperManager()
android.graphics.drawable.Drawable getWallpaper()
android.graphics.drawable.Drawable peekWallpaper()
int getWallpaperDesiredMinimumWidth()
int getWallpaperDesiredMinimumHeight()
void setWallpaper(android.graphics.Bitmap)
void setWallpaper(java.io.InputStream)
void clearWallpaper()
android.app.Instrumentation getInstrumentation()
android.content.Context getOuterContext()
android.app.ActivityThread$ApplicationThread getApplicationThread()
int startActivityIntentSender(android.app.IApplicationThread,android.content.IntentSender,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int)
void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)
int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean)
void sendOrderedBroadcast(android.content.Intent,java.lang.String)
android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)
void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)
android.content.IIntentReceiver getIIntentReceiver()
void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)
android.content.Intent setDataAndType(android.net.Uri,java.lang.String)
void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent)
void removeStickyBroadcast(android.content.Intent)
android.content.Intent registerReceiverInternal(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,android.content.Context)
android.content.Intent registerReceiver(android.app.IApplicationThread,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String)
android.content.IIntentReceiver forgetReceiverDispatcher(android.content.Context,android.content.BroadcastReceiver)
void unregisterReceiver(android.content.IIntentReceiver)
android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String)
int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String)
boolean stopService(android.content.Intent)
android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection,android.content.Context,android.os.Handler,int)
android.os.IBinder getActivityToken()
int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int)
boolean bindService(android.content.Intent,android.content.ServiceConnection,int)
android.app.IServiceConnection forgetServiceDispatcher(android.content.Context,android.content.ServiceConnection)
boolean unbindService(android.app.IServiceConnection)
void unbindService(android.content.ServiceConnection)
boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher)
boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)
android.app.ActivityManager getActivityManager()
android.app.AlarmManager getAlarmManager()
android.accounts.AccountManager getAccountManager()
android.os.PowerManager getPowerManager()
android.net.ConnectivityManager getConnectivityManager()
android.net.ThrottleManager getThrottleManager()
android.net.wifi.WifiManager getWifiManager()
android.app.NotificationManager getNotificationManager()
android.location.LocationManager getLocationManager()
android.app.SearchManager getSearchManager()
android.hardware.SensorManager getSensorManager()
android.os.storage.StorageManager getStorageManager()
android.hardware.usb.UsbManager getUsbManager()
android.os.Vibrator getVibrator()
android.telephony.TelephonyManager getTelephonyManager()
android.text.ClipboardManager getClipboardManager()
android.os.DropBoxManager getDropBoxManager()
android.app.UiModeManager getUiModeManager()
android.app.DownloadManager getDownloadManager()
android.nfc.NfcManager getNfcManager()
android.accounts.IAccountManager asInterface(android.os.IBinder)
void <init>(android.content.Context,android.accounts.IAccountManager)
android.app.IAlarmManager asInterface(android.os.IBinder)
void <init>(android.app.IAlarmManager)
android.os.IPowerManager asInterface(android.os.IBinder)
void <init>(android.os.IPowerManager,android.os.Handler)
void <init>(android.net.IConnectivityManager)
android.net.IThrottleManager asInterface(android.os.IBinder)
void <init>(android.net.IThrottleManager)
android.net.wifi.IWifiManager asInterface(android.os.IBinder)
void <init>(android.net.wifi.IWifiManager,android.os.Handler)
void <init>(com.android.internal.os.IDropBoxManagerService)
android.os.DropBoxManager createDropBoxManager()
android.app.admin.DevicePolicyManager create(android.content.Context,android.os.Handler)
void <init>(android.content.ContentResolver,java.lang.String)
void enforce(java.lang.String,int,boolean,int,java.lang.String)
void enforcePermission(java.lang.String,int,int,java.lang.String)
void grantUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int)
void grantUriPermission(java.lang.String,android.net.Uri,int)
void revokeUriPermission(android.app.IApplicationThread,android.net.Uri,int)
void revokeUriPermission(android.net.Uri,int)
int checkUriPermission(android.net.Uri,int,int,int)
int checkCallingUriPermission(android.net.Uri,int)
int checkCallingOrSelfUriPermission(android.net.Uri,int)
int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)
java.lang.String uriModeFlagToString(int)
void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)
void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)
void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)
void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)
void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)
void <init>(android.app.ContextImpl)
android.app.LoadedApk getPackageInfo(java.lang.String,int)
void init(android.app.LoadedApk,android.os.IBinder,android.app.ActivityThread,android.content.res.Resources)
android.content.Context createPackageContext(java.lang.String,int)
java.io.File getDir(java.lang.String,int)
void init(android.content.res.Resources,android.app.ActivityThread)
android.app.ContextImpl createSystemContext(android.app.ActivityThread)
void init(android.app.LoadedApk,android.os.IBinder,android.app.ActivityThread)
android.content.res.Resources getResources(android.app.ActivityThread)
android.content.res.CompatibilityInfo copy()
android.content.res.Resources getTopLevelResources(java.lang.String,android.content.res.CompatibilityInfo)
void setActivityToken(android.os.IBinder)
void scheduleContextCleanup(android.app.ContextImpl,java.lang.String,java.lang.String)
void scheduleFinalCleanup(java.lang.String,java.lang.String)
void removeContextRegistrations(android.content.Context,java.lang.String,java.lang.String)
void performFinalCleanup(java.lang.String,java.lang.String)
android.content.Context getReceiverRestrictedContext()
void setOuterContext(android.content.Context)
java.io.File access$000(java.io.File)
void access$900(java.lang.String,int,int)
void <init>(android.app.Activity,boolean)
void dispatchCreate(android.os.Bundle)
void dispatchResume()
void onSaveInstanceState(android.os.Bundle)
android.os.Bundle saveInstanceState()
void dispatchPause(boolean)
void dispatchStop()
void dispatchDestroy(boolean)
java.util.HashMap dispatchRetainNonConfigurationInstance()
java.util.HashMap onRetainNonConfigurationChildInstances()
android.app.Activity getCurrentActivity()
android.app.LocalActivityManager getLocalActivityManager()
android.app.Activity getActivity(java.lang.String)
void onActivityResult(int,int,android.content.Intent)
void dispatchActivityResult(java.lang.String,int,int,android.content.Intent)
java.lang.String getSuggestAuthority()
java.lang.String getSuggestPackage()
android.content.ComponentName getSearchActivity()
boolean useBadgeLabel()
boolean useBadgeIcon()
boolean shouldRewriteQueryFromData()
boolean shouldRewriteQueryFromText()
int getSettingsDescriptionId()
java.lang.String getSuggestPath()
java.lang.String getSuggestSelection()
java.lang.String getSuggestIntentAction()
java.lang.String getSuggestIntentData()
int getSuggestThreshold()
android.content.Context createActivityContext(android.content.Context,android.content.ComponentName)
android.content.Context getActivityContext(android.content.Context)
android.content.Context getProviderContext(android.content.Context,android.content.Context)
void <init>(android.content.Context,android.util.AttributeSet,android.content.ComponentName)
android.app.SearchableInfo$ActionKeyInfo findActionKey(int)
void addActionKey(android.app.SearchableInfo$ActionKeyInfo)
android.app.SearchableInfo getActivityMetaData(android.content.Context,org.xmlpull.v1.XmlPullParser,android.content.ComponentName)
android.app.SearchableInfo getActivityMetaData(android.content.Context,android.content.pm.ActivityInfo)
int getLabelId()
int getHintId()
int getIconId()
boolean getVoiceSearchEnabled()
boolean getVoiceSearchLaunchWebSearch()
boolean getVoiceSearchLaunchRecognizer()
int getVoiceLanguageModeId()
int getVoicePromptTextId()
int getVoiceLanguageId()
int getVoiceMaxResults()
int getSearchButtonText()
boolean shouldIncludeInGlobalSearch()
boolean queryAfterZeroResults()
void <init>(android.os.Parcel,android.app.SearchableInfo$1)
void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)
void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)
java.util.Map getAll()
boolean contains(java.lang.String)
void <init>(android.app.ContextImpl$SharedPreferencesImpl,android.app.ContextImpl$SharedPreferencesImpl$MemoryCommitResult,java.lang.Runnable)
void enqueueDiskWrite(android.app.ContextImpl$SharedPreferencesImpl$MemoryCommitResult,java.lang.Runnable)
java.io.FileOutputStream createFileOutputStream(java.io.File)
void writeToFile(android.app.ContextImpl$SharedPreferencesImpl$MemoryCommitResult)
java.lang.Object access$700(android.app.ContextImpl$SharedPreferencesImpl)
void access$800(android.app.ContextImpl$SharedPreferencesImpl,android.app.ContextImpl$SharedPreferencesImpl$MemoryCommitResult)
int access$310(android.app.ContextImpl$SharedPreferencesImpl)
android.app.INotificationManager asInterface(android.os.IBinder)
void enqueueNotification(java.lang.String,int,android.app.Notification,int[])
void cancelNotification(java.lang.String,int)
void cancelAllNotifications(java.lang.String)
android.app.ITransientNotification asInterface(android.os.IBinder)
void enqueueToast(java.lang.String,android.app.ITransientNotification,int)
void cancelToast(java.lang.String,android.app.ITransientNotification)
void enqueueNotificationWithTag(java.lang.String,java.lang.String,int,android.app.Notification,int[])
void cancelNotificationWithTag(java.lang.String,java.lang.String,int)
android.app.ActivityManager$RecentTaskInfo createFromParcel(android.os.Parcel)
android.app.ActivityManager$RecentTaskInfo[] newArray(int)
android.app.ActivityManager$RunningTaskInfo createFromParcel(android.os.Parcel)
android.app.ActivityManager$RunningTaskInfo[] newArray(int)
boolean testIsSystemReady()
boolean isSystemReady()
android.content.IIntentSender getTarget()
void noteWakeupAlarm(android.content.IIntentSender)
void noteWakeupAlarm(android.app.PendingIntent)
android.app.IActivityManager$WaitResult startActivityAndWait(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean)
int startActivityWithConfig(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean,android.content.res.Configuration)
boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent)
boolean finishActivity(android.os.IBinder,int,android.content.Intent)
void finishSubActivity(android.os.IBinder,java.lang.String,int)
boolean willActivityBeVisible(android.os.IBinder)
void attachApplication(android.app.IApplicationThread)
void activityPaused(android.os.IBinder,android.os.Bundle)
void activityStopped(android.os.IBinder,android.graphics.Bitmap,java.lang.CharSequence)
void activityDestroyed(android.os.IBinder)
java.lang.String getCallingPackage(android.os.IBinder)
android.content.ComponentName getCallingActivity(android.os.IBinder)
android.app.IThumbnailReceiver asInterface(android.os.IBinder)
void moveTaskToBack(int)
boolean moveActivityTaskToBack(android.os.IBinder,boolean)
void moveTaskBackwards(int)
int getTaskForActivity(android.os.IBinder,boolean)
void finishOtherInstances(android.os.IBinder,android.content.ComponentName)
void reportThumbnail(android.os.IBinder,android.graphics.Bitmap,java.lang.CharSequence)
android.app.IActivityManager$ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String)
void publishContentProviders(android.app.IApplicationThread,java.util.List)
void removeContentProvider(android.app.IApplicationThread,java.lang.String)
void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)
boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)
void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,boolean)
void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)
void unbindFinished(android.os.IBinder,android.content.Intent,boolean)
void serviceDoneExecuting(android.os.IBinder,int,int,int)
void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)
void setRequestedOrientation(android.os.IBinder,int)
int getRequestedOrientation(android.os.IBinder)
android.content.ComponentName getActivityClassForToken(android.os.IBinder)
java.lang.String getPackageForToken(android.os.IBinder)
android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent,java.lang.String,int)
android.content.IIntentSender asInterface(android.os.IBinder)
void cancelIntentSender(android.content.IIntentSender)
java.lang.String getPackageForIntentSender(android.content.IIntentSender)
void setProcessLimit(int)
int getProcessLimit()
void setProcessForeground(android.os.IBinder,int,boolean)
android.content.pm.IPackageDataObserver asInterface(android.os.IBinder)
void showWaitingForDebugger(android.app.IApplicationThread,boolean)
void unhandledBack()
android.os.ParcelFileDescriptor openContentUri(android.net.Uri)
void goingToSleep()
void wakingUp()
void setDebugApp(java.lang.String,boolean,boolean)
void setAlwaysFinish(boolean)
android.app.IActivityController asInterface(android.os.IBinder)
void setActivityController(android.app.IActivityController)
void enterSafeMode()
boolean killPids(int[],java.lang.String)
void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)
void signalPersistentProcesses(int)
boolean profileControl(java.lang.String,boolean,java.lang.String,android.os.ParcelFileDescriptor)
void stopAppSwitches()
void resumeAppSwitches()
android.os.IBinder peekService(android.content.Intent,java.lang.String)
boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)
void backupAgentCreated(java.lang.String,android.os.IBinder)
void unbindBackupAgent(android.content.pm.ApplicationInfo)
android.app.IActivityWatcher asInterface(android.os.IBinder)
void registerActivityWatcher(android.app.IActivityWatcher)
void unregisterActivityWatcher(android.app.IActivityWatcher)
int startActivityInPackage(int,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,boolean)
void killApplicationWithUid(java.lang.String,int)
void killApplicationProcess(java.lang.String,int)
void overridePendingTransition(android.os.IBinder,java.lang.String,int,int)
void crashApplication(int,int,java.lang.String,java.lang.String)
java.lang.String getProviderMimeType(android.net.Uri)
android.os.IBinder newUriPermissionOwner(java.lang.String)
void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int)
void revokeUriPermissionFromOwner(android.os.IBinder,android.net.Uri,int)
android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)
java.util.List getSearchablesInGlobalSearch()
android.content.ComponentName getGlobalSearchActivity()
android.content.ComponentName getWebSearchActivity()
void <init>(java.lang.Exception)
void setRepeating(int,long,long,android.app.PendingIntent)
void setInexactRepeating(int,long,long,android.app.PendingIntent)
void remove(android.app.PendingIntent)
void <init>(android.app.SuggestionsAdapter)
android.app.SearchDialog access$000(android.app.SuggestionsAdapter)
void setWorking(boolean)
android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel)
android.content.IntentFilter getFilter()
android.app.Activity getLastActivity()
int match(android.content.ContentResolver,android.content.Intent,boolean,java.lang.String)
void <init>(android.app.ActivityThread,java.lang.String,android.content.IContentProvider,android.content.ContentProvider)
void removeDeadProvider(java.lang.String,android.content.IContentProvider)
java.lang.String currentPackageName()
android.app.Application currentApplication()
android.content.pm.IPackageManager asInterface(android.os.IBinder)
android.util.DisplayMetrics getDisplayMetricsLocked(boolean)
void <init>(java.lang.String,float)
boolean isUpToDate()
int addAssetPath(java.lang.String)
void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration,android.content.res.CompatibilityInfo)
boolean isSecurityViolation()
android.app.LoadedApk getPackageInfo(android.content.pm.ApplicationInfo,int)
android.app.LoadedApk getPackageInfo(android.content.pm.ApplicationInfo,java.lang.ClassLoader,boolean,boolean)
android.app.LoadedApk getPackageInfoNoCheck(android.content.pm.ApplicationInfo)
void <init>(android.app.ActivityThread,android.content.pm.ApplicationInfo,android.app.ActivityThread,java.lang.ClassLoader,boolean,boolean)
void <init>(android.app.ActivityThread,java.lang.String,android.content.Context,android.content.pm.ApplicationInfo)
void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)
void installSystemApplicationInfo(android.content.pm.ApplicationInfo)
void startJitCompilation()
void removeIdleHandler(android.os.MessageQueue$IdleHandler)
void unscheduleGcIdler()
void doGcIfNeeded()
void registerOnActivityPausedListener(android.app.Activity,android.app.OnActivityPausedListener)
void unregisterOnActivityPausedListener(android.app.Activity,android.app.OnActivityPausedListener)
android.content.pm.ActivityInfo resolveActivityInfo(android.content.Intent)
android.app.Activity performLaunchActivity(android.app.ActivityThread$ActivityClientRecord,android.content.Intent)
android.app.Activity startActivityNow(android.app.Activity,java.lang.String,android.content.Intent,android.content.pm.ActivityInfo,android.os.IBinder,android.os.Bundle,java.lang.Object)
android.app.Activity getActivity(android.os.IBinder)
void <init>(java.lang.String,int,int,android.content.Intent)
void sendActivityResult(android.os.IBinder,java.lang.String,int,int,android.content.Intent)
void queueOrSendMessage(int,java.lang.Object,int,int)
void queueOrSendMessage(int,java.lang.Object)
void queueOrSendMessage(int,java.lang.Object,int)
android.content.ComponentName resolveActivity(android.content.pm.PackageManager)
android.app.Application makeApplication(boolean,android.app.Instrumentation)
void <init>(android.content.res.Configuration)
void attach(android.content.Context,android.app.ActivityThread,android.app.Instrumentation,android.os.IBinder,int,android.app.Application,android.content.Intent,android.content.pm.ActivityInfo,java.lang.CharSequence,android.app.Activity,java.lang.String,java.lang.Object,java.util.HashMap,android.content.res.Configuration)
int getThemeResource()
void performStart()
void handleResumeActivity(android.os.IBinder,boolean,boolean)
void handleLaunchActivity(android.app.ActivityThread$ActivityClientRecord,android.content.Intent)
void deliverNewIntents(android.app.ActivityThread$ActivityClientRecord,java.util.List)
void performNewIntents(android.os.IBinder,java.util.List)
void handleNewIntent(android.app.ActivityThread$NewIntentData)
android.content.Context getBaseContext()
void handleReceiver(android.app.ActivityThread$ReceiverData)
android.os.IBinder onBind()
void handleCreateBackupAgent(android.app.ActivityThread$CreateBackupAgentData)
void handleDestroyBackupAgent(android.app.ActivityThread$CreateBackupAgentData)
void attach(android.content.Context,android.app.ActivityThread,java.lang.String,android.os.IBinder,android.app.Application,java.lang.Object)
void handleCreateService(android.app.ActivityThread$CreateServiceData)
void onRebind(android.content.Intent)
void handleBindService(android.app.ActivityThread$BindServiceData)
boolean onUnbind(android.content.Intent)
void handleUnbindService(android.app.ActivityThread$BindServiceData)
void handleDumpService(android.app.ActivityThread$DumpServiceInfo)
void handleServiceArgs(android.app.ActivityThread$ServiceArgsData)
void handleStopService(android.os.IBinder)
void deliverResults(android.app.ActivityThread$ActivityClientRecord,java.util.List)
void performResume()
android.app.ActivityThread$ActivityClientRecord performResumeActivity(android.os.IBinder,boolean)
void performConfigurationChanged(android.content.ComponentCallbacks,android.content.res.Configuration)
void makeVisible()
int getDimensionPixelSize(int)
boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas)
android.graphics.Bitmap createThumbnailBitmap(android.app.ActivityThread$ActivityClientRecord)
void performUserLeavingActivity(android.app.ActivityThread$ActivityClientRecord)
android.os.Bundle performPauseActivity(android.os.IBinder,boolean,boolean)
void handlePauseActivity(android.os.IBinder,boolean,boolean,int)
android.os.Bundle performPauseActivity(android.app.ActivityThread$ActivityClientRecord,boolean,boolean)
void onPaused(android.app.Activity)
void performStopActivityInner(android.app.ActivityThread$ActivityClientRecord,android.app.ActivityThread$StopInfo,boolean)
void performStopActivity(android.os.IBinder)
java.lang.CharSequence onCreateDescription()
void performStop()
void updateVisibility(android.app.ActivityThread$ActivityClientRecord,boolean)
void handleStopActivity(android.os.IBinder,boolean,int)
void performRestart()
void performRestartActivity(android.os.IBinder)
void handleWindowVisibility(android.os.IBinder,boolean)
void handleSendResult(android.app.ActivityThread$ResultData)
android.app.ActivityThread$ActivityClientRecord performDestroyActivity(android.os.IBinder,boolean,int,boolean)
android.app.ActivityThread$ActivityClientRecord performDestroyActivity(android.os.IBinder,boolean)
java.lang.String safeToComponentShortString(android.content.Intent)
java.lang.Object onRetainNonConfigurationInstance()
void closeAllPanels()
void handleDestroyActivity(android.os.IBinder,boolean,int,boolean)
boolean isOtherSeqNewer(android.content.res.Configuration)
void handleConfigurationChanged(android.content.res.Configuration)
void handleRelaunchActivity(android.app.ActivityThread$ActivityClientRecord,int)
void handleRequestThumbnail(android.os.IBinder)
java.util.ArrayList collectComponentCallbacksLocked(boolean,android.content.res.Configuration)
java.lang.String getLocalClassName()
boolean applyConfigurationToResourcesLocked(android.content.res.Configuration)
int updateFrom(android.content.res.Configuration)
void setDefault(java.util.Locale)
void updateSystemConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)
void handleActivityConfigurationChanged(android.os.IBinder)
void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)
void handleProfilerControl(boolean,android.app.ActivityThread$ProfilerControlData)
void handleDispatchPackageBroadcast(int,java.lang.String[])
void onLowMemory()
int releaseMemory()
void freeCaches()
void handleLowMemory()
boolean conditionallyEnableDebugLogging()
void setDefaultDensity(int)
void changeDebugPort(int)
void waitForDebugger()
void installContentProviders(android.content.Context,java.util.List)
void handleBindApplication(android.app.ActivityThread$AppBindData)
android.content.IContentProvider installProvider(android.content.Context,android.content.IContentProvider,android.content.pm.ProviderInfo,boolean)
void <init>(android.content.pm.ProviderInfo)
android.content.IContentProvider getExistingProvider(android.content.Context,java.lang.String)
android.content.IContentProvider getProvider(android.content.Context,java.lang.String)
java.lang.String removeProviderLocked(android.content.IContentProvider)
void completeRemoveProvider(android.content.IContentProvider)
boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)
void removeDeadProviderLocked(java.lang.String,android.content.IContentProvider)
android.content.IContentProvider getIContentProvider()
void attachInfo(android.content.Context,android.content.pm.ProviderInfo)
void linkToDeath(android.os.IBinder$DeathRecipient,int)
void attach(boolean)
android.app.ActivityThread systemMain()
void installSystemProviders(java.util.List)
void prepareMainLooper()
void loop()
void access$200(android.app.ActivityThread,int,java.lang.Object,int,int)
void access$300(android.app.ActivityThread,int,java.lang.Object)
void access$400(android.app.ActivityThread,int,java.lang.Object,int)
void access$1500(android.app.ActivityThread,android.app.ActivityThread$ActivityClientRecord,android.content.Intent)
void access$1600(android.app.ActivityThread,android.app.ActivityThread$ActivityClientRecord,int)
void access$1700(android.app.ActivityThread,android.os.IBinder,boolean,boolean,int)
void access$1800(android.app.ActivityThread,android.os.IBinder,boolean,int)
void access$1900(android.app.ActivityThread,android.os.IBinder,boolean)
void access$2000(android.app.ActivityThread,android.app.ActivityThread$ResultData)
void access$2100(android.app.ActivityThread,android.os.IBinder,boolean,int,boolean)
void access$2200(android.app.ActivityThread,android.app.ActivityThread$AppBindData)
void access$2300(android.app.ActivityThread,android.app.ActivityThread$NewIntentData)
void access$2400(android.app.ActivityThread,android.app.ActivityThread$ReceiverData)
void access$2500(android.app.ActivityThread,android.app.ActivityThread$CreateServiceData)
void access$2600(android.app.ActivityThread,android.app.ActivityThread$BindServiceData)
void access$2700(android.app.ActivityThread,android.app.ActivityThread$BindServiceData)
void access$2800(android.app.ActivityThread,android.app.ActivityThread$ServiceArgsData)
void access$2900(android.app.ActivityThread,android.os.IBinder)
void access$3000(android.app.ActivityThread,android.os.IBinder)
void access$3100(android.app.ActivityThread,android.app.ActivityThread$DumpServiceInfo)
void access$3200(android.app.ActivityThread,android.app.ActivityThread$CreateBackupAgentData)
void access$3300(android.app.ActivityThread,android.app.ActivityThread$CreateBackupAgentData)
void onTerminate()
void <init>(android.app.Dialog)
void access$000(android.app.Dialog)
void <init>(android.content.IIntentSender)
android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)
android.content.IntentSender getIntentSender()
void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)
void send()
void send(int,android.app.PendingIntent$OnFinished,android.os.Handler)
int send(int,android.content.Intent,java.lang.String,android.content.IIntentReceiver)
void <init>(android.content.pm.ApplicationInfo)
java.lang.String[] getLibrariesFor(java.lang.String)
java.lang.String combineLibs(java.lang.String[],java.lang.String[])
android.app.ApplicationLoaders getDefault()
java.lang.ClassLoader getClassLoader(java.lang.String,java.lang.String,java.lang.ClassLoader)
void initializeJavaContextClassLoader()
void <init>(android.app.LoadedApk$1)
void setContextClassLoader(java.lang.ClassLoader)
java.lang.String getDataDir()
android.content.res.AssetManager getAssets(android.app.ActivityThread)
android.content.BroadcastReceiver getIntentReceiver()
android.app.IntentReceiverLeaked getLocation()
android.content.ServiceConnection getServiceConnection()
android.app.ServiceConnectionLeaked getLocation()
android.app.IServiceConnection getIServiceConnection()
void doForget()
void validate(android.content.Context,android.os.Handler)
boolean getDebugUnregister()
void setUnregisterLocation(java.lang.RuntimeException)
java.lang.RuntimeException getUnregisterLocation()
void <init>(android.content.ServiceConnection,android.content.Context,android.os.Handler,int)
void setUnbindLocation(java.lang.RuntimeException)
java.lang.RuntimeException getUnbindLocation()
void <init>(android.app.KeyguardManager,android.app.KeyguardManager$OnKeyguardExitResult)
void <init>(android.content.Context,int,android.database.Cursor,boolean)
android.widget.Filter getFilter()
void setDelayer(android.widget.Filter$Delayer)
void <init>(android.content.Context,android.app.SearchDialog,android.app.SearchableInfo,java.util.WeakHashMap)
boolean hasStableIds()
android.database.Cursor getSuggestions(android.app.SearchableInfo,java.lang.String,int)
android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)
void changeCursor(android.database.Cursor)
void onDataSetChanged()
void updateSpinnerState(android.database.Cursor)
android.graphics.drawable.Drawable getItemBackground(int)
java.lang.String getStringOrNull(android.database.Cursor,int)
void setViewText(android.widget.TextView,java.lang.CharSequence)
java.lang.CharSequence formatUrl(java.lang.CharSequence)
android.graphics.drawable.Drawable getIcon1(android.database.Cursor)
void setViewDrawable(android.widget.ImageView,android.graphics.drawable.Drawable)
android.graphics.drawable.Drawable getIcon2(android.database.Cursor)
boolean resolveAttribute(int,android.util.TypedValue,boolean)
void <init>(java.lang.String,int,int,android.content.res.ColorStateList,android.content.res.ColorStateList)
void addState(int[],android.graphics.drawable.Drawable)
android.graphics.drawable.Drawable getDrawableFromResourceValue(java.lang.String)
android.graphics.drawable.Drawable getDefaultIcon1(android.database.Cursor)
java.lang.String getColumnString(android.database.Cursor,java.lang.String)
java.lang.CharSequence convertToString(android.database.Cursor)
android.graphics.drawable.Drawable checkIconCache(java.lang.String)
void storeInIconCache(java.lang.String,android.graphics.drawable.Drawable)
android.graphics.drawable.Drawable getDrawable(android.net.Uri)
android.content.ContentResolver$OpenResourceIdResult getResourceId(android.net.Uri)
android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)
android.graphics.drawable.Drawable newDrawable()
android.content.ComponentName unflattenFromString(java.lang.String)
android.graphics.drawable.Drawable getActivityIconWithCache(android.content.ComponentName)
void <init>(android.net.Uri)
android.app.DownloadManager$Request setDestinationUri(android.net.Uri)
void setDestinationFromBase(java.io.File,java.lang.String)
android.app.DownloadManager$Request setDestinationInExternalFilesDir(android.content.Context,java.lang.String,java.lang.String)
java.io.File getExternalStoragePublicDirectory(java.lang.String)
android.app.DownloadManager$Request setDestinationInExternalPublicDir(java.lang.String,java.lang.String)
android.net.Uri fromFile(java.io.File)
android.app.DownloadManager$Request addRequestHeader(java.lang.String,java.lang.String)
android.app.DownloadManager$Request setTitle(java.lang.CharSequence)
android.app.DownloadManager$Request setDescription(java.lang.CharSequence)
android.app.DownloadManager$Request setMimeType(java.lang.String)
android.app.DownloadManager$Request setShowRunningNotification(boolean)
android.app.DownloadManager$Request setAllowedNetworkTypes(int)
android.app.DownloadManager$Request setAllowedOverRoaming(boolean)
android.app.DownloadManager$Request setVisibleInDownloadsUi(boolean)
void encodeHttpHeaders(android.content.ContentValues)
void putIfNonNull(android.content.ContentValues,java.lang.String,java.lang.Object)
android.content.ContentValues toContentValues(java.lang.String)
long getPostingDelay(java.lang.CharSequence)
void setAccessAllDownloads(boolean)
long enqueue(android.app.DownloadManager$Request)
int markRowDeleted(long[])
int remove(long[])
void <init>(android.database.Cursor,android.net.Uri)
android.database.Cursor query(android.app.DownloadManager$Query)
android.net.Uri getDownloadUri(long)
android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)
android.os.ParcelFileDescriptor openDownloadedFile(long)
void putNull(java.lang.String)
void restartDownload(long[])
java.lang.String[] access$000()
java.util.Set access$100()
android.app.ISearchManager asInterface(android.os.IBinder)
void startGlobalSearch(java.lang.String,boolean,android.os.Bundle)
void ensureSearchDialog()
boolean show(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle)
void startSearch(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle,boolean)
void <init>(android.content.Context,android.app.SearchManager)
void setOnDismissListener(android.content.DialogInterface$OnDismissListener)
android.content.Intent putExtra(java.lang.String,android.os.Bundle)
void launchQuerySearch()
void triggerSearch(java.lang.String,android.content.ComponentName,android.os.Bundle)
void stopSearch()
boolean isShowing()
void setOnDismissListener(android.app.SearchManager$OnDismissListener)
void setOnCancelListener(android.app.SearchManager$OnCancelListener)
void onCancel()
void onDismiss()
void onDismiss(android.content.DialogInterface)
android.database.Cursor getSuggestions(android.app.SearchableInfo,java.lang.String)
android.net.Uri$Builder scheme(java.lang.String)
android.net.Uri$Builder authority(java.lang.String)
android.net.Uri$Builder query(java.lang.String)
android.net.Uri$Builder fragment(java.lang.String)
android.net.Uri$Builder appendEncodedPath(java.lang.String)
android.net.Uri$Builder appendPath(java.lang.String)
android.app.admin.IDevicePolicyManager asInterface(android.os.IBinder)
void setPasswordQuality(android.content.ComponentName,int)
void setPasswordMinimumLength(android.content.ComponentName,int)
boolean isActivePasswordSufficient()
int getCurrentFailedPasswordAttempts()
void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)
int getMaximumFailedPasswordsForWipe(android.content.ComponentName)
boolean resetPassword(java.lang.String,int)
void setMaximumTimeToLock(android.content.ComponentName,long)
long getMaximumTimeToLock(android.content.ComponentName)
void lockNow()
void wipeData(int)
void setActiveAdmin(android.content.ComponentName)
boolean isAdminActive(android.content.ComponentName)
java.util.List getActiveAdmins()
boolean packageHasActiveAdmins(java.lang.String)
void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback)
void removeActiveAdmin(android.content.ComponentName)
android.app.admin.DevicePolicyManager getManager(android.content.Context)
void <init>(android.content.Context,java.lang.Class)
android.content.ComponentName getWho(android.content.Context)
void onEnabled(android.content.Context,android.content.Intent)
java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)
void onDisabled(android.content.Context,android.content.Intent)
void onPasswordChanged(android.content.Context,android.content.Intent)
void onPasswordFailed(android.content.Context,android.content.Intent)
void onPasswordSucceeded(android.content.Context,android.content.Intent)
void putCharSequence(java.lang.String,java.lang.CharSequence)
java.lang.String getReceiverName()
android.content.pm.ActivityInfo getActivityInfo()
boolean usesPolicy(int)
java.lang.String getTagForPolicy(int)
java.util.ArrayList getUsedPolicies()
void writePoliciesToXml(org.xmlpull.v1.XmlSerializer)
void readPoliciesFromXml(org.xmlpull.v1.XmlPullParser)
void <init>(int,java.lang.String,int,int)
int getPasswordMaximumLength(int)
android.app.admin.DeviceAdminInfo getAdminInfo(android.content.ComponentName)
android.app.admin.DeviceAdminInfo createFromParcel(android.os.Parcel)
android.app.admin.DeviceAdminInfo[] newArray(int)
void setWallpaperComponent(android.content.ComponentName)
int getSelectedItemPosition()
long getSelectedItemId()
android.widget.ListAdapter getListAdapter()
void setCanceledOnTouchOutside(boolean)
void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
void addTextChangedListener(android.text.TextWatcher)
void createContentView()
boolean doShow(java.lang.String,boolean,android.content.ComponentName,android.os.Bundle)
void showDropDownAfterLayout()
boolean show(android.content.ComponentName,android.os.Bundle)
void setUserQuery(java.lang.String)
void updateUI()
void closeSuggestionsAdapter()
void invalidateSelf()
void putParcelable(java.lang.String,android.os.Parcelable)
android.os.Bundle onSaveInstanceState()
android.os.Parcelable getParcelable(java.lang.String)
void updateSearchButton()
void updateSearchAppIcon()
void updateSearchBadge()
void updateQueryHint()
void onConfigurationChanged()
void updateSearchAutoComplete()
void updateVoiceButton(boolean)
void setPrivateImeOptions(java.lang.String)
void setDropDownAnimationStyle(int)
void setDropDownDismissedOnCompletion(boolean)
void setForceIgnoreOutsideTouch(boolean)
boolean isBrowserSearch()
void setHint(java.lang.CharSequence)
void onFilterComplete(int)
boolean isPopupShowing()
boolean isOutOfBounds(android.view.View,android.view.MotionEvent)
java.lang.String getQueryActionMsg()
void launchQuerySearch(int,java.lang.String)
void updateWidgetState()
android.content.Intent createVoiceWebSearchIntent(android.content.Intent,android.app.SearchableInfo)
android.content.Intent createVoiceAppSearchIntent(android.content.Intent,android.app.SearchableInfo)
java.lang.String fixUrl(java.lang.String)
boolean onSuggestionsKey(android.view.View,int,android.view.KeyEvent)
int getListSelection()
boolean launchSuggestion(int)
void setListSelection(int)
void clearListSelection()
void restoreUserQuery()
java.lang.String getSuggestActionMsg()
java.lang.String getSuggestActionMsgColumn()
java.lang.String getActionKeyMessage(android.database.Cursor,android.app.SearchableInfo$ActionKeyInfo)
boolean launchSuggestion(int,int,java.lang.String)
android.content.Intent createIntent(java.lang.String,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)
void launchIntent(android.content.Intent)
android.content.Intent createIntentFromSuggestion(android.database.Cursor,int,java.lang.String)
void setBrowserApplicationId(android.content.Intent)
android.content.Intent setData(android.net.Uri)
void rewriteQueryFromSuggestion(int)
void setQuery(java.lang.CharSequence)
void setText(java.lang.CharSequence,boolean)
long getAndSet(long)
void dbgLogTiming(java.lang.String)
android.content.Intent access$1000(android.app.SearchDialog)
android.content.Intent access$1100(android.app.SearchDialog,android.content.Intent,android.app.SearchableInfo)
android.content.Intent access$1200(android.app.SearchDialog)
android.content.Intent access$1300(android.app.SearchDialog,android.content.Intent,android.app.SearchableInfo)
boolean access$1400(android.app.SearchDialog,android.view.View,int,android.view.KeyEvent)
java.lang.String access$1500(android.app.SearchDialog,java.lang.String)
void access$1600(android.app.SearchDialog,android.content.Intent)
android.content.IContentProvider asInterface(android.os.IBinder)
void <init>(android.os.Parcel,android.app.IActivityManager$1)
void initServiceCache(java.util.Map)
void setProcessGroup(int,int)
long getNativeHeapSize()
long getNativeHeapAllocatedSize()
long getNativeHeapFreeSize()
long totalMemory()
long freeMemory()
int getGlobalAssetCount()
int getGlobalAssetManagerCount()
int getBinderLocalObjectCount()
int getBinderProxyObjectCount()
int getBinderDeathObjectCount()
int getInstanceCount()
long getHeapAllocatedSize()
android.database.sqlite.SQLiteDebug$PagerStats getDatabaseInfo()
void printRow(java.io.PrintWriter,java.lang.String,java.lang.Object[])
java.lang.String getAssetAllocations()
void dataChanged(java.lang.String)
void clearBackupData(java.lang.String)
void agentConnected(java.lang.String,android.os.IBinder)
void agentDisconnected(java.lang.String)
void restoreAtInstall(java.lang.String,int)
void setBackupEnabled(boolean)
void setAutoRestore(boolean)
void setBackupProvisioned(boolean)
boolean isBackupEnabled()
void backupNow()
java.lang.String getCurrentTransport()
java.lang.String[] listAllTransports()
java.lang.String selectBackupTransport(java.lang.String)
android.app.backup.IRestoreSession asInterface(android.os.IBinder)
android.app.backup.IRestoreSession beginRestoreSession(java.lang.String,java.lang.String)
void opComplete(int)
void <init>(android.os.Parcel,android.app.backup.RestoreSet$1)
android.app.backup.RestoreSet createFromParcel(android.os.Parcel)
android.app.backup.RestoreSet[] newArray(int)
void <init>(android.app.backup.BackupDataInput$1)
int ctor(java.io.FileDescriptor)
void dtor(int)
int readNextHeader_native(int,android.app.backup.BackupDataInput$EntityHeader)
int readEntityData_native(int,byte[],int,int)
int skipEntityData_native(int)
void skipEntityData()
void <init>(android.app.backup.RestoreSession$RestoreObserverWrapper,android.os.Looper,android.app.backup.RestoreSession)
void <init>(android.app.backup.RestoreSession,android.content.Context,android.app.backup.RestoreObserver)
void restoreSetsAvailable(android.app.backup.RestoreSet[])
void restoreStarting(int)
void onUpdate(int,java.lang.String)
void restoreFinished(int)
android.app.backup.IRestoreObserver asInterface(android.os.IBinder)
void <init>(android.app.backup.BackupAgent)
void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)
void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)
void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)
void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)
void <init>(android.app.backup.BackupAgent,android.app.backup.BackupAgent$1)
android.app.backup.IBackupManager asInterface(android.os.IBinder)
void checkServiceBinder()
void dataChanged()
void <init>(android.content.Context,android.app.backup.IRestoreSession)
int restorePackage(java.lang.String,android.app.backup.RestoreObserver)
void endRestoreSession()
int requestRestore(android.app.backup.RestoreObserver)
android.app.backup.RestoreSession beginRestoreSession()
void <init>(android.content.Context,java.lang.String[])
void performBackup_checked(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor,java.lang.String[],java.lang.String[])
void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)
boolean isKeyInList(java.lang.String,java.lang.String[])
java.io.File getAbsoluteFile()
void writeFile(java.io.File,android.app.backup.BackupDataInputStream)
void restoreEntity(android.app.backup.BackupDataInputStream)
void writeNewStateDescription(android.os.ParcelFileDescriptor)
void performRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)
android.app.backup.BackupHelperDispatcher getDispatcher()
void addHelper(java.lang.String,android.app.backup.BackupHelper)
int getAvailableRestoreSets(android.app.backup.IRestoreObserver)
int restoreAll(long,android.app.backup.IRestoreObserver)
int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)
int getAvailableRestoreSets(android.app.backup.RestoreObserver)
int restoreAll(long,android.app.backup.RestoreObserver)
void <init>(android.app.backup.BackupHelperDispatcher$1)
int writeEntityHeader_native(int,java.lang.String,int)
int writeEntityData_native(int,byte[],int)
void setKeyPrefix_native(int,java.lang.String)
void setKeyPrefix(java.lang.String)
int ctor()
int performBackup_native(java.io.FileDescriptor,int,java.io.FileDescriptor,java.lang.String[],java.lang.String[])
int writeFile_native(int,java.lang.String,int)
int writeSnapshot_native(int,java.io.FileDescriptor)
int readHeader_native(android.app.backup.BackupHelperDispatcher$Header,java.io.FileDescriptor)
void doOneBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor,android.app.backup.BackupHelperDispatcher$Header,android.app.backup.BackupHelper)
int skipChunk_native(java.io.FileDescriptor,int)
int allocateHeader_native(android.app.backup.BackupHelperDispatcher$Header,java.io.FileDescriptor)
int writeHeader_native(android.app.backup.BackupHelperDispatcher$Header,java.io.FileDescriptor,int)
void <init>(android.app.backup.BackupDataInput)
android.app.KeyguardManager$KeyguardLock newKeyguardLock(java.lang.String)
void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)
android.app.IBackupAgent asInterface(android.os.IBinder)
android.graphics.drawable.Drawable createIconThumbnail(android.graphics.drawable.Drawable)
android.app.PendingIntent createFromParcel(android.os.Parcel)
android.app.PendingIntent[] newArray(int)
void <init>(android.content.Context,int,java.lang.CharSequence,long,java.lang.CharSequence,java.lang.CharSequence,android.content.Intent)
void <init>(int,java.lang.CharSequence,long)
long[] createLongArray()
android.widget.RemoteViews clone()
void writeLongArray(long[])
void setImageViewResource(int,int)
void setTextViewText(int,java.lang.CharSequence)
void setLong(int,java.lang.String,long)
java.lang.Object removeFirst()
void <init>(android.app.Activity$1)
void onShow(android.content.DialogInterface)
void newThumbnail(int,android.graphics.Bitmap,java.lang.CharSequence)
void finished()
boolean performPanelIdentifierAction(int,int,int)
android.app.Application getInitialApplication()
java.lang.String getInitialPackage()
android.content.Intent putExtras(android.os.Bundle)
void bindView(android.view.View,android.app.LauncherActivity$ListItem)
void <init>(android.app.LauncherActivity$ActivityAdapter,android.app.LauncherActivity$1)
java.util.ArrayList access$100(android.app.LauncherActivity$ActivityAdapter)
java.lang.Object access$200(android.app.LauncherActivity$ActivityAdapter)
java.util.ArrayList access$102(android.app.LauncherActivity$ActivityAdapter,java.util.ArrayList)
void setColorFilter(android.graphics.ColorFilter)
void setIcon(java.lang.String,int,int)
void <init>(android.app.LoadedApk$ReceiverDispatcher,boolean)
android.app.IActivityManager$WaitResult createFromParcel(android.os.Parcel)
android.app.IActivityManager$WaitResult[] newArray(int)
void <init>(android.app.LoadedApk$ServiceDispatcher,android.content.ComponentName,android.os.IBinder,int)
void doConnected(android.content.ComponentName,android.os.IBinder)
void doDeath(android.content.ComponentName,android.os.IBinder)
void onServiceDisconnected(android.content.ComponentName)
void onServiceConnected(android.content.ComponentName,android.os.IBinder)
void setDrawFilter(android.graphics.DrawFilter)
float getDimension(int)
void setIntrinsicWidth(int)
void setIntrinsicHeight(int)
android.content.Intent parseAlias(org.xmlpull.v1.XmlPullParser)
android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)
android.app.ISearchManagerCallback asInterface(android.os.IBinder)
android.app.IWallpaperManagerCallback asInterface(android.os.IBinder)
void <init>(int,android.content.Intent)
android.content.Intent getResultData()
boolean performContextMenuIdentifierAction(int,int)
java.lang.ClassLoader getParent()
void warn(java.lang.String)
java.net.URL getResource(java.lang.String)
java.util.Enumeration getResources(java.lang.String)
void setClassAssertionStatus(java.lang.String,boolean)
void setPackageAssertionStatus(java.lang.String,boolean)
void setDefaultAssertionStatus(boolean)
void clearAssertionStatus()
void <init>(android.content.Context,int,android.app.TimePickerDialog$OnTimeSetListener,int,int,boolean)
void <init>(android.content.Context,android.app.TimePickerDialog$OnTimeSetListener,int,int,boolean)
java.text.DateFormat getTimeFormat(android.content.Context)
void updateTitle(int,int)
void setCurrentHour(java.lang.Integer)
void setCurrentMinute(java.lang.Integer)
void setIs24HourView(java.lang.Boolean)
void setOnTimeChangedListener(android.widget.TimePicker$OnTimeChangedListener)
java.lang.Integer getCurrentHour()
java.lang.Integer getCurrentMinute()
void onTimeSet(android.widget.TimePicker,int,int)
void onTimeChanged(android.widget.TimePicker,int,int)
void updateTime(int,int)
java.lang.String format(java.util.Date)
boolean is24HourView()
void <init>(android.content.Context,int,android.app.DatePickerDialog$OnDateSetListener,int,int,int)
void <init>(android.content.Context,android.app.DatePickerDialog$OnDateSetListener,int,int,int)
java.lang.String[] getShortWeekdays()
java.text.DateFormat getDateInstance(int)
void updateTitle(int,int,int)
void init(int,int,int,android.widget.DatePicker$OnDateChangedListener)
void setSingleLine()
void setEllipsize(android.text.TextUtils$TruncateAt)
int getYear()
int getMonth()
int getDayOfMonth()
void onDateSet(android.widget.DatePicker,int,int,int)
void onDateChanged(android.widget.DatePicker,int,int,int)
void updateDate(int,int,int)
void <init>(java.lang.String,android.content.Intent)
android.app.IActivityPendingResult asInterface(android.os.IBinder)
boolean sendResult(int,java.lang.String,android.os.Bundle)
android.app.ActivityManager$MemoryInfo createFromParcel(android.os.Parcel)
android.app.ActivityManager$MemoryInfo[] newArray(int)
void <init>(android.app.ProgressDialog)
android.widget.ProgressBar access$000(android.app.ProgressDialog)
java.lang.String access$100(android.app.ProgressDialog)
android.widget.TextView access$200(android.app.ProgressDialog)
java.text.NumberFormat access$300(android.app.ProgressDialog)
android.widget.TextView access$400(android.app.ProgressDialog)
void activityResuming(int)
void closingSystemDialogs(java.lang.String)
void <init>(android.database.Cursor)
android.database.Cursor access$100(android.app.Activity$ManagedCursor)
boolean access$202(android.app.Activity$ManagedCursor,boolean)
boolean access$300(android.app.Activity$ManagedCursor)
boolean access$200(android.app.Activity$ManagedCursor)
boolean access$302(android.app.Activity$ManagedCursor,boolean)
void takeSurface(android.view.SurfaceHolder$Callback2)
void takeInputQueue(android.view.InputQueue$Callback)
java.lang.String mapLibraryName(java.lang.String)
byte[] getByteArray(java.lang.String)
int loadNativeCode(java.lang.String,java.lang.String,android.os.MessageQueue,java.lang.String,java.lang.String,int,android.content.res.AssetManager,byte[])
void onSurfaceDestroyedNative(int)
void onInputChannelDestroyedNative(int,android.view.InputChannel)
void unloadNativeCode(int)
void onPauseNative(int)
void onResumeNative(int)
byte[] onSaveInstanceStateNative(int)
void putByteArray(java.lang.String,byte[])
void onStartNative(int)
void onStopNative(int)
void onConfigurationChangedNative(int)
void onLowMemoryNative(int)
void onWindowFocusChangedNative(int,boolean)
void dispatchKeyEventNative(int,android.view.KeyEvent)
void onSurfaceCreatedNative(int,android.view.Surface)
void onSurfaceChangedNative(int,android.view.Surface,int,int,int)
void onSurfaceRedrawNeededNative(int,android.view.Surface)
void onInputChannelCreatedNative(int,android.view.InputChannel)
void onContentRectChangedNative(int,int,int,int,int)
void dispatchUnhandledKeyEvent(android.view.KeyEvent)
void preDispatchKeyEvent(android.view.KeyEvent,int)
void setWindowFlags(int,int)
void setWindowFormat(int)
void showIme(int)
void hideIme(int)
void finishPreDispatchKeyEventNative(int,int,boolean)
java.util.HashMap getLastNonConfigurationChildInstances()
void performPause(android.app.LocalActivityManager$LocalActivityRecord,boolean)
void moveToState(android.app.LocalActivityManager$LocalActivityRecord,int)
android.view.Window performDestroy(android.app.LocalActivityManager$LocalActivityRecord,boolean)
android.view.Window startActivity(java.lang.String,android.content.Intent)
android.view.Window destroyActivity(java.lang.String,boolean)
java.lang.String getCurrentId()
void removeAllActivities()
android.app.ApplicationErrorReport createFromParcel(android.os.Parcel)
android.app.ApplicationErrorReport[] newArray(int)
java.lang.String codeToString(int)
void maybeSnapshot()
android.app.INotificationManager getService()
void notify(java.lang.String,int,android.app.Notification)
void cancel(java.lang.String,int)
void cancelAll()
java.lang.String getColumnName(int)
boolean isLongColumn(java.lang.String)
long translateLong(java.lang.String)
java.lang.String translateString(java.lang.String)
java.lang.String getUnderlyingString(java.lang.String)
java.lang.String getLocalUri()
long getUnderlyingLong(java.lang.String)
long getReason(int)
long getErrorCode(int)
long getPausedReason(int)
boolean isStatusError(int)
void setDefaultTab(java.lang.String)
void setDefaultTab(int)
void ensureTabHost()
void setCurrentTabByTag(java.lang.String)
int getCurrentTab()
void setCurrentTab(int)
java.lang.String getCurrentTabTag()
void setup(android.app.LocalActivityManager)
android.view.View getCurrentTabView()
void onChildTitleChanged(android.app.Activity,java.lang.CharSequence)
android.widget.TabHost getTabHost()
android.widget.TabWidget getTabWidget()
int myTid()
void onStart(android.content.Intent,int)
void <init>(android.content.Context,java.lang.String)
boolean stopSelfResult(int)
void setForeground(boolean)
void startForeground(int,android.app.Notification)
void stopForeground(boolean)
void <init>(java.lang.String,java.lang.String,java.lang.ClassLoader)
void <init>(android.content.pm.ApplicationInfo,int)
void <init>(android.content.pm.ComponentInfo,int)
void <init>(android.content.pm.ResolveInfo,int)
android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean)
android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence)
android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean,android.content.DialogInterface$OnCancelListener)
android.app.ProgressDialog show(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)
java.text.NumberFormat getPercentInstance()
void setMaximumFractionDigits(int)
void setSecondaryProgress(int)
void incrementProgressBy(int)
void incrementSecondaryProgressBy(int)
void setProgressDrawable(android.graphics.drawable.Drawable)
void setIndeterminateDrawable(android.graphics.drawable.Drawable)
void onProgressChanged()
int getSecondaryProgress()
boolean isIndeterminate()
void setProgressStyle(int)
void setProgressNumberFormat(java.lang.String)
void setIntent(android.content.Intent)
boolean isChild()
android.app.Activity getParent()
android.view.View getCurrentFocus()
void restoreManagedDialogs(android.os.Bundle)
int[] getIntArray(java.lang.String)
java.lang.String savedDialogKeyFor(int)
java.lang.String savedDialogArgsKeyFor(int)
android.app.Dialog createDialog(java.lang.Integer,android.os.Bundle,android.os.Bundle)
void onPrepareDialog(int,android.app.Dialog,android.os.Bundle)
android.app.Dialog onCreateDialog(int,android.os.Bundle)
void dispatchOnCreate(android.os.Bundle)
int getTitleColor()
void onTitleChanged(java.lang.CharSequence,int)
void onPostResume()
void saveManagedDialogs(android.os.Bundle)
android.os.Bundle saveHierarchyState()
void putIntArray(java.lang.String,int[])
void onUserLeaveHint()
java.lang.Object getLastNonConfigurationInstance()
void startManagingCursor(android.database.Cursor)
android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)
android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)
void managedCommitUpdates(android.database.Cursor)
void stopManagingCursor(android.database.Cursor)
void setPersistent(boolean)
void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)
void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)
void setDefaultKeyMode(int)
boolean performPanelShortcut(int,int,android.view.KeyEvent,int)
android.text.method.TextKeyListener getInstance()
boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)
void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)
void clearSpans()
void onUserInteraction()
boolean superDispatchKeyEvent(android.view.KeyEvent)
boolean superDispatchTouchEvent(android.view.MotionEvent)
boolean superDispatchTrackballEvent(android.view.MotionEvent)
android.view.View onCreatePanelView(int)
boolean onCreateOptionsMenu(android.view.Menu)
boolean onCreatePanelMenu(int,android.view.Menu)
boolean onPrepareOptionsMenu(android.view.Menu)
boolean onPreparePanel(int,android.view.View,android.view.Menu)
boolean onMenuOpened(int,android.view.Menu)
boolean onOptionsItemSelected(android.view.MenuItem)
boolean onMenuItemSelected(int,android.view.MenuItem)
boolean onContextItemSelected(android.view.MenuItem)
void onOptionsMenuClosed(android.view.Menu)
void onContextMenuClosed(android.view.Menu)
void onPanelClosed(int,android.view.Menu)
void openPanel(int,android.view.KeyEvent)
void openOptionsMenu()
void closePanel(int)
void closeOptionsMenu()
void registerForContextMenu(android.view.View)
void unregisterForContextMenu(android.view.View)
void openContextMenu(android.view.View)
void closeContextMenu()
android.app.Dialog onCreateDialog(int)
void setOwnerActivity(android.app.Activity)
void onPrepareDialog(int,android.app.Dialog)
boolean showDialog(int,android.os.Bundle)
void showDialog(int)
java.lang.IllegalArgumentException missingDialog(int)
void dismissDialog(int)
void removeDialog(int)
boolean onSearchRequested()
void ensureSearchManager()
void triggerSearch(java.lang.String,android.os.Bundle)
void takeKeyEvents(boolean)
void setFeatureDrawableUri(int,android.net.Uri)
void setFeatureDrawable(int,android.graphics.drawable.Drawable)
void setFeatureDrawableAlpha(int,int)
android.view.MenuInflater getMenuInflater()
void startActivityFromChild(android.app.Activity,android.content.Intent,int)
void startActivityForResult(android.content.Intent,int)
void startIntentSenderForResultInner(android.content.IntentSender,int,android.content.Intent,int,int,android.app.Activity)
void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)
boolean startActivityIfNeeded(android.content.Intent,int)
boolean startNextMatchingActivity(android.content.Intent)
void overridePendingTransition(int,int)
java.lang.String getCallingPackage()
android.content.ComponentName getCallingActivity()
void setVisible(boolean)
void finishFromChild(android.app.Activity)
void finishActivityFromChild(android.app.Activity,int)
void finishActivity(int)
android.app.PendingIntent createPendingResult(int,android.content.Intent,int)
void setRequestedOrientation(int)
int getRequestedOrientation()
int getTaskId()
boolean isTaskRoot()
boolean moveTaskToBack(boolean)
android.content.SharedPreferences getPreferences(int)
void setTitle(int)
void setTitleColor(int)
void setFeatureInt(int,int)
void setProgressBarVisibility(boolean)
void setProgressBarIndeterminate(boolean)
int getVolumeControlStream()
void runOnUiThread(java.lang.Runnable)
void setParent(android.app.Activity)
java.lang.String flattenToString()
boolean isResumed()
void <init>(android.content.Context,boolean,android.os.Message)
android.app.Activity getOwnerActivity()
void sendShowMessage()
void sendDismissMessage()
void dismissDialog()
boolean isOutOfBounds(android.view.MotionEvent)
android.content.ComponentName getAssociatedActivity()
void setCancelMessage(android.os.Message)
void setOnShowListener(android.content.DialogInterface$OnShowListener)
void setDismissMessage(android.os.Message)
void setOnKeyListener(android.content.DialogInterface$OnKeyListener)
android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)
android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)
android.app.AlertDialog$Builder setCancelable(boolean)
android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)
android.app.AlertDialog$Builder setItems(int,android.content.DialogInterface$OnClickListener)
android.app.AlertDialog$Builder setCursor(android.database.Cursor,android.content.DialogInterface$OnClickListener,java.lang.String)
android.app.AlertDialog$Builder setMultiChoiceItems(int,boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)
android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)
android.app.AlertDialog$Builder setMultiChoiceItems(android.database.Cursor,java.lang.String,java.lang.String,android.content.DialogInterface$OnMultiChoiceClickListener)
android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)
android.app.AlertDialog$Builder setSingleChoiceItems(android.database.Cursor,int,java.lang.String,android.content.DialogInterface$OnClickListener)
android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)
android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)
android.app.AlertDialog$Builder setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)
android.app.AlertDialog$Builder setView(android.view.View)
android.app.AlertDialog$Builder setView(android.view.View,int,int,int,int)
android.app.AlertDialog$Builder setInverseBackgroundForced(boolean)
android.app.IActivityManager$ContentProviderHolder createFromParcel(android.os.Parcel)
android.app.IActivityManager$ContentProviderHolder[] newArray(int)
void setIntentRedelivery(boolean)
void readIntArray(int[])
android.app.ActivityManager$ProcessErrorStateInfo createFromParcel(android.os.Parcel)
android.app.ActivityManager$ProcessErrorStateInfo[] newArray(int)
android.app.Notification createFromParcel(android.os.Parcel)
android.app.Notification[] newArray(int)
void <init>(android.app.LauncherActivity$ActivityAdapter)
android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)
void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults)
boolean isPhoneDocked(android.bluetooth.BluetoothDevice)
void <init>(android.server.BluetoothA2dpService)
boolean initNative()
android.bluetooth.BluetoothAdapter getDefaultAdapter()
void onBluetoothEnable()
void setA2dpService(android.server.BluetoothA2dpService)
void <init>(android.content.Context,android.server.BluetoothService)
void cleanupNative()
int convertBluezSinkStringtoState(java.lang.String)
android.os.ParcelUuid[] getRemoteUuids(java.lang.String)
boolean isUuidPresent(android.os.ParcelUuid[],android.os.ParcelUuid)
boolean isSinkDevice(android.bluetooth.BluetoothDevice)
java.lang.String getObjectPathFromAddress(java.lang.String)
java.lang.Object[] getSinkPropertiesNative(java.lang.String)
boolean addAudioSink(android.bluetooth.BluetoothDevice)
void handleSinkStateChange(android.bluetooth.BluetoothDevice,int,int)
java.lang.String getAddressFromObjectPath(java.lang.String)
android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)
boolean containsAnyUuid(android.os.ParcelUuid[],android.os.ParcelUuid[])
void setParameters(java.lang.String)
int getSinkState(android.bluetooth.BluetoothDevice)
boolean disconnectSinkNative(java.lang.String)
void onBluetoothDisable()
int getSinkPriority(android.bluetooth.BluetoothDevice)
boolean isConnectSinkFeasible(android.bluetooth.BluetoothDevice)
boolean connectSink(android.bluetooth.BluetoothDevice)
boolean connectSink(java.lang.String)
boolean connectSinkInternal(android.bluetooth.BluetoothDevice)
java.util.Set lookupSinksMatchingStates(int[])
boolean setSinkPriority(android.bluetooth.BluetoothDevice,int)
boolean connectSinkNative(java.lang.String)
boolean isDisconnectSinkFeasible(android.bluetooth.BluetoothDevice)
boolean disconnectSink(android.bluetooth.BluetoothDevice)
boolean disconnectSink(java.lang.String)
boolean disconnectSinkInternal(android.bluetooth.BluetoothDevice)
boolean suspendSink(android.bluetooth.BluetoothDevice)
boolean checkSinkSuspendState(int)
boolean resumeSink(android.bluetooth.BluetoothDevice)
android.bluetooth.BluetoothDevice[] getConnectedSinks()
android.bluetooth.BluetoothDevice[] getNonDisconnectedSinks()
java.lang.String getBluetoothA2dpSinkPriorityKey(java.lang.String)
boolean checkBluetoothAddress(java.lang.String)
void onSinkPropertyChanged(java.lang.String,java.lang.String[])
void adjustOtherSinkPriorities(android.bluetooth.BluetoothDevice)
java.util.Set getBondedDevices()
void onConnectSinkResult(java.lang.String,boolean)
java.lang.String stateToString(int)
void access$000(android.server.BluetoothA2dpService)
void access$100(android.server.BluetoothA2dpService)
java.util.HashMap access$200(android.server.BluetoothA2dpService)
void access$300(android.server.BluetoothA2dpService,android.bluetooth.BluetoothDevice,int,int)
boolean access$400(android.server.BluetoothA2dpService,android.bluetooth.BluetoothDevice)
android.server.BluetoothService access$500(android.server.BluetoothA2dpService)
boolean avrcpVolumeUpNative(java.lang.String)
boolean access$600(android.server.BluetoothA2dpService,java.lang.String)
boolean avrcpVolumeDownNative(java.lang.String)
boolean access$700(android.server.BluetoothA2dpService,java.lang.String)
void <init>(android.server.search.SearchManagerService,android.server.search.SearchManagerService$1)
void <init>(android.server.search.SearchManagerService)
void buildSearchableList()
android.server.search.Searchables getSearchables()
java.util.ArrayList getSearchablesInGlobalSearchList()
android.content.Context access$100(android.server.search.SearchManagerService)
android.server.search.Searchables access$200(android.server.search.SearchManagerService)
void <init>(android.server.search.SearchManagerService$BootCompletedReceiver)
android.content.ComponentName findGlobalSearchActivity()
android.content.ComponentName findWebSearchActivity(android.content.ComponentName)
java.util.ArrayList getSearchablesList()
void <init>(android.server.BluetoothService)
void setPendingOutgoingBonding(java.lang.String)
java.lang.String getPendingOutgoingBonding()
int access$1800(android.server.BluetoothService)
java.lang.String getPropertyInternal(java.lang.String)
void access$500(java.lang.String)
void loadBondState()
void setBondState(java.lang.String,int,int)
void setBondState(java.lang.String,int)
int getBondState(java.lang.String)
android.bluetooth.BluetoothDeviceProfileState access$1900(android.server.BluetoothService,java.lang.String)
void access$2000(android.server.BluetoothService,java.lang.String)
android.bluetooth.BluetoothAdapter access$2100(android.server.BluetoothService)
android.content.Context access$2200(android.server.BluetoothService)
boolean isAutoPairingBlacklisted(java.lang.String)
java.lang.String getRemoteName(java.lang.String)
java.lang.String[] listInState(int)
void updateAutoPairingData(java.lang.String)
void addAutoPairingFailure(java.lang.String)
int getAttempt(java.lang.String)
boolean isAutoPairingAttemptsInProgress(java.lang.String)
void clearPinAttempts(java.lang.String)
boolean hasAutoPairingFailed(java.lang.String)
void attempt(java.lang.String)
void copyAutoPairingData()
void readAutoPairingData()
void <init>(java.lang.String,boolean)
void access$2300(android.server.BluetoothService$BondState,java.lang.String)
void <init>(android.server.BluetoothService,int,int)
void access$2400(android.server.BluetoothService,int,int)
void initializeNativeDataNative()
int isEnabledNative()
int disableNative()
void registerForAirplaneMode(android.content.IntentFilter)
java.lang.String readDockBluetoothAddress()
boolean writeDockPin()
java.lang.String getDockPin()
void <init>(android.content.Context,android.bluetooth.BluetoothAdapter,android.server.BluetoothService)
void initAfterRegistration()
void cleanupNativeDataNative()
boolean isEnabledInternal()
boolean disable()
void setBluetoothState(int)
boolean tearDownNativeDataNative()
void persistBluetoothOnSetting(boolean)
boolean enable()
void finishDisable(boolean)
boolean enable(boolean)
boolean isAirplaneModeOn()
void <init>(android.server.BluetoothService,boolean)
void restart()
byte[] convertPinToBytes(java.lang.String)
boolean setPin(java.lang.String,byte[])
boolean attemptAutoPair(java.lang.String)
boolean setBondState(java.lang.String,int)
void pairingAttempt(java.lang.String,int)
boolean setBondState(java.lang.String,int,int)
void onCreatePairedDeviceResult(java.lang.String,int)
java.lang.String toBondStateString(int)
boolean isAdapterPropertiesEmpty()
java.lang.Object[] getAdapterPropertiesNative()
java.lang.Integer valueOf(java.lang.String)
java.lang.String getAdapterPathNative()
void getAllProperties()
void setProperty(java.lang.String,java.lang.String)
boolean setName(java.lang.String)
boolean setPropertyString(java.lang.String,java.lang.String)
boolean setAdapterPropertyStringNative(java.lang.String,java.lang.String)
boolean setPropertyInteger(java.lang.String,int)
boolean setAdapterPropertyIntegerNative(java.lang.String,int)
boolean setPropertyBoolean(java.lang.String,boolean)
boolean setAdapterPropertyBooleanNative(java.lang.String,int)
boolean setDiscoverableTimeout(int)
boolean setScanMode(int,int)
java.lang.String getRemoteDeviceProperty(java.lang.String,java.lang.String)
int getDiscoverableTimeout()
int getScanMode()
int bluezStringToScanMode(boolean,boolean)
boolean startDiscovery()
boolean startDiscoveryNative()
boolean cancelDiscovery()
boolean stopDiscoveryNative()
boolean isDiscovering()
void setIsDiscovering(boolean)
boolean isBondingFeasible(java.lang.String)
boolean createBond(java.lang.String)
boolean createPairedDeviceNative(java.lang.String,int)
boolean createBondOutOfBand(java.lang.String,byte[],byte[])
boolean createPairedDeviceOutOfBandNative(java.lang.String,int)
boolean setDeviceOutOfBandData(java.lang.String,byte[],byte[])
android.util.Pair getDeviceOutOfBandData(android.bluetooth.BluetoothDevice)
byte[] readAdapterOutOfBandDataNative()
byte[] readOutOfBandData()
boolean cancelBondProcess(java.lang.String)
boolean cancelDeviceCreationNative(java.lang.String)
boolean removeBond(java.lang.String)
boolean removeDeviceNative(java.lang.String)
boolean removeBondInternal(java.lang.String)
java.lang.String[] listBonds()
boolean isBluetoothDock(java.lang.String)
boolean isRemoteDeviceInCache(java.lang.String)
java.lang.Object[] getDevicePropertiesNative(java.lang.String)
java.lang.String[] getRemoteDeviceProperties(java.lang.String)
boolean updateRemoteDevicePropertiesCache(java.lang.String)
void addRemoteDeviceProperties(java.lang.String,java.lang.String[])
void updateDeviceServiceChannelCache(java.lang.String)
void removeRemoteDeviceProperties(java.lang.String)
void setRemoteDeviceProperty(java.lang.String,java.lang.String,java.lang.String)
boolean setTrust(java.lang.String,boolean)
boolean setDevicePropertyBooleanNative(java.lang.String,java.lang.String,int)
boolean getTrustState(java.lang.String)
int getRemoteClass(java.lang.String)
android.os.ParcelUuid[] getUuidFromCache(java.lang.String)
android.os.ParcelUuid fromString(java.lang.String)
boolean fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)
void <init>(java.lang.String,android.os.ParcelUuid)
boolean discoverServicesNative(java.lang.String,java.lang.String)
boolean createDeviceNative(java.lang.String)
int getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)
java.util.HashMap getPasskeyAgentRequestData()
boolean setPinNative(java.lang.String,java.lang.String,int)
boolean setPasskey(java.lang.String,int)
boolean setPasskeyNative(java.lang.String,int,int)
boolean setPairingConfirmation(java.lang.String,boolean)
boolean setPairingConfirmationNative(java.lang.String,boolean,int)
boolean setRemoteOutOfBandData(java.lang.String)
boolean setRemoteOutOfBandDataNative(java.lang.String,byte[],byte[],int)
boolean cancelPairingUserInput(java.lang.String)
boolean cancelPairingUserInputNative(java.lang.String,int)
int getDeviceServiceChannelNative(java.lang.String,java.lang.String,int)
void onRfcommChannelFound(int)
int addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)
java.util.UUID getUuid()
long getMostSignificantBits()
long getLeastSignificantBits()
int addRfcommServiceRecordNative(java.lang.String,long,long,short)
void checkAndRemoveRecord(int,int)
void removeServiceRecord(int)
boolean removeServiceRecordNative(int)
android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])
void sendUuidIntent(java.lang.String)
void makeServiceChannelCallbacks(java.lang.String)
void <init>(android.content.Context,android.bluetooth.BluetoothHeadset$ServiceListener)
android.bluetooth.BluetoothDevice getCurrentHeadset()
int getState(android.bluetooth.BluetoothDevice)
java.lang.String scanModeToBluezString(int)
boolean setLinkTimeoutNative(java.lang.String,int)
void setLinkTimeout(java.lang.String,int)
boolean connectHeadset(java.lang.String)
boolean disconnectHeadset(java.lang.String)
void <init>(android.content.Context,java.lang.String,android.server.BluetoothService,android.server.BluetoothA2dpService)
android.bluetooth.BluetoothDeviceProfileState addProfileState(java.lang.String)
void removeProfileState(java.lang.String)
void initProfileState()
boolean notifyIncomingConnection(java.lang.String)
boolean notifyIncomingA2dpConnection(java.lang.String)
void sendProfileStateMessage(int,int)
boolean access$000(android.server.BluetoothService)
android.os.Handler access$100(android.server.BluetoothService)
void access$200(android.server.BluetoothService,boolean)
int enableNative()
int access$300(android.server.BluetoothService)
android.server.BluetoothEventLoop access$400(android.server.BluetoothService)
int access$600(android.server.BluetoothService)
boolean setupNativeDataNative()
boolean access$700(android.server.BluetoothService)
void access$800(android.server.BluetoothService,boolean)
boolean access$902(android.server.BluetoothService,boolean)
android.server.BluetoothService$BondState access$1000(android.server.BluetoothService)
void access$1100(android.server.BluetoothService)
com.android.internal.app.IBatteryStats access$1200(android.server.BluetoothService)
android.server.BluetoothService$EnableThread access$1302(android.server.BluetoothService,android.server.BluetoothService$EnableThread)
void access$1400(android.server.BluetoothService,int)
boolean access$1500(android.server.BluetoothService)
boolean access$1600(android.server.BluetoothService)
boolean access$1700(android.server.BluetoothService)
java.lang.String access$2502(java.lang.String)
java.lang.String access$2602(android.server.BluetoothService,java.lang.String)
java.lang.String access$2500()
void classInitNative()
void <init>(android.server.BluetoothEventLoop)
boolean isEventLoopRunningNative()
void startEventLoopNative()
void stopEventLoopNative()
boolean isEventLoopRunning()
android.content.Intent putExtra(java.lang.String,short)
void addDevice(java.lang.String,java.lang.String[])
void onDeviceFound(java.lang.String,java.lang.String[])
void onDeviceDisappeared(java.lang.String)
void onDeviceDisconnectRequested(java.lang.String)
void onDeviceCreated(java.lang.String)
void onDeviceRemoved(java.lang.String)
void onRestartRequired()
void onPropertyChanged(java.lang.String[])
void onDevicePropertyChanged(java.lang.String,java.lang.String[])
java.lang.String checkPairingRequestAndGetAddress(java.lang.String,int)
void onRequestPairingConsent(java.lang.String,int)
void onRequestPasskeyConfirmation(java.lang.String,int,int)
void onRequestPasskey(java.lang.String,int)
int getDeviceClass()
void onRequestPinCode(java.lang.String,int)
void onDisplayPasskey(java.lang.String,int,int)
void onRequestOobData(java.lang.String,int)
boolean onAgentAuthorize(java.lang.String,java.lang.String)
boolean isAudioSource(android.os.ParcelUuid)
boolean isAvrcpTarget(android.os.ParcelUuid)
boolean isAdvAudioDist(android.os.ParcelUuid)
boolean isOtherSinkInNonDisconnectingState(java.lang.String)
boolean onAgentOutOfBandDataAvailable(java.lang.String)
java.util.Set getNonDisconnectedSinks()
void onAgentCancel()
void onDiscoverServicesResult(java.lang.String,boolean)
void onCreateDeviceResult(java.lang.String,int)
android.server.BluetoothService access$000(android.server.BluetoothEventLoop)
void start(java.lang.String)
android.appwidget.AppWidgetProviderInfo createFromParcel(android.os.Parcel)
android.appwidget.AppWidgetProviderInfo[] newArray(int)
void <init>(android.appwidget.AppWidgetHost)
void <init>(android.appwidget.AppWidgetHostView$1)
android.appwidget.AppWidgetManager getInstance(android.content.Context)
void updateAppWidget(int[],android.widget.RemoteViews)
void updateAppWidget(android.content.ComponentName,android.widget.RemoteViews)
int complexToDimensionPixelSize(int,android.util.DisplayMetrics)
void <init>(android.appwidget.AppWidgetHost,android.os.Looper)
void updateAppWidgetView(int,android.widget.RemoteViews)
void startListening()
void stopListening()
int allocateAppWidgetId()
void deleteHost()
android.appwidget.AppWidgetHostView onCreateView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)
void setAppWidget(int,android.appwidget.AppWidgetProviderInfo)
void updateAppWidget(android.widget.RemoteViews)
android.appwidget.AppWidgetHostView createView(android.content.Context,int,android.appwidget.AppWidgetProviderInfo)
void resetAppWidget(android.appwidget.AppWidgetProviderInfo)
void onProviderChanged(int,android.appwidget.AppWidgetProviderInfo)
int getAppWidgetId()
android.appwidget.AppWidgetProviderInfo getAppWidgetInfo()
int generateId()
android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)
android.view.View getDefaultView()
android.content.Context getRemoteContext(android.widget.RemoteViews)
int getLayoutId()
void reapply(android.content.Context,android.view.View)
android.view.View apply(android.content.Context,android.view.ViewGroup)
android.view.View getErrorView()
void prepareView(android.view.View)
java.lang.String getPackage()
int argb(int,int,int,int)
android.appwidget.AppWidgetHostView$ParcelableSparseArray createFromParcel(android.os.Parcel)
android.appwidget.AppWidgetHostView$ParcelableSparseArray[] newArray(int)
void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])
void onDeleted(android.content.Context,int[])
void onEnabled(android.content.Context)
void onDisabled(android.content.Context)
int access$1100(android.webkit.WebView)
int access$1200(android.webkit.WebView)
int access$1300(android.webkit.WebView)
void onStartDrag(float,float)
void <init>(android.webkit.WebView,float,float,android.webkit.WebView$DragTracker)
float computeStretch(float,float,float)
int access$1400(android.webkit.WebView)
boolean onStretchChange(float,float)
void dragTo(float,float)
void setKeyFrame(int,int,float[],float[])
void stopDrag()
boolean isFinished()
int access$1500(android.webkit.WebView)
int hiddenHeightOfTitleBar()
android.graphics.Bitmap$Config offscreenBitmapConfig()
void buildBitmap(int,int)
boolean draw(android.graphics.Canvas)
int getViewHeight()
void access$1600(android.webkit.WebView,android.graphics.Canvas)
void onBitmapChange(android.graphics.Bitmap)
void <init>(android.webkit.WebView,java.lang.String,java.lang.String,android.os.Message)
android.webkit.WebViewDatabase access$600(android.webkit.WebView)
java.util.ArrayList getFormData(java.lang.String,java.lang.String)
android.content.Context access$700(android.webkit.WebView)
void <init>(android.content.Context,java.util.ArrayList)
void <init>(android.webkit.LoadListener)
void <init>(android.os.Handler$Callback)
boolean isSynchronous()
boolean setupStreamAndSendStatus()
void sendHeaders()
boolean sendData()
boolean cancelled()
void closeStreamAndSendEndData()
void loadSynchronousMessages()
void load()
boolean handleMessage(android.os.Message)
void setContentLength(long)
void buildHeaders(android.net.http.Headers)
void headers(android.net.http.Headers)
void data(byte[],int)
void error(int,java.lang.String)
void endData()
void <init>(android.webkit.WebView$InvokeListBox,android.webkit.WebView$InvokeListBox$MyArrayListAdapter,android.widget.ListView)
android.webkit.WebViewCore access$800(android.webkit.WebView)
android.util.SparseBooleanArray getCheckedItemPositions()
void sendMessage(int,int,int,java.lang.Object)
void <init>(android.webkit.WebSettings,android.webkit.WebSettings$1)
java.lang.String getCurrentAcceptLanguage()
java.lang.String getCurrentUserAgent()
void <init>(android.content.Context,android.webkit.WebView)
void setNavDump(boolean)
boolean getNavDump()
void updateMultiTouchSupport(android.content.Context)
void setSupportZoom(boolean)
boolean supportZoom()
void setBuiltInZoomControls(boolean)
boolean getBuiltInZoomControls()
void setAllowFileAccess(boolean)
boolean getAllowFileAccess()
void setAllowContentAccess(boolean)
boolean getAllowContentAccess()
void setLoadWithOverviewMode(boolean)
boolean getLoadWithOverviewMode()
void setUseWebViewBackgroundForOverscrollBackground(boolean)
boolean getUseWebViewBackgroundForOverscrollBackground()
void setSaveFormData(boolean)
boolean getSaveFormData()
void setSavePassword(boolean)
boolean getSavePassword()
void postSync()
void setTextSize(android.webkit.WebSettings$TextSize)
android.webkit.WebSettings$TextSize getTextSize()
void updateDefaultZoomDensity(int)
void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)
android.webkit.WebSettings$ZoomDensity getDefaultZoom()
void setLightTouchEnabled(boolean)
boolean getLightTouchEnabled()
void setUseDoubleTree(boolean)
boolean getUseDoubleTree()
void setUserAgentString(java.lang.String)
void setUserAgent(int)
int getUserAgent()
void setUseWideViewPort(boolean)
boolean getUseWideViewPort()
void setSupportMultipleWindows(boolean)
boolean supportMultipleWindows()
void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm)
android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()
void setStandardFontFamily(java.lang.String)
java.lang.String getStandardFontFamily()
void setFixedFontFamily(java.lang.String)
java.lang.String getFixedFontFamily()
void setSansSerifFontFamily(java.lang.String)
java.lang.String getSansSerifFontFamily()
void setSerifFontFamily(java.lang.String)
java.lang.String getSerifFontFamily()
void setCursiveFontFamily(java.lang.String)
java.lang.String getCursiveFontFamily()
void setFantasyFontFamily(java.lang.String)
java.lang.String getFantasyFontFamily()
int pin(int)
void setMinimumFontSize(int)
int getMinimumFontSize()
void setMinimumLogicalFontSize(int)
int getMinimumLogicalFontSize()
void setDefaultFontSize(int)
int getDefaultFontSize()
void setDefaultFixedFontSize(int)
int getDefaultFixedFontSize()
void setPageCacheCapacity(int)
void setLoadsImagesAutomatically(boolean)
boolean getLoadsImagesAutomatically()
void setBlockNetworkImage(boolean)
boolean getBlockNetworkImage()
void verifyNetworkAccess()
void setBlockNetworkLoads(boolean)
boolean getBlockNetworkLoads()
void setJavaScriptEnabled(boolean)
void setPluginState(android.webkit.WebSettings$PluginState)
void setPluginsEnabled(boolean)
void setPluginsPath(java.lang.String)
void setDatabasePath(java.lang.String)
void setGeolocationDatabasePath(java.lang.String)
void setAppCacheEnabled(boolean)
void setAppCachePath(java.lang.String)
void setAppCacheMaxSize(long)
void setDatabaseEnabled(boolean)
void setDomStorageEnabled(boolean)
boolean getDomStorageEnabled()
java.lang.String getDatabasePath()
boolean getDatabaseEnabled()
void setWorkersEnabled(boolean)
void setGeolocationEnabled(boolean)
boolean getJavaScriptEnabled()
boolean getPluginsEnabled()
android.webkit.WebSettings$PluginState getPluginState()
java.lang.String getPluginsPath()
void setJavaScriptCanOpenWindowsAutomatically(boolean)
boolean getJavaScriptCanOpenWindowsAutomatically()
void setDefaultTextEncodingName(java.lang.String)
java.lang.String getDefaultTextEncodingName()
java.lang.String getUserAgentString()
java.lang.String getAcceptLanguage()
void setNeedInitialFocus(boolean)
boolean getNeedInitialFocus()
boolean access$800(android.webkit.WebSettings$EventHandler,android.os.Message)
void setRenderPriority(android.webkit.WebSettings$RenderPriority)
void setCacheMode(int)
int getCacheMode()
void setShrinksStandaloneImagesToFit(boolean)
int getDoubleTapToastCount()
void setDoubleTapToastCount(int)
void nativeSync(int)
void access$900(android.webkit.WebSettings$EventHandler)
void syncSettingsAndCreateHandler(android.webkit.BrowserFrame)
void onDestroyed()
android.webkit.BrowserFrame access$000(android.webkit.WebSettings)
void access$100(android.webkit.WebSettings,int)
boolean access$202(android.webkit.WebSettings,boolean)
android.content.Context access$400(android.webkit.WebSettings)
int access$500()
android.webkit.WebSettings$RenderPriority access$600(android.webkit.WebSettings)
java.util.LinkedList access$000()
java.lang.ref.ReferenceQueue access$100()
void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)
boolean offer(java.lang.Object)
android.webkit.GeolocationPermissions getInstance()
void <init>(android.webkit.GeolocationPermissions)
void createUIHandler()
void createHandler()
void postMessage(android.os.Message)
void postUIMessage(android.os.Message)
java.util.Set nativeGetOrigins()
void onReceiveValue(java.lang.Object)
void getOrigins(android.webkit.ValueCallback)
boolean nativeGetAllowed(java.lang.String)
void getAllowed(java.lang.String,android.webkit.ValueCallback)
void clear(java.lang.String)
void allow(java.lang.String)
java.util.Set access$000()
void access$100(android.webkit.GeolocationPermissions,android.os.Message)
boolean access$200(java.lang.String)
void nativeClear(java.lang.String)
void access$300(java.lang.String)
void nativeAllow(java.lang.String)
void access$400(java.lang.String)
void nativeClearAll()
void access$500()
android.webkit.WebSettings$RenderPriority[] values()
android.webkit.WebSettings$RenderPriority valueOf(java.lang.String)
void drawRect(android.graphics.Rect,android.graphics.Paint)
void <init>(android.webkit.WebTextView$1)
void <init>(java.lang.String,long,long)
void <init>(java.lang.String,long)
java.lang.String getOrigin()
long getQuota()
long getUsage()
void <init>(android.webkit.WebView,android.os.Message)
java.util.List getList()
void addPlugin(android.webkit.Plugin)
void removePlugin(android.webkit.Plugin)
void dispatchClickEvent(android.content.Context)
void pluginClicked(android.content.Context,int)
void <init>(java.io.InputStream,long,java.util.Map,int)
java.util.Map getHeaders()
void <init>(android.webkit.WebView)
void setWebView(android.webkit.WebView)
android.webkit.WebView getWebView()
android.os.Bundle getData()
void setUsernamePassword(java.lang.String,java.lang.String,java.lang.String)
int access$3700(android.webkit.WebView)
float access$3800(android.webkit.WebView)
int access$3900(android.webkit.WebView)
int viewToContentX(int)
float access$4000(android.webkit.WebView)
int access$4100(android.webkit.WebView)
int viewToContentY(int)
void access$4200(android.webkit.WebView,int,int,boolean)
int access$3000(android.webkit.WebView)
int access$3002(android.webkit.WebView,int)
void access$4300(android.webkit.WebView)
boolean access$4400(android.webkit.WebView)
boolean access$4500(android.webkit.WebView)
int access$4600(android.webkit.WebView)
int access$4700(android.webkit.WebView)
void rebuildWebTextView()
void access$4800(android.webkit.WebView)
boolean access$4900(android.webkit.WebView,int,int,boolean)
boolean access$5000(android.webkit.WebView)
boolean access$5002(android.webkit.WebView,boolean)
boolean access$5100(android.webkit.WebView,int,int)
void sendMessage(int,int,int)
void access$5200(android.webkit.WebView,int,int)
int getViewWidth()
void access$5300(android.webkit.WebView,android.webkit.WebViewCore$RestoreState,int,int,boolean)
boolean access$5400(android.webkit.WebView)
boolean access$5402(android.webkit.WebView,boolean)
void access$5500(android.webkit.WebView,int)
android.webkit.WebSettings getSettings()
boolean access$5600(android.webkit.WebView)
int access$5700(android.webkit.WebView)
void access$1000(android.webkit.WebView,float,boolean,boolean)
float access$2800()
void access$5800(android.webkit.WebView,boolean)
void access$100(android.webkit.WebView)
boolean access$5900(android.webkit.WebView)
int access$6000(android.webkit.WebView)
void access$6100(android.webkit.WebView,int,int,boolean)
void access$6200(android.webkit.WebView,android.graphics.Rect)
android.webkit.WebView$PictureListener access$6300(android.webkit.WebView)
android.graphics.Picture capturePicture()
void onNewPicture(android.webkit.WebView,android.graphics.Picture)
float access$6400(android.webkit.WebView)
boolean access$6500(android.webkit.WebView)
float access$2702(android.webkit.WebView,float)
float access$6600(android.webkit.WebView)
float access$900(android.webkit.WebView)
boolean access$1800(android.webkit.WebView)
boolean access$6702(android.webkit.WebView,boolean)
void postReadyToDrawAll()
void access$6800(android.webkit.WebView,int)
android.webkit.WebTextView access$1900(android.webkit.WebView)
boolean isSameTextField(int)
void setInPassword(boolean)
int access$6900(android.webkit.WebView)
void setTextAndKeepSelection(java.lang.String)
void access$7000(android.webkit.WebView,boolean)
void access$7100(android.webkit.WebView,int,int,android.webkit.WebViewCore$TextSelectionData)
boolean access$7200(android.webkit.WebView,int,int,boolean,long)
void selectionDone()
boolean access$7300(android.webkit.WebView)
void bringIntoView()
void access$7400(android.webkit.WebView,int,int,int,int)
void setAdapterCustom(android.webkit.WebTextView$AutoCompleteAdapter)
void resumePriority()
void resumeUpdatePicture(android.webkit.WebViewCore)
boolean access$7502(android.webkit.WebView,boolean)
boolean access$7602(android.webkit.WebView,boolean)
boolean access$7702(android.webkit.WebView,boolean)
int access$3702(android.webkit.WebView,int)
float access$7802(android.webkit.WebView,float)
float access$7902(android.webkit.WebView,float)
int access$8002(android.webkit.WebView,int)
int access$8000(android.webkit.WebView)
void access$8100(android.webkit.WebView)
int access$8200(android.webkit.WebView)
float access$7800(android.webkit.WebView)
int access$8300(android.webkit.WebView,int)
int access$8400(android.webkit.WebView)
int access$8500(android.webkit.WebView)
float access$7900(android.webkit.WebView)
int access$8600(android.webkit.WebView,int)
int access$8700(android.webkit.WebView)
void access$8800(android.webkit.WebView,int,int)
android.widget.OverScroller access$9300(android.webkit.WebView)
int access$8900(android.webkit.WebView)
int access$9000(android.webkit.WebView)
int access$9100(android.webkit.WebView)
int access$9200(android.webkit.WebView)
boolean springBack(int,int,int,int,int,int)
float access$3802(android.webkit.WebView,float)
float access$4002(android.webkit.WebView,float)
void access$9400(android.webkit.WebView)
android.webkit.WebView$HitTestResult getHitTestResult()
int access$9500(android.webkit.WebView$HitTestResult)
void access$9600(android.webkit.WebView)
java.lang.String access$9700(android.webkit.WebView)
int findAll(java.lang.String)
int access$9802(android.webkit.WebView,int)
int access$9800(android.webkit.WebView)
boolean access$9900(android.webkit.WebView,int,boolean)
void access$10000(android.webkit.WebView,int,int)
void <init>(android.webkit.WebView,int)
void nativeClearCursor()
int access$10100(android.webkit.WebView)
int contentToViewX(int)
int contentToViewDimension(int)
int access$10200(android.webkit.WebView)
int access$10300(android.webkit.WebView)
int contentToViewY(int)
void access$10400(android.webkit.WebView,int,int,int,int)
int access$10502(android.webkit.WebView,int)
int access$10602(android.webkit.WebView,int)
void onStopDrag()
void <init>(android.webkit.CallbackProxy)
void onReceiveValue(android.net.Uri)
android.net.Uri getResult()
void <init>(android.webkit.CallbackProxy,android.webkit.CallbackProxy$1)
void fade(int,float,float)
void show(boolean,boolean)
void setOnZoomInClickListener(android.view.View$OnClickListener)
void setOnZoomOutClickListener(android.view.View$OnClickListener)
void <init>(android.webkit.CallbackProxy,android.webkit.JsResult)
void access$900(android.webkit.WebIconDatabase$EventHandler,android.os.Message)
void open(java.lang.String)
void removeAllIcons()
void requestIconForPageUrl(java.lang.String,android.webkit.WebIconDatabase$IconListener)
boolean access$1000(android.webkit.WebIconDatabase$EventHandler)
void bulkRequestIconForPageUrl(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)
void retainIconForPageUrl(java.lang.String)
void releaseIconForPageUrl(java.lang.String)
android.webkit.WebIconDatabase getInstance()
void access$1100(android.webkit.WebIconDatabase$EventHandler)
void <init>(android.webkit.WebIconDatabase$1)
void nativeOpen(java.lang.String)
void access$100(java.lang.String)
void nativeClose()
void access$200()
void nativeRemoveAllIcons()
void access$300()
void nativeRetainIconForPageUrl(java.lang.String)
void access$600(java.lang.String)
void nativeReleaseIconForPageUrl(java.lang.String)
void access$700(java.lang.String)
android.graphics.Bitmap nativeIconForPageUrl(java.lang.String)
android.graphics.Bitmap access$800(java.lang.String)
void <init>(android.webkit.WebSettings$EventHandler)
void access$300(android.webkit.WebSettings$EventHandler)
void <init>(android.webkit.Plugin,android.webkit.Plugin$1)
void setPath(java.lang.String)
void setFileName(java.lang.String)
void setDescription(java.lang.String)
void setClickHandler(android.webkit.Plugin$PreferencesClickHandler)
void handleClickEvent(android.content.Context)
java.lang.String access$100(android.webkit.Plugin)
java.lang.String access$200(android.webkit.Plugin)
void <init>(android.webkit.HTML5VideoViewProxy)
void onTimeupdate()
void <init>(android.webkit.WebView$InvokeListBox,android.app.AlertDialog)
android.webkit.WebSettings$PluginState[] values()
android.webkit.WebSettings$PluginState valueOf(java.lang.String)
java.lang.Runnable access$3500(android.webkit.WebView)
long access$3600()
boolean zoomIn()
void <init>(android.webkit.HTML5VideoViewProxy$PosterDownloader)
android.net.http.RequestHandle access$600(android.webkit.HTML5VideoViewProxy$PosterDownloader)
java.lang.String access$700(android.webkit.HTML5VideoViewProxy$PosterDownloader)
int access$800(android.webkit.HTML5VideoViewProxy$PosterDownloader)
boolean setupRedirect(java.lang.String,int,java.util.Map)
void <init>(android.webkit.WebSettings)
void setRenderPriority()
void <init>(android.webkit.ViewManager)
boolean access$402(android.webkit.ViewManager,boolean)
java.util.ArrayList access$300(android.webkit.ViewManager)
void <init>(android.webkit.WebIconDatabase$EventHandler)
void access$400(android.webkit.WebIconDatabase$EventHandler,java.lang.String,android.webkit.WebIconDatabase$IconListener)
void access$500(android.webkit.WebIconDatabase$EventHandler,android.os.Message)
boolean matches(java.lang.String,java.lang.CharSequence)
java.lang.String getFileExtensionFromUrl(java.lang.String)
void loadEntry(java.lang.String,java.lang.String)
boolean hasMimeType(java.lang.String)
java.lang.String getMimeTypeFromExtension(java.lang.String)
android.webkit.MimeTypeMap getSingleton()
java.lang.String mimeTypeFromExtension(java.lang.String)
boolean hasExtension(java.lang.String)
java.lang.String getExtensionFromMimeType(java.lang.String)
void <init>(android.webkit.WebViewCore$WebCoreThread)
void access$500(android.webkit.WebViewCore)
void onProgressChanged(android.webkit.WebView,int)
void onReceivedTitle(android.webkit.WebView,java.lang.String)
void onReceivedIcon(android.webkit.WebView,android.graphics.Bitmap)
void onReceivedTouchIconUrl(android.webkit.WebView,java.lang.String,boolean)
void onShowCustomView(android.view.View,android.webkit.WebChromeClient$CustomViewCallback)
void onHideCustomView()
boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)
void onRequestFocus(android.webkit.WebView)
void onCloseWindow(android.webkit.WebView)
boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)
boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)
boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult)
boolean onJsBeforeUnload(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)
void updateQuota(long)
void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)
void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater)
void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback)
void onGeolocationPermissionsHidePrompt()
boolean onJsTimeout()
void onConsoleMessage(java.lang.String,int,java.lang.String)
java.lang.String message()
int lineNumber()
java.lang.String sourceId()
boolean onConsoleMessage(android.webkit.ConsoleMessage)
android.graphics.Bitmap getDefaultVideoPoster()
android.view.View getVideoLoadingProgressView()
void getVisitedHistory(android.webkit.ValueCallback)
void openFileChooser(android.webkit.ValueCallback)
void notifySelectDialogDismissed()
void onSelectionStart(android.webkit.WebView)
void onSelectionDone(android.webkit.WebView)
java.lang.String stripAnchor(java.lang.String)
void <init>(java.lang.String,android.webkit.LoadListener,int,boolean)
java.lang.String errString(java.lang.Exception)
java.io.InputStream open(java.lang.String)
java.io.InputStream openNonAsset(java.lang.String)
java.lang.reflect.Field getField(java.lang.String)
void getValue(int,android.util.TypedValue,boolean)
java.io.InputStream openNonAsset(int,java.lang.String,int)
void status(int,int,int,java.lang.String)
void writeBrowserZoomLevelChange(int,int,long)
void writeBrowserDoubleTapDuration(int,long)
void writeBrowserSnapCenter()
void writeBrowserTextSizeChange(int,int)
void onPrepared()
int getVideoWidth()
int getVideoHeight()
void onPrepared(android.media.MediaPlayer)
void onCompletion(android.media.MediaPlayer)
boolean onError(android.media.MediaPlayer,int,int)
void dispatchOnEnded()
void dispatchOnPaused()
android.webkit.WebChromeClient getWebChromeClient()
void play(java.lang.String,int,android.webkit.HTML5VideoViewProxy,android.webkit.WebChromeClient)
void seek(int,android.webkit.HTML5VideoViewProxy)
void pause(android.webkit.HTML5VideoViewProxy)
void doSetPoster(android.graphics.Bitmap)
boolean isPlaying(android.webkit.HTML5VideoViewProxy)
void sendTimeupdate()
void createWebCoreHandler()
int getCurrentPosition()
void play(java.lang.String)
void seek(int)
void pause()
void cancelAndReleaseQueue()
void teardown()
void <init>(java.lang.String,android.webkit.HTML5VideoViewProxy)
void loadPoster(java.lang.String)
android.webkit.HTML5VideoViewProxy getInstance(android.webkit.WebViewCore,int)
void access$500(android.webkit.HTML5VideoViewProxy,android.graphics.Bitmap)
void nativeOnPrepared(int,int,int,int)
void access$900(android.webkit.HTML5VideoViewProxy,int,int,int,int)
void nativeOnEnded(int)
void access$1000(android.webkit.HTML5VideoViewProxy,int)
void nativeOnPaused(int)
void access$1100(android.webkit.HTML5VideoViewProxy,int)
void nativeOnPosterFetched(android.graphics.Bitmap,int)
void access$1200(android.webkit.HTML5VideoViewProxy,android.graphics.Bitmap,int)
void nativeOnTimeupdate(int,int)
void access$1300(android.webkit.HTML5VideoViewProxy,int,int)
java.io.File access$000()
void confirm()
void confirm(java.lang.String)
void <init>(android.webkit.CallbackProxy,boolean)
java.lang.String getStringResult()
void handleDefault()
void <init>(android.webkit.WebView,java.io.File,android.graphics.Picture,java.io.File)
void writeToStream(java.io.OutputStream)
void <init>(android.webkit.CookieManager)
java.util.Map access$100(android.webkit.CookieManager)
android.webkit.CookieSyncManager getInstance()
void clearExpiredCookies(long)
void prepare()
android.os.Handler access$400()
void assertNull(java.lang.Object)
android.os.Handler access$402(android.os.Handler)
void <init>(android.webkit.WebViewCore$1)
java.lang.String getStackTraceString(java.lang.Throwable)
void <init>(android.webkit.WebViewCore,android.webkit.WebViewCore$1)
android.webkit.WebStorage getInstance()
void <init>(android.content.Context,android.webkit.WebView,android.webkit.CallbackProxy,java.util.Map)
void <init>(android.content.Context,android.webkit.WebViewCore,android.webkit.CallbackProxy,android.webkit.WebSettings,java.util.Map)
void access$200(android.webkit.WebViewCore$EventHub)
android.os.Message obtain(android.os.Handler,int,int,int)
void initialize()
void initializeSubwindow()
android.webkit.BrowserFrame getBrowserFrame()
void pauseTimers()
void resume()
void resumeTimers()
int getFileTypeForMimeType(java.lang.String)
boolean supportsMimeType(java.lang.String)
void addMessageToConsole(java.lang.String,int,java.lang.String,int)
void onJsAlert(java.lang.String,java.lang.String)
void jsAlert(java.lang.String,java.lang.String)
android.net.Uri openFileChooser()
java.lang.String openFileChooser()
long getUsedQuota()
void <init>(android.webkit.WebViewCore)
void exceededDatabaseQuota(java.lang.String,java.lang.String,long,long)
void reachedMaxAppCacheSize(long)
void populateVisitedLinks()
void geolocationPermissionsShowPrompt(java.lang.String)
void geolocationPermissionsHidePrompt()
boolean onJsConfirm(java.lang.String,java.lang.String)
boolean jsConfirm(java.lang.String,java.lang.String)
java.lang.String onJsPrompt(java.lang.String,java.lang.String,java.lang.String)
java.lang.String jsPrompt(java.lang.String,java.lang.String,java.lang.String)
boolean onJsBeforeUnload(java.lang.String,java.lang.String)
boolean jsUnload(java.lang.String,java.lang.String)
boolean jsInterrupt()
void stopLoading()
void access$6300(android.webkit.WebViewCore$EventHub,android.os.Message)
void sendMessage(int,int)
android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)
void sendMessage(int,int,java.lang.Object)
void access$6400(android.webkit.WebViewCore$EventHub,android.os.Message)
void access$6500(android.webkit.WebViewCore$EventHub,android.os.Message,long)
void access$6600(android.webkit.WebViewCore$EventHub,int)
void access$6700(android.webkit.WebViewCore$EventHub)
void removeMessages()
boolean access$6800(android.webkit.WebViewCore$EventHub,int)
void access$6900(android.webkit.WebViewCore$EventHub)
void clearCache()
boolean removeAllCacheFiles()
void clearCache(boolean)
void loadUrl(java.lang.String,java.util.Map)
int codePointAt(int)
boolean nativeKey(int,int,int,boolean,boolean,boolean,boolean)
void onUnhandledKeyEvent(android.view.KeyEvent)
void key(android.view.KeyEvent,boolean)
int nativeGetContentMinPrefWidth()
void nativeSetSize(int,int,int,float,int,int,int,int,boolean)
void contentDraw()
void viewSizeChanged(int,int,int,float,int,int,boolean)
void sendUpdateTextEntry()
java.util.Collection getOriginsSync()
boolean nativeRecordContent(android.graphics.Region,android.graphics.Point)
boolean nativeFocusBoundsChanged()
void webkitDraw()
boolean nativeDrawContent(android.graphics.Canvas,int)
void drawContentPicture(android.graphics.Canvas,int,boolean,boolean)
boolean nativePictureReady()
boolean pictureReady()
void nativeCopyContentToPicture(android.graphics.Picture)
android.graphics.Picture copyContentPicture()
void reducePriority()
void pauseUpdatePicture(android.webkit.WebViewCore)
android.webkit.WebBackForwardList getBackForwardList()
int getSize()
android.webkit.WebHistoryItem getItemAtIndex(int)
void inflate(int)
void restoreIndex(int,int)
void restoreState(int)
boolean firstLayoutDone()
void contentScrollBy(int,int,boolean)
void contentScrollTo(int,int)
void contentSpawnScrollTo(int,int)
android.webkit.WebViewWorker getHandler()
void sendNotifyProgressFinished()
void sendViewInvalidate(int,int,int,int)
void signalRepaintDone()
void sendImmediateRepaint()
void setRootLayer(int)
void didFirstLayout()
void setupViewport(boolean)
void didFirstLayout(boolean)
void updateViewport()
void setViewportSettingsFromNative()
void restoreScale(int)
void restoreScreenWidthScale(int)
void needTouchEvents(boolean)
void updateTextfield(int,boolean,java.lang.String,int)
void updateTextSelection(int,int,int,int)
void clearTextEntry()
void sendFindAgain()
void requestListBox(java.lang.String[],int[],int[])
void requestListBox(java.lang.String[],int[],int)
void requestKeyboardWithSelection(int,int,int,int)
void requestKeyboard(boolean)
android.webkit.PluginManager getInstance(android.content.Context)
java.lang.String getPluginsAPKName(java.lang.String)
java.lang.Class getPluginClass(java.lang.String,java.lang.String)
void showFullScreenPlugin(android.webkit.ViewManager$ChildView,int)
void hideFullScreenPlugin()
android.webkit.ViewManager$ChildView createView()
void attachView(int,int,int,int)
android.webkit.ViewManager$ChildView addSurface(android.view.View,int,int,int,int)
void updateSurface(android.webkit.ViewManager$ChildView,int,int,int,int)
void removeView()
void destroySurface(android.webkit.ViewManager$ChildView)
void showRect(int,int,int,int,int,int,float,float,float,float)
void centerFitRect(int,int,int,int)
void setScrollbarModes(int,int)
void nativeSetNewStorageLimit(long)
void access$300(android.webkit.WebViewCore,long)
void access$600(android.webkit.WebViewCore)
android.webkit.BrowserFrame access$700(android.webkit.WebViewCore)
android.webkit.BrowserFrame access$702(android.webkit.WebViewCore,android.webkit.BrowserFrame)
android.webkit.WebSettings access$800(android.webkit.WebViewCore)
int access$902(android.webkit.WebViewCore,int)
android.webkit.WebView access$1002(android.webkit.WebViewCore,android.webkit.WebView)
android.webkit.WebView access$1000(android.webkit.WebViewCore)
java.lang.String nativeRequestLabel(int,int)
java.lang.String access$1100(android.webkit.WebViewCore,int,int)
void nativeUpdateFrameCacheIfLoading()
void access$1200(android.webkit.WebViewCore)
void nativeScrollFocusedTextInput(float,int)
void access$1300(android.webkit.WebViewCore,float,int)
void access$1400(android.webkit.WebViewCore,java.lang.String,java.util.Map)
void nativeRegisterURLSchemeAsLocal(java.lang.String)
void access$1500(android.webkit.WebViewCore,java.lang.String)
void access$1600(android.webkit.WebViewCore,android.view.KeyEvent,boolean)
void nativeClick(int,int)
void access$1700(android.webkit.WebViewCore,int,int)
void access$1800(android.webkit.WebViewCore,int,int,int,float,int,int,boolean)
void nativeSetScrollOffset(int,int,int)
void access$1900(android.webkit.WebViewCore,int,int,int)
void nativeSetGlobalBounds(int,int,int,int)
void access$2000(android.webkit.WebViewCore,int,int,int,int)
void access$2100(android.webkit.WebViewCore,int)
void nativePause()
void access$2400(android.webkit.WebViewCore)
void nativeResume()
void access$2500(android.webkit.WebViewCore)
void access$2600(android.webkit.WebViewCore,boolean)
void nativeFreeMemory()
void access$2700(android.webkit.WebViewCore)
android.webkit.CallbackProxy access$2800(android.webkit.WebViewCore)
void nativeReplaceTextfieldText(int,int,java.lang.String,int,int,int)
void access$2900(android.webkit.WebViewCore,int,int,java.lang.String,int,int,int)
void passToJs(int,java.lang.String,int,int,boolean,boolean,boolean,boolean)
void access$3000(android.webkit.WebViewCore,int,java.lang.String,int,int,boolean,boolean,boolean,boolean)
void nativeSaveDocumentState(int)
void access$3100(android.webkit.WebViewCore,int)
android.content.Context access$3200(android.webkit.WebViewCore)
void nativeTouchUp(int,int,int,int,int)
void access$3300(android.webkit.WebViewCore,int,int,int,int,int)
boolean nativeHandleTouchEvent(int,int,int,int)
boolean access$3400(android.webkit.WebViewCore,int,int,int,int)
void nativeSetFocusControllerActive(boolean)
void access$3500(android.webkit.WebViewCore,boolean)
void nativeMoveFocus(int,int)
void access$3600(android.webkit.WebViewCore,int,int)
void nativeMoveMouse(int,int,int)
void access$3700(android.webkit.WebViewCore,int,int,int)
void nativeMoveMouseIfLatest(int,int,int,int)
void access$3800(android.webkit.WebViewCore,int,int,int,int)
java.lang.String nativeRetrieveHref(int,int)
java.lang.String access$3900(android.webkit.WebViewCore,int,int)
java.lang.String nativeRetrieveAnchorText(int,int)
java.lang.String access$4000(android.webkit.WebViewCore,int,int)
void nativeUpdateFrameCache()
void access$4100(android.webkit.WebViewCore)
void access$4200(android.webkit.WebViewCore)
void nativeDeleteSelection(int,int,int)
void access$4300(android.webkit.WebViewCore,int,int,int)
void nativeSetSelection(int,int)
void access$4400(android.webkit.WebViewCore,int,int)
void nativeSendListBoxChoices(boolean[],int)
void access$4500(android.webkit.WebViewCore,boolean[],int)
void nativeSendListBoxChoice(int)
void access$4600(android.webkit.WebViewCore,int)
void nativeSetBackgroundColor(int)
void access$4700(android.webkit.WebViewCore,int)
void nativeDumpDomTree(boolean)
void access$4800(android.webkit.WebViewCore,boolean)
void nativeDumpRenderTree(boolean)
void access$4900(android.webkit.WebViewCore,boolean)
void nativeDumpNavTree()
void access$5000(android.webkit.WebViewCore)
void nativeDumpV8Counters()
void access$5100(android.webkit.WebViewCore)
void nativeSetJsFlags(java.lang.String)
void access$5200(android.webkit.WebViewCore,java.lang.String)
void nativeGeolocationPermissionsProvide(java.lang.String,boolean,boolean)
void access$5300(android.webkit.WebViewCore,java.lang.String,boolean,boolean)
int access$5402(android.webkit.WebViewCore,int)
int access$5502(android.webkit.WebViewCore,int)
void nativeSplitContent()
void access$5600(android.webkit.WebViewCore)
boolean access$5702(android.webkit.WebViewCore,boolean)
void nativeClearContent()
void access$5800(android.webkit.WebViewCore)
void nativeProvideVisitedHistory(java.lang.String[])
void access$5900(android.webkit.WebViewCore,java.lang.String[])
boolean nativeValidNodeAndBounds(int,int,android.graphics.Rect)
boolean access$6000(android.webkit.WebViewCore,int,int,android.graphics.Rect)
void nativeFullScreenPluginHidden(int)
void access$6100(android.webkit.WebViewCore,int)
boolean access$6202(android.webkit.WebViewCore,boolean)
void onReceiveValue(java.lang.String[])
android.webkit.WebSettings$LayoutAlgorithm[] values()
android.webkit.WebSettings$LayoutAlgorithm valueOf(java.lang.String)
boolean exactMatch(android.webkit.CookieManager$Cookie)
boolean domainMatch(java.lang.String)
boolean pathMatch(java.lang.String)
void <init>(android.webkit.WebView$InvokeListBox)
void <init>(android.webkit.WebStorage)
void syncValues()
void update()
void getUsageForOrigin(java.lang.String,android.webkit.ValueCallback)
void getQuotaForOrigin(java.lang.String,android.webkit.ValueCallback)
void nativeSetQuotaForOrigin(java.lang.String,long)
void setQuotaForOrigin(java.lang.String,long)
void nativeDeleteOrigin(java.lang.String)
void deleteOrigin(java.lang.String)
void nativeDeleteAllData()
void deleteAllData()
void nativeSetAppCacheMaximumSize(long)
void setAppCacheMaximumSize(long)
long nativeGetQuotaForOrigin(java.lang.String)
long nativeGetUsageForOrigin(java.lang.String)
void access$000(java.lang.String,long)
void access$300(android.webkit.WebStorage)
java.util.Map access$400(android.webkit.WebStorage)
void access$500(android.webkit.WebStorage,android.os.Message)
void parseContentTypeHeader(java.lang.String)
java.lang.String transferEncoding()
byte[] decode(byte[])
void <init>(java.lang.String,android.webkit.LoadListener)
android.webkit.WebView access$200(android.webkit.ViewManager)
void <init>(android.webkit.ViewManager$ChildView)
boolean access$400(android.webkit.ViewManager)
void attachViewOnUIThread()
void removeViewOnUIThread()
void access$100(android.webkit.ViewManager$ChildView)
void access$500(android.webkit.ViewManager$ChildView)
void <init>(int,float,boolean)
java.util.Map access$102(android.webkit.CookieManager,java.util.Map)
void clearAllCookies()
void <init>(android.webkit.ViewManager,android.view.SurfaceView)
void requestLayout(android.webkit.ViewManager$ChildView)
void startZoom()
void endZoom()
void scaleAll()
void hideAll()
void showAll()
void postResetStateAll()
android.webkit.ViewManager$ChildView hitTest(int,int)
void access$000(android.webkit.ViewManager,android.webkit.ViewManager$ChildView)
void onNewHistoryItem(android.webkit.WebHistoryItem)
void onIndexChanged(android.webkit.WebHistoryItem,int)
void clearSessionCookies()
void responseAlert(java.lang.String)
void <init>(android.webkit.CallbackProxy,android.webkit.JsPromptResult,android.widget.EditText)
void <init>(android.webkit.LoadListener,android.webkit.WebSettings,java.lang.String)
boolean isNetworkUrl(java.lang.String)
void setReferrer(java.lang.String)
void setPostData(byte[])
void setContentTypeForPost(java.lang.String)
void setHeaders(java.util.HashMap)
android.webkit.LoadListener getLoadListener()
java.lang.String url()
boolean executeLoad()
java.lang.String host()
boolean verifyURLEncoding(java.lang.String)
android.webkit.Network getInstance(android.content.Context)
boolean handleHTTPLoad()
boolean handleLocalFile(java.lang.String,android.webkit.LoadListener,android.webkit.WebSettings)
boolean isAssetUrl(java.lang.String)
boolean isResourceUrl(java.lang.String)
boolean isFileUrl(java.lang.String)
boolean isContentUrl(java.lang.String)
boolean isDataUrl(java.lang.String)
boolean isAboutUrl(java.lang.String)
void populateStaticHeaders()
void populateHeaders()
boolean handleCache()
void setRequestData(java.lang.String,java.util.Map,byte[])
boolean requestURL(java.lang.String,java.util.Map,byte[],android.webkit.LoadListener)
void <init>(android.webkit.LoadListener,android.webkit.CacheManager$CacheResult)
void setCacheLoader(android.webkit.CacheLoader)
void startCacheLoad(android.webkit.CacheManager$CacheResult)
long postIdentifier()
android.webkit.CacheManager$CacheResult getCacheFile(java.lang.String,long,java.util.Map)
boolean checkCache(java.util.Map)
boolean isValidProxySet()
java.lang.String getProxyUsername()
java.lang.String getProxyPassword()
java.lang.String authorizationHeader(boolean)
java.lang.String computeBasicAuthResponse(java.lang.String,java.lang.String)
android.webkit.CookieManager getInstance()
android.net.WebAddress getWebAddress()
java.lang.String getCookie(android.net.WebAddress)
void <init>(android.content.Context,int,java.lang.Object[])
void <init>(android.webkit.WebView$InvokeListBox,android.content.Context,android.webkit.WebView$InvokeListBox$Container[],boolean)
android.webkit.WebView$InvokeListBox$Container item(int)
android.content.Context access$10700(android.webkit.WebView)
void setOrientation(int)
android.content.Context access$10800(android.webkit.WebView)
void assertTrue(boolean)
void setCheckMarkDrawable(android.graphics.drawable.Drawable)
android.content.Context access$10900(android.webkit.WebView)
boolean areAllItemsEnabled()
void setCacheSize(int)
void init(android.content.Context)
android.webkit.CookieSyncManager createInstance(android.content.Context)
void <init>(android.view.WindowManager)
void addHandler(android.os.Handler)
android.webkit.WebViewDatabase getInstance(android.content.Context)
void nativeCreateFrame(android.webkit.WebViewCore,android.content.res.AssetManager,android.webkit.WebBackForwardList)
boolean isJavaScriptUrl(java.lang.String)
java.lang.String stringByEvaluatingJavaScriptFromString(java.lang.String)
void nativeLoadUrl(java.lang.String,java.util.Map)
void nativePostUrl(java.lang.String,byte[])
void postUrl(java.lang.String,byte[])
void nativeLoadData(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
void loadData(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
void nativeGoBackOrForward(int)
void goBackOrForward(int)
void resetLoadingStates()
void onReceivedError(int,java.lang.String,java.lang.String)
void reportError(int,java.lang.String,java.lang.String)
boolean committed()
int loadType()
void onPageStarted(java.lang.String,android.graphics.Bitmap)
android.webkit.WebHistoryItem getCurrentItem()
java.util.HashMap getFormTextData()
void setFormData(java.lang.String,java.util.HashMap)
void loadStarted(java.lang.String,android.graphics.Bitmap,int,boolean)
void transitionToCommitted(int,boolean)
void switchOutDrawHistory()
void onPageFinished(java.lang.String)
void loadFinished(java.lang.String,int,boolean)
void onReceivedCertificate(android.net.http.SslCertificate)
void certificate(android.net.http.SslCertificate)
void nativeDestroyFrame()
boolean hasPasswordField()
java.lang.String[] getUsernamePassword(java.lang.String)
void setUsernamePassword(java.lang.String,java.lang.String)
void nativeCallPolicyFunction(int,int)
void nativeOrientationChanged(int)
void onReceivedTitle(java.lang.String)
void setTitle(java.lang.String)
java.lang.String externalRepresentation()
void externalRepresentation(android.os.Message)
java.lang.String documentAsText()
void documentAsText(android.os.Message)
void nativeAddJavascriptInterface(int,java.lang.Object,java.lang.String)
void windowObjectCleared(int)
boolean handleUrl(java.lang.String)
boolean shouldOverrideUrlLoading(java.lang.String)
void addJavascriptInterface(java.lang.Object,java.lang.String)
int getFileSize(java.lang.String)
int getFile(java.lang.String,byte[],int,int)
java.lang.String[] getUsernamePassword()
boolean onSavePassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
android.webkit.LoadListener getLoadListener(android.content.Context,android.webkit.BrowserFrame,java.lang.String,int,boolean,boolean,boolean,boolean,long,java.lang.String,java.lang.String)
void onLoadResource(java.lang.String)
int getNativeLoaderCount()
android.webkit.LoadListener startLoadingResource(int,java.lang.String,java.lang.String,java.util.HashMap,byte[],long,int,boolean,boolean,boolean,java.lang.String,java.lang.String)
void onProgressChanged(int)
void onReceivedIcon(android.graphics.Bitmap)
void didReceiveIcon(android.graphics.Bitmap)
void onReceivedTouchIconUrl(java.lang.String,boolean)
void didReceiveTouchIconUrl(java.lang.String,boolean)
android.webkit.BrowserFrame createWindow(boolean,boolean)
void onRequestFocus()
void requestFocus()
void closeWindow(android.webkit.WebViewCore)
void onFormResubmission(android.os.Message,android.os.Message)
void decidePolicyForFormResubmission(int)
void doUpdateVisitedHistory(java.lang.String,boolean)
void updateVisitedHistory(java.lang.String,boolean)
android.webkit.CallbackProxy getCallbackProxy()
java.lang.String getRawResFilename(int)
float density()
void nativeStopLoading()
void setExtra(java.lang.String)
java.lang.String getExtra()
void access$400(android.webkit.WebView$HitTestResult,int)
void access$500(android.webkit.WebView$HitTestResult,java.lang.String)
java.lang.String guessUrl(java.lang.String)
java.lang.String encode(java.lang.String,java.lang.String)
java.lang.String composeSearchUrl(java.lang.String,java.lang.String,java.lang.String)
int parseHex(byte)
boolean isCookielessProxyUrl(java.lang.String)
boolean isHttpUrl(java.lang.String)
boolean isHttpsUrl(java.lang.String)
boolean isValidUrl(java.lang.String)
java.lang.String parseContentDisposition(java.lang.String)
java.lang.String decode(java.lang.String)
java.lang.String guessFileName(java.lang.String,java.lang.String,java.lang.String)
java.util.regex.Pattern compile(java.lang.String,int)
void <init>(java.util.List)
boolean accept(java.io.File,java.lang.String)
void <init>(android.content.Context,android.util.AttributeSet,int,java.util.Map)
void <init>(android.webkit.WebView,android.webkit.WebView$1)
android.view.View getZoomControls()
void setZoomInEnabled(boolean)
void setZoomOutEnabled(boolean)
void updateZoomButtonsEnabled()
void <init>(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
void setNewZoomScale(float,boolean,boolean)
void setHorizontalScrollbarOverlay(boolean)
void setVerticalScrollbarOverlay(boolean)
boolean overlayHorizontalScrollbar()
boolean overlayVerticalScrollbar()
int getTitleHeight()
int getVisibleTitleHeight()
int getViewHeightWithTitle()
android.net.http.SslCertificate getCertificate()
void setCertificate(android.net.http.SslCertificate)
void savePassword(java.lang.String,java.lang.String,java.lang.String)
void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)
void clearTextEntry(boolean)
void clearHelpers()
void setWebViewClient(android.webkit.WebViewClient)
void setWebChromeClient(android.webkit.WebChromeClient)
void nativeDestroy()
void enablePlatformNotifications()
void disablePlatformNotifications()
void setJsFlags(java.lang.String)
void setNetworkAvailable(boolean)
void setNetworkType(java.lang.String,java.lang.String)
android.webkit.WebBackForwardList copyBackForwardList()
int getCurrentIndex()
byte[] getFlattenedData()
void putSerializable(java.lang.String,java.io.Serializable)
android.os.Bundle saveState(android.net.http.SslCertificate)
android.webkit.WebBackForwardList saveState(android.os.Bundle)
boolean savePicture(android.os.Bundle,java.io.File)
void putFloat(java.lang.String,float)
void restoreHistoryPictureFields(android.graphics.Picture,android.os.Bundle)
boolean restorePicture(android.os.Bundle,java.io.File)
void <init>(android.webkit.WebView,java.io.FileInputStream,android.os.Bundle)
android.net.http.SslCertificate restoreState(android.os.Bundle)
java.io.Serializable getSerializable(java.lang.String)
void addHistoryItem(android.webkit.WebHistoryItem)
void setCurrentIndex(int)
android.webkit.WebBackForwardList restoreState(android.os.Bundle)
void loadUrl(java.lang.String)
void loadData(java.lang.String,java.lang.String,java.lang.String)
void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
void reload()
boolean getClearPending()
boolean canGoBack()
void goBack()
boolean canGoForward()
void goForward()
boolean canGoBackOrForward(int)
void goBackOrForward(int,boolean)
int getFinalY()
int pinLocY(int)
boolean extendScroll(int)
void setFinalY(int)
int computeDuration(int,int)
void extendDuration(int)
boolean pageUp(boolean)
boolean pinScrollTo(int,int,boolean,int)
boolean pinScrollBy(int,int,boolean,int)
boolean pageDown(boolean)
int computeRealVerticalScrollRange()
void clearView()
boolean inEditingMode()
void setFocusControllerInactive()
float getScale()
void setInitialScale(int)
android.widget.ZoomButtonsController getZoomButtonsController()
void invokeZoomPicker()
boolean nativeHasCursorNode()
boolean nativeCursorIsTextInput()
java.lang.String nativeCursorText()
boolean nativeCursorIsAnchor()
java.lang.String nativeImageURI(int,int)
void domChangedFocus()
int nativeCursorFramePointer()
int nativeCursorNodePointer()
void requestFocusNodeHref(android.os.Message)
void setData(android.os.Bundle)
void requestImageRef(android.os.Message)
int pinLoc(int,int,int)
int pinLocX(int)
int computeRealHorizontalScrollRange()
void setEmbeddedTitleBar(android.view.View)
int viewToContentDimension(int)
float viewToContentXf(int)
float viewToContentYf(int)
android.graphics.Rect contentToViewRect(android.graphics.Rect)
void viewInvalidate(int,int,int,int)
void viewInvalidateDelayed(long,int,int,int,int)
void invalidateContentRect(android.graphics.Rect)
int getFinalX()
void setFinalX(int)
void contentSizeChanged(boolean)
void recordNewContentSize(int,int,boolean)
void onScaleChanged(float,float)
boolean sendViewSizeZoom()
android.graphics.Rect sendOurVisibleRect()
void calcOurContentVisibleRect(android.graphics.Rect)
int nativeMoveGeneration()
void calcOurVisibleRect(android.graphics.Rect)
void calcOurContentVisibleRectF(android.graphics.RectF)
int computeMaxScrollX()
int computeMaxScrollY()
void onPull(float)
void onRelease()
java.lang.String getOriginalUrl()
java.lang.String getTitle()
android.graphics.Bitmap getFavicon()
java.lang.String getTouchIconUrl()
int getContentHeight()
int getContentWidth()
boolean isPaused()
void freeMemory()
void clearFormData()
void setClearPending()
void clearHistory()
void clearSslPreferences()
android.webkit.WebBackForwardList clone()
void nativeFindNext(boolean)
void findNext(boolean)
int nativeFindAll(java.lang.String,java.lang.String)
void nativeSetFindIsUp(boolean)
void setFindIsUp(boolean)
int findIndex()
int nativeFindIndex()
java.lang.String findAddress(java.lang.String,boolean)
java.lang.String findAddress(java.lang.String)
java.lang.String nativeFindAddress(java.lang.String,boolean)
void nativeSetFindIsEmpty()
void clearMatches()
void notifyFindDialogDismissed()
void setFindDialogHeight(int)
void documentHasImages(android.os.Message)
int getCurrX()
float getCurrVelocity()
void onAbsorb(int)
void startScroll(int,int,int,int,int)
boolean setContentScrollBy(int,int,boolean)
boolean setContentScrollTo(int,int)
void spawnContentScrollTo(int,int)
android.webkit.WebViewClient getWebViewClient()
void setDownloadListener(android.webkit.DownloadListener)
void setWebBackForwardListClient(android.webkit.WebBackForwardListClient)
android.webkit.WebBackForwardListClient getWebBackForwardListClient()
void setPictureListener(android.webkit.WebView$PictureListener)
void addPackageNames(java.util.Set)
void addPackageName(java.lang.String)
void removePackageName(java.lang.String)
android.webkit.PluginList getPluginList()
void refreshPlugins(boolean)
void nativeRecordButtons(boolean,boolean,boolean)
void drawCoreAndCursorRing(android.graphics.Canvas,int,boolean)
void drawContent(android.graphics.Canvas)
void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)
void drawPaint(android.graphics.Paint)
void onDrawSubstitute()
boolean drawEdgeGlows(android.graphics.Canvas)
void setSize(int,int)
void rotate(float)
void centerKeyPressOnTextField()
void setUpSelect()
boolean nativeWordSelection(int,int)
void nativeSetExtendSelection()
boolean inAnimateZoom()
android.graphics.Rect nativeFocusCandidateNodeBounds()
boolean intersects(android.graphics.Rect,android.graphics.Rect)
void setRect(int,int,int,int)
int nativeFocusCandidateTextSize()
boolean didUpdateTextViewBounds(boolean)
void nativeDrawExtras(android.graphics.Canvas,int)
void drawExtras(android.graphics.Canvas,int,boolean)
void drawPicture(android.graphics.Picture)
boolean nativeFocusCandidateIsPassword()
boolean nativeEvaluateLayersAnimations()
void nativeSetSelectionPointer(boolean,float,int,int)
boolean drawHistory()
android.graphics.Point nativeCursorPosition()
android.webkit.WebViewCore$CursorData cursorData()
void deleteSelection(int,int)
void displaySoftKeyboard(boolean)
void hideSoftKeyboard()
boolean nativeFocusCandidateIsTextInput()
java.lang.String nativeFocusCandidateText()
int nativeFocusCandidatePointer()
int nativeTextGeneration()
boolean nativeFocusCandidateIsRtlText()
void setNodePointer(int)
int nativeFocusCandidateType()
android.graphics.Rect nativeFocusCandidatePaddingRect()
void requestFormData(java.lang.String,int)
void requestLabel(int,int)
void nativeDumpDisplayTree(java.lang.String)
void dumpDisplayTree()
void dumpDomTree(boolean)
void dumpRenderTree(boolean)
void dumpV8Counters()
boolean uiOverrideKeyEvent(android.view.KeyEvent)
boolean nativeFocusIsPlugin()
boolean nativeCursorWantsKeyEvents()
void letPluginHandleNavKey(int,long,boolean)
void moveSelection(float,float)
boolean navHandledKey(int,int,boolean,long)
int keyCodeToSoundsEffect(int)
void nativeInstrumentReport()
void setDefaultSelection()
boolean nativeHasFocusNode()
boolean copySelection()
boolean nativeCursorIntersects(android.graphics.Rect)
void nativeSetFollowedLink(boolean)
boolean uiOverrideUrlLoading(java.lang.String)
boolean inFullScreenMode()
void nativeResetSelection()
android.graphics.Rect nativeCursorNodeBounds()
void nativeHideCursor()
void emulateShiftHeld()
void nativeSelectAll()
boolean selectDialogIsUp()
android.text.IClipboard asInterface(android.os.IBinder)
void setClipboardText(java.lang.CharSequence)
java.lang.String nativeGetSelection()
void dismissZoomControl()
void setActiveWebView(android.webkit.WebView)
void removeActiveWebView(android.webkit.WebView)
void <init>(android.webkit.WebView,boolean)
int sign(float)
android.webkit.WebView$DragTracker getDragTracker()
void setDragTracker(android.webkit.WebView$DragTracker)
android.graphics.Rect nativeFocusNodeBounds()
boolean hitFocusedPlugin(int,int)
boolean shouldForwardTouchEvent()
void cancelTouch()
void doShortPress()
boolean nativeStartSelection(int,int)
void startTouch(float,float,long)
void nativeExtendSelection(int,int)
void startDrag()
void doDrag(int,int)
void doDoubleTap()
void cancelWebCoreTouchEvent(int,int,boolean)
boolean nativeHitSelection(int,int)
void doFling()
void stopTouch()
void setMapTrackballToArrowKeys(boolean)
void resetTrackballTime()
android.graphics.Rect nativeGetCursorRingBounds()
void nativeSelectBestAt(android.graphics.Rect)
void doTrackball(long)
void nativeMoveSelection(int,int)
int scaleTrackballX(float,int)
int scaleTrackballY(float,int)
int nativeSelectionX()
int nativeSelectionY()
void fling(int,int,int,int,int,int,int,int,int,int)
void flingScroll(int,int)
double hypot(double,double)
boolean zoomWithPreview(float,boolean)
android.webkit.WebView$ExtendedZoomControls createZoomControls()
void setOnZoomListener(android.widget.ZoomButtonsController$OnZoomListener)
boolean zoomOut()
void updateSelection()
void scrollFocusedTextInput(float,int)
void initiateTextFieldDrag(float,float,long)
boolean textFieldDrag(android.view.MotionEvent)
boolean nativeMotionUp(int,int,int)
void touchUpOnTextField(android.view.MotionEvent)
boolean nativePointInNavCache(int,int,int)
int nativeCacheHitFramePointer()
int nativeCacheHitNodePointer()
android.graphics.Rect nativeCacheHitNodeBounds()
void doMotionUp(int,int)
boolean isPluginFitOnScreen(android.webkit.ViewManager$ChildView)
int nativeGetBlockLeftEdge(int,int,float)
void overrideLoading(java.lang.String)
void nativeSetHeightCanMeasure(boolean)
android.graphics.Rect nativeSubtractLayers(android.graphics.Rect)
void replaceTextfieldText(int,int,java.lang.String,int,int)
void passToJavaScript(java.lang.String,android.view.KeyEvent)
android.webkit.WebViewCore getWebViewCore()
void setSelectionFromWebKit(int,int)
void updateTextSelectionFromMessage(int,int,android.webkit.WebViewCore$TextSelectionData)
void <init>(android.webkit.WebView,java.lang.String[],int[],int[],android.webkit.WebView$1)
void updateZoomRange(android.webkit.WebViewCore$RestoreState,int,int,boolean)
void <init>(android.webkit.WebView,java.lang.String[],int[],int,android.webkit.WebView$1)
void sendMoveFocus(int,int)
void sendMoveMouse(int,int,int,int)
void sendMoveMouseIfLatest(boolean)
void sendMotionUp(int,int,int,int,int)
int getScaledMaxXScroll()
int getScaledMaxYScroll()
void viewInvalidate()
boolean nativeMoveCursor(int,int,boolean)
void nativeDebugDump()
void debugDump()
void drawPage(android.graphics.Canvas)
void setTouchInterval(int)
void nativeUpdateCachedTextfield(java.lang.String,int)
void updateCachedTextfield(java.lang.String)
android.webkit.ViewManager getViewManager()
android.widget.ZoomButtonsController access$000(android.webkit.WebView)
void access$300(android.webkit.WebView,android.graphics.Picture,android.os.Bundle)
void access$1700(android.webkit.WebView)
boolean access$2000(android.webkit.WebView)
boolean access$2002(android.webkit.WebView,boolean)
int access$2102(android.webkit.WebView,int)
float access$2200(android.webkit.WebView)
int access$2300(android.webkit.WebView)
int access$2402(android.webkit.WebView,int)
float access$2500(android.webkit.WebView)
int access$2600(android.webkit.WebView)
float access$2700(android.webkit.WebView)
boolean access$2900(android.webkit.WebView,boolean)
boolean access$3102(android.webkit.WebView,boolean)
long access$3200(android.webkit.WebView)
void access$3300(android.webkit.WebView,float,float,long)
float access$2202(android.webkit.WebView,float)
float access$2502(android.webkit.WebView,float)
android.webkit.WebView$ExtendedZoomControls access$3400(android.webkit.WebView)
void nativeSetRootLayer(int)
void nativeCreate(int)
android.content.Context access$11100(android.webkit.WebView)
android.content.Context access$11200(android.webkit.WebView)
android.content.Context access$11300(android.webkit.WebView)
void nativeSetPosition(double,double,double)
void setPosition(double,double,double)
void nativeSetError(int,java.lang.String)
void setError(int,java.lang.String)
android.webkit.MockGeolocation getInstance()
boolean createCacheDirectory()
java.io.File getCacheFileBaseDir()
void setCacheDisabled(boolean)
boolean cacheDisabled()
boolean startCacheTransaction()
boolean enableTransaction()
boolean endCacheTransaction()
boolean disableTransaction()
boolean startTransaction()
void trimCacheIfNeeded()
boolean endTransaction()
android.webkit.CacheManager$CacheResult getCacheFile(java.lang.String,java.util.Map)
java.lang.String getDatabaseKey(java.lang.String,long)
android.webkit.CacheManager$CacheResult getCache(java.lang.String)
boolean checkCacheRedirect(int)
void removeCache(java.lang.String)
android.webkit.CacheManager$CacheResult createCacheFile(java.lang.String,int,android.net.http.Headers,java.lang.String,long,boolean)
android.webkit.CacheManager$CacheResult createCacheFile(java.lang.String,int,android.net.http.Headers,java.lang.String,boolean)
java.util.ArrayList getSetCookie()
android.webkit.CacheManager$CacheResult parseHeaders(int,android.net.http.Headers,java.lang.String)
void setupFiles(java.lang.String,android.webkit.CacheManager$CacheResult)
void saveCacheFile(java.lang.String,long,android.webkit.CacheManager$CacheResult)
void saveCacheFile(java.lang.String,android.webkit.CacheManager$CacheResult)
void addCache(java.lang.String,android.webkit.CacheManager$CacheResult)
boolean cleanupCacheFile(android.webkit.CacheManager$CacheResult)
boolean hasCache()
boolean cacheEmpty()
long getCacheTotalSize()
java.util.List trimCache(long)
java.util.List getAllCacheFileNames()
java.lang.String[] list(java.io.FilenameFilter)
void appendAsHex(int,java.lang.StringBuffer)
java.lang.String getLocation()
java.lang.String getExpires()
long parseDate(java.lang.String)
java.lang.String getContentDisposition()
java.lang.String getXPermittedCrossDomainPolicies()
java.lang.String getLastModified()
java.lang.String getEtag()
java.lang.String getCacheControl()
java.lang.String getPragma()
void <init>(android.webkit.HTML5Audio)
void <init>(android.webkit.HTML5Audio,android.webkit.HTML5Audio$1)
void onZoom(boolean)
void <init>(android.webkit.WebSyncManager)
void syncFromRamToFlash()
void <init>(android.webkit.WebSyncManager,android.webkit.WebSyncManager$1)
android.webkit.ByteArrayBuilder$Chunk obtainChunk(int)
void addLast(java.lang.Object)
java.lang.Object getLast()
void append(byte[],int,int)
android.webkit.ByteArrayBuilder$Chunk getFirstChunk()
java.util.ListIterator listIterator(int)
int getByteSize()
java.lang.ref.Reference poll()
void processPoolLocked()
int getThreadPriority(int)
void <init>(android.webkit.WebViewCore$EventHub)
void transferMessages()
void blockMessages()
int access$2202(android.webkit.WebViewCore$EventHub,int)
int access$2300(android.webkit.WebViewCore$EventHub)
int access$2200(android.webkit.WebViewCore$EventHub)
android.webkit.WebSettings$ZoomDensity[] values()
android.webkit.WebSettings$ZoomDensity valueOf(java.lang.String)
void beginTransaction()
void upgradeDatabase()
void setTransactionSuccessful()
void endTransaction()
void setLockingEnabled(boolean)
void upgradeCacheDatabase()
void bootstrapCacheDatabase()
void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String)
void setVersion(int)
boolean hasEntries(int)
java.util.ArrayList getCookiesForDomain(java.lang.String)
void deleteCookies(java.lang.String,java.lang.String,java.lang.String)
void addCookie(android.webkit.CookieManager$Cookie)
boolean hasCookies()
void clearCookies()
android.database.Cursor rawQuery(java.lang.String,java.lang.String[])
void prepareForInsert()
void bind(int,java.lang.String)
void bind(int,long)
void bind(int,int)
long execute()
android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)
void bindString(int,java.lang.String)
void execute()
void clearBindings()
boolean hasUsernamePassword()
void clearUsernamePassword()
boolean hasHttpAuthUsernamePassword()
void clearHttpAuthUsernamePassword()
boolean hasFormData()
void nativeConstructor()
void nativeFinalize()
void sharedTimerFired()
void fireSharedTimer()
void nativeServiceFuncPtrQueue()
java.lang.String[] getPluginDirectories()
void nativeUpdatePluginDirectories(java.lang.String[],boolean)
void signalServiceFuncPtrQueue()
void setCookie(java.lang.String,java.lang.String)
void setCookies(java.lang.String,java.lang.String)
java.lang.String getCookie(java.lang.String)
java.lang.String cookies(java.lang.String)
boolean acceptCookie()
boolean cookiesEnabled()
java.lang.String getPluginSharedDataDirectory()
void setSharedTimer(long)
void stopSharedTimer()
java.lang.String[] getKeyStrengthList()
java.lang.String getSignedPublicKey(android.content.Context,int,java.lang.String)
java.lang.String getSignedPublicKey(int,java.lang.String,java.lang.String)
android.webkit.ConsoleMessage$MessageLevel[] values()
void setLocation(java.lang.String)
void setExpires(java.lang.String)
void setContentDisposition(java.lang.String)
void setXPermittedCrossDomainPolicies(java.lang.String)
android.webkit.WebSettings$TextSize[] values()
android.webkit.WebSettings$TextSize valueOf(java.lang.String)
void <init>(android.webkit.WebView$InvokeListBox,android.webkit.WebView$1)
void <init>(android.webkit.WebView,java.lang.String[],int[],int[])
void <init>(android.webkit.WebView,java.lang.String[],int[],int)
void <init>(android.webkit.WebView$InvokeListBox,long,android.widget.ListView,android.widget.Adapter)
int getHttpStatusCode()
java.lang.String getLocalPath()
long getExpires()
java.lang.String getExpiresString()
java.lang.String getETag()
java.lang.String getMimeType()
java.lang.String getEncoding()
void setInputStream(java.io.InputStream)
void setEncoding(java.lang.String)
void <init>(android.webkit.Network)
android.net.http.RequestHandle queueSynchronousRequest(java.lang.String,android.net.WebAddress,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int)
void attachRequestHandle(android.net.http.RequestHandle)
void processRequest()
android.net.http.RequestHandle queueRequest(java.lang.String,android.net.WebAddress,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int)
org.apache.http.HttpHost getProxyHost()
java.lang.String getHostName()
java.lang.String getProxyHostname()
void setProxyUsername(java.lang.String)
void setProxyPassword(java.lang.String)
boolean saveState(android.os.Bundle)
boolean restoreState(android.os.Bundle)
void clearUserSslPrefTable()
void handleSslErrorRequest(android.webkit.LoadListener)
boolean checkSslPrefTable(android.webkit.LoadListener,android.net.http.SslError)
void handleAuthRequest(android.webkit.LoadListener)
void startTiming()
void stopTiming()
void <init>(android.webkit.WebView$7,android.graphics.Picture)
void <init>(android.webkit.WebIconDatabase$EventHandler,java.lang.String,android.graphics.Bitmap,android.webkit.WebIconDatabase$IconListener)
void onReceivedIcon(java.lang.String,android.graphics.Bitmap)
void dispatch()
boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)
void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)
void onPageFinished(android.webkit.WebView,java.lang.String)
void onLoadResource(android.webkit.WebView,java.lang.String)
void onTooManyRedirects(android.webkit.WebView,android.os.Message,android.os.Message)
void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)
void onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message)
void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)
void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)
void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)
boolean shouldOverrideKeyEvent(android.webkit.WebView,android.view.KeyEvent)
void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)
void onScaleChanged(android.webkit.WebView,float,float)
void <init>(android.webkit.Plugin)
int compare(android.webkit.CookieManager$Cookie,android.webkit.CookieManager$Cookie)
void <init>(android.webkit.CookieManager$1)
java.util.ArrayList getUpdatedCookiesSince(long)
void syncFromRamToFlash(java.util.ArrayList)
java.util.ArrayList deleteLRUDomain()
void syncedACookie(android.webkit.CookieManager$Cookie)
void deleteACookie(android.webkit.CookieManager$Cookie)
void stopSync()
void startSync()
void resetSync()
void sync()
boolean nativeCursorMatchesFocus()
void sendDomEvent(android.view.KeyEvent)
int getMaxScrollX(android.widget.TextView,android.text.Layout,int)
void lineUpScroll()
java.lang.String nativeFocusCandidateName()
void updateCursorControllerPositions()
boolean nativeMoveCursorToNextTextInput()
void onSelectionChanged(int,int)
void updateCachedTextfield()
void getChars(java.lang.CharSequence,int,int,char[],int)
int getInitialScrollX(android.widget.TextView,android.text.Spannable)
int getInitialScrollY(android.widget.TextView,android.text.Spannable)
android.text.method.MovementMethod getMovementMethod()
boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)
boolean bringPointIntoView(int)
void access$000(android.webkit.WebTextView$AutoCompleteAdapter,android.widget.TextView)
void createBackground()
void setFlags(int)
void setTextColor(int)
void setFilters(android.text.InputFilter[])
void setMaxLength(int)
boolean nativeFocusCandidateHasNextTextfield()
int nativeFocusCandidateFramePointer()
int nativeFocusCandidateMaxLength()
void setHorizontallyScrolling(boolean)
void invoke(java.lang.String,boolean,boolean)
void setAcceptCookie(boolean)
void setCookie(android.net.WebAddress,java.lang.String)
java.lang.String[] getHostAndPath(android.net.WebAddress)
java.util.ArrayList parseCookie(java.lang.String,java.lang.String,java.lang.String)
java.lang.String getBaseDomain(java.lang.String)
void removeSessionCookie()
void removeAllCookie()
void removeExpiredCookie()
void sort(java.lang.Object[])
java.util.LinkedList getHandlers()
void setUrlInterceptDisabled(boolean)
boolean urlInterceptDisabled()
void addFirst(java.lang.Object)
boolean registerHandler(android.webkit.UrlInterceptHandler)
boolean unregisterHandler(android.webkit.UrlInterceptHandler)
java.util.ListIterator listIterator()
android.webkit.CacheManager$CacheResult service(java.lang.String,java.util.Map)
android.webkit.CacheManager$CacheResult getSurrogate(java.lang.String,java.util.Map)
android.webkit.PluginData getPluginData(java.lang.String,java.util.Map)
void <init>(java.lang.String,java.lang.String,int,android.webkit.ConsoleMessage$MessageLevel)
android.webkit.ConsoleMessage$MessageLevel messageLevel()
void <init>(android.webkit.CallbackProxy,android.webkit.JsPromptResult)
void nativeOnBuffering(int,int)
void onBufferingUpdate(android.media.MediaPlayer,int)
void resetMediaPlayer()
void schedule(java.util.TimerTask,long,long)
void onSeekComplete(android.media.MediaPlayer)
void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)
void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)
void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)
void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)
void setOnSeekCompleteListener(android.media.MediaPlayer$OnSeekCompleteListener)
void setDataSource(java.lang.String)
void prepareAsync()
int purge()
void seekTo(int)
float getMaxTimeSeekable()
void wakeUp()
boolean getResult()
void setReady()
void setResult(java.lang.Object)
java.lang.Object getResult()
void handleAuthResponse(java.lang.String,java.lang.String)
void processNextLoader()
java.lang.Object peek()
boolean handleResponseForSynchronousRequest(java.lang.String,java.lang.String)
void signalRequestComplete()
void proceed(java.lang.String,java.lang.String)
boolean authCredentialsInvalid()
boolean useHttpAuthUsernamePassword()
void waitForRequestToComplete()
android.webkit.BrowserFrame getFrame()
boolean proxyAuthenticate()
java.lang.String realm()
void onReceivedHttpAuthRequest(android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)
void onReceivedHttpAuthCredentials(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
void onReceivedCredentials(android.webkit.LoadListener,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
int getCheckedItemPosition()
void clearChoices()
void onInvalidate()
void setMediaController(android.widget.MediaController)
void setVideoURI(android.net.Uri,java.util.Map)
java.util.Timer access$000()
java.util.Timer access$002(java.util.Timer)
android.widget.VideoView access$100()
android.webkit.HTML5VideoViewProxy access$200()
android.webkit.HTML5VideoViewProxy access$202(android.webkit.HTML5VideoViewProxy)
android.widget.FrameLayout access$300()
android.widget.VideoView access$102(android.widget.VideoView)
android.view.View access$400()
android.view.View access$402(android.view.View)
android.widget.FrameLayout access$302(android.widget.FrameLayout)
void onSyncInit()
void <init>(android.webkit.WebHistoryItem)
java.lang.Object getCustomData()
void setCustomData(java.lang.Object)
void setFavicon(android.graphics.Bitmap)
void setTouchIconUrl(java.lang.String)
void inflate(int,byte[])
android.webkit.WebHistoryItem clone()
void update(java.lang.String,java.lang.String,java.lang.String,android.graphics.Bitmap,byte[])
void stopPlayback()
void onCustomViewHidden()
void beginningOfDay(java.util.Calendar)
java.lang.String getQuantityString(int,int)
int getIndex(long)
java.lang.String getLabel(int)
long getBoundary(int)
void reload(boolean)
void setThreadPriority(int,int)
void setNetworkOnLine(boolean)
boolean documentHasImages()
android.graphics.Picture createFromStream(java.io.InputStream)
void retainQueue()
android.net.http.RequestHandle queueRequest(java.lang.String,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int)
void releaseQueue()
android.graphics.Bitmap decodeByteArray(byte[],int,int)
void cleanup()
boolean handleSslErrorRequest(android.net.http.SslError)
void setCacheControl(java.lang.String)
void <init>(android.content.Context,int,java.util.List)
float getTextSize()
void setTextView(android.widget.TextView)
boolean hasHandler()
void requestIconAndSendResult(java.lang.String,android.webkit.WebIconDatabase$IconListener)
void bulkRequestIcons(android.os.Message)
void nativeClose(int)
void removeHistoryItem(int)
void <init>(android.content.Context,android.webkit.BrowserFrame,java.lang.String,int,boolean,boolean,boolean,boolean,long,java.lang.String,java.lang.String)
void clearNativeLoader()
void handleHeaders(android.net.http.Headers)
boolean ignoreCallbacks()
void commitLoad()
void handleEndData()
void handleError(int,java.lang.String)
void doRedirect()
void handleStatus(int,int,int,java.lang.String)
void handleCertificate(android.net.http.SslCertificate)
void handleSslError(android.net.http.SslError)
void sendMessageInternal(android.os.Message)
java.lang.String guessMimeTypeFromExtension(java.lang.String)
void guessMimeType()
boolean isProxy()
java.lang.String getUsername()
java.lang.String getWwwAuthenticate()
android.net.http.HttpAuthHeader parseAuthHeader(java.lang.String)
java.lang.String getProxyAuthenticate()
void setProxy()
void commitHeadersCheckRedirect()
void detachRequestHandle()
void notifyError()
void tearDown()
void makeAuthResponse(java.lang.String,java.lang.String)
void handleSslErrorResponse(boolean)
boolean isDigest()
boolean getStale()
android.net.http.SslError sslError()
void setUsername(java.lang.String)
void setPassword(java.lang.String)
int getScheme()
void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String)
java.lang.String getQop()
java.lang.String getAlgorithm()
java.lang.String getOpaque()
void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
java.lang.String originalUrl()
boolean onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)
void downloadFile()
boolean willLoadFromCache(java.lang.String,long)
void resetCancel()
java.lang.String mimeType()
long contentLength()
void commitHeaders()
int createNativeResponse()
void nativeReceivedResponse(int)
int nativeCreateResponse(java.lang.String,int,java.lang.String,java.lang.String,long,java.lang.String)
void <init>(android.webkit.LoadListener,int)
void getHeaders(android.net.http.Headers$HeaderCallback)
void addCertificate(android.content.Context,java.lang.String,byte[])
void nativeAddData(byte[],int)
int getErrorID()
void nativeFinished()
java.lang.String getErrorDescription()
void nativeError(int,java.lang.String,java.lang.String)
void pauseRequest(boolean)
void pauseLoad(boolean)
java.lang.String nativeRedirectedToUrl(java.lang.String,java.lang.String,int)
void setRedirectCount(int)
int getRedirectCount()
boolean regionMatches(boolean,int,java.lang.String,int,int)
boolean isSupportedScheme()
void nativeSetResponseHeader(int,java.lang.String,java.lang.String)
void access$000(android.webkit.LoadListener,int,java.lang.String,java.lang.String)
void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)
java.lang.String getJsDialogTitle(java.lang.String)
void onTooManyRedirects(android.os.Message,android.os.Message)
void onReceivedSslError(android.webkit.SslErrorHandler,android.net.http.SslError)
void header(java.lang.String,java.lang.String)
void handleSslErrorResponse(android.webkit.LoadListener,android.net.http.SslError,boolean)
void fastProcessQueuedSslErrors()
void <init>(android.webkit.SslErrorHandler,android.webkit.LoadListener)
int getPrimaryError()
boolean processNextLoader()
void proceed()
android.webkit.ConsoleMessage$MessageLevel valueOf(java.lang.String)
java.security.KeyPairGenerator getInstance(java.lang.String)
void initialize(int)
java.security.KeyPair genKeyPair()
java.security.PublicKey getPublic()
void <init>(java.lang.String,org.bouncycastle.asn1.x509.AlgorithmIdentifier,java.security.PublicKey)
java.security.PrivateKey getPrivate()
void sign(java.security.PrivateKey)
org.bouncycastle.asn1.DERObject toASN1Object()
byte[] getDEREncoded()
android.security.Credentials getInstance()
void install(android.content.Context,java.security.KeyPair)
void install(android.content.Context,java.lang.String,byte[])
void <init>(org.bouncycastle.asn1.DERObjectIdentifier)
void registerForLocationUpdates()
void unregisterFromLocationUpdates()
void setEnableGps(boolean)
void nativeNewLocationAvailable(long,android.location.Location)
void maybeReportError(java.lang.String)
void nativeNewErrorAvailable(long,java.lang.String)
void <init>(android.bluetooth.BluetoothAdapter,int,int)
void <init>(android.bluetooth.BluetoothAdapter)
void <init>(android.bluetooth.BluetoothAudioGateway,java.lang.String)
boolean setUpListeningSocketsNative()
boolean start(android.os.Handler)
void join()
void tearDownListeningSocketsNative()
boolean access$000(android.bluetooth.BluetoothAudioGateway)
int access$102(android.bluetooth.BluetoothAudioGateway,int)
int access$202(android.bluetooth.BluetoothAudioGateway,int)
boolean waitForHandsfreeConnectNative(int)
boolean access$300(android.bluetooth.BluetoothAudioGateway,int)
int access$400(android.bluetooth.BluetoothAudioGateway)
boolean access$002(android.bluetooth.BluetoothAudioGateway,boolean)
int access$100(android.bluetooth.BluetoothAudioGateway)
java.lang.String access$500(android.bluetooth.BluetoothAudioGateway)
android.os.Handler access$600(android.bluetooth.BluetoothAudioGateway)
android.bluetooth.BluetoothAdapter access$700(android.bluetooth.BluetoothAudioGateway)
int access$800(android.bluetooth.BluetoothAudioGateway)
int access$200(android.bluetooth.BluetoothAudioGateway)
java.lang.String access$900(android.bluetooth.BluetoothAudioGateway)
int access$1000(android.bluetooth.BluetoothAudioGateway)
void <init>(android.bluetooth.BluetoothSocket)
int write(byte[],int,int)
void <init>(android.bluetooth.BluetoothDeviceProfileState)
android.os.Message access$3200(android.bluetooth.BluetoothDeviceProfileState)
android.os.Message access$3300(android.bluetooth.BluetoothDeviceProfileState)
boolean processCommand(int)
android.server.BluetoothService access$3400(android.bluetooth.BluetoothDeviceProfileState)
void access$1600(android.bluetooth.BluetoothDeviceProfileState,java.lang.String)
void access$3500(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void cancelCommand(int)
android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree access$1900(android.bluetooth.BluetoothDeviceProfileState)
void access$3600(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.HierarchicalState)
void access$3700(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp access$2400(android.bluetooth.BluetoothDeviceProfileState)
void access$3800(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.HierarchicalState)
void access$3900(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$4000(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$4100(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$4200(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$4300(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
android.bluetooth.BluetoothDeviceProfileState$BondedDevice access$4400(android.bluetooth.BluetoothDeviceProfileState)
void access$4500(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.HierarchicalState)
void <init>(android.bluetooth.BluetoothDeviceProfileState,android.bluetooth.BluetoothDeviceProfileState$1)
android.bluetooth.IBluetooth getService()
boolean createBond()
boolean createBondOutOfBand(byte[],byte[])
boolean setDeviceOutOfBandData(byte[],byte[])
boolean cancelBondProcess()
boolean removeBond()
int getBondState()
android.bluetooth.BluetoothClass getBluetoothClass()
boolean getTrustState()
boolean setTrust(boolean)
android.os.ParcelUuid[] getUuids()
boolean fetchUuidsWithSdp()
int getServiceChannel(android.os.ParcelUuid)
boolean setPin(byte[])
boolean setPasskey(int)
boolean setPairingConfirmation(boolean)
boolean setRemoteOutOfBandData()
boolean cancelPairingUserInput()
boolean isBluetoothDock()
void <init>(int,int,boolean,boolean,android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid)
android.bluetooth.BluetoothSocket createRfcommSocket(int)
void <init>(java.util.UUID)
android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)
android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)
android.bluetooth.BluetoothSocket createInsecureRfcommSocket(int)
android.bluetooth.BluetoothSocket createScoSocket()
void <init>(android.bluetooth.BluetoothProfileState)
void access$400(android.bluetooth.BluetoothProfileState,java.lang.String)
android.bluetooth.BluetoothDevice access$302(android.bluetooth.BluetoothProfileState,android.bluetooth.BluetoothDevice)
android.bluetooth.BluetoothProfileState$PendingCommandState access$500(android.bluetooth.BluetoothProfileState)
void access$600(android.bluetooth.BluetoothProfileState,com.android.internal.util.HierarchicalState)
void <init>(android.bluetooth.BluetoothProfileState,android.bluetooth.BluetoothProfileState$1)
void <init>(android.bluetooth.HeadsetBase,java.lang.String)
boolean access$000(android.bluetooth.HeadsetBase)
java.lang.String access$100(android.bluetooth.HeadsetBase,int)
void handleInput(java.lang.String)
int access$200(android.bluetooth.HeadsetBase)
android.os.Handler access$300(android.bluetooth.HeadsetBase)
void access$400(android.bluetooth.HeadsetBase)
android.bluetooth.BluetoothClass createFromParcel(android.os.Parcel)
android.bluetooth.BluetoothClass[] newArray(int)
boolean hasService(int)
int getMajorDeviceClass()
boolean doesClassMatch(int)
boolean cancelConnectThread()
void deferProfileServiceMessage(int)
boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)
boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)
void handleConnectionOfOtherProfiles(int)
boolean createIncomingConnect(android.bluetooth.BluetoothDevice)
int getPriority(android.bluetooth.BluetoothDevice)
boolean setPriority(android.bluetooth.BluetoothDevice,int)
boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)
boolean disconnect()
android.bluetooth.BluetoothDevice getDevice()
android.bluetooth.BluetoothDevice access$500(android.bluetooth.BluetoothDeviceProfileState)
int access$602(android.bluetooth.BluetoothDeviceProfileState,int)
int access$702(android.bluetooth.BluetoothDeviceProfileState,int)
android.bluetooth.BluetoothHeadset access$802(android.bluetooth.BluetoothDeviceProfileState,android.bluetooth.BluetoothHeadset)
android.content.Context access$900(android.bluetooth.BluetoothDeviceProfileState)
boolean access$1002(android.bluetooth.BluetoothDeviceProfileState,boolean)
android.bluetooth.BluetoothPbap access$1102(android.bluetooth.BluetoothDeviceProfileState,android.bluetooth.BluetoothPbap)
boolean access$1202(android.bluetooth.BluetoothDeviceProfileState,boolean)
android.os.Message access$1300(android.bluetooth.BluetoothDeviceProfileState)
android.os.Message access$1400(android.bluetooth.BluetoothDeviceProfileState)
void access$1500(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree access$1700(android.bluetooth.BluetoothDeviceProfileState)
void access$1800(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.HierarchicalState)
void access$2000(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.HierarchicalState)
void access$2100(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.HierarchicalState)
android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp access$2200(android.bluetooth.BluetoothDeviceProfileState)
void access$2300(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.HierarchicalState)
void access$2500(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.HierarchicalState)
int access$600(android.bluetooth.BluetoothDeviceProfileState)
void access$2600(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
int access$700(android.bluetooth.BluetoothDeviceProfileState)
void access$2700(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
boolean access$2800(android.bluetooth.BluetoothDeviceProfileState,android.bluetooth.BluetoothDevice)
boolean access$1000(android.bluetooth.BluetoothDeviceProfileState)
void access$2900(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
android.bluetooth.BluetoothHeadset access$800(android.bluetooth.BluetoothDeviceProfileState)
android.server.BluetoothA2dpService access$3000(android.bluetooth.BluetoothDeviceProfileState)
void access$3100(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
android.os.Message access$4600(android.bluetooth.BluetoothDeviceProfileState)
android.os.Message access$4700(android.bluetooth.BluetoothDeviceProfileState)
void access$4800(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$4900(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$5000(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$5100(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$5200(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$5300(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$5400(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.HierarchicalState)
android.os.Message access$5500(android.bluetooth.BluetoothDeviceProfileState)
android.os.Message access$5600(android.bluetooth.BluetoothDeviceProfileState)
void access$5700(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$5800(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$5900(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.HierarchicalState)
void access$6000(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$6100(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$6200(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$6300(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$6400(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.HierarchicalState)
android.os.Message access$6500(android.bluetooth.BluetoothDeviceProfileState)
android.os.Message access$6600(android.bluetooth.BluetoothDeviceProfileState)
void access$6700(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$6800(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$6900(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$7000(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$7100(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$7200(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)
void access$7300(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.HierarchicalState)
void <init>(int,boolean,boolean,int)
android.bluetooth.BluetoothSocket accept(int)
android.bluetooth.BluetoothSocket accept()
void setCloseHandler(android.os.Handler,int)
void <init>(android.bluetooth.BluetoothDevice,android.os.ParcelUuid)
void initSocketNative()
void initSocketFromFdNative(int)
void <init>(int,int,boolean,boolean,java.lang.String,int)
java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()
int doSdp()
void connectNative()
void abortNative()
java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()
void destroyNative()
android.bluetooth.BluetoothDevice getRemoteDevice()
int bindListen()
int bindListenNative()
android.bluetooth.BluetoothSocket acceptNative(int)
int availableNative()
int readNative(byte[],int,int)
int writeNative(byte[],int,int)
void <init>(android.bluetooth.BluetoothPbap)
android.bluetooth.IBluetoothPbap asInterface(android.os.IBinder)
android.bluetooth.IBluetoothPbap access$002(android.bluetooth.BluetoothPbap,android.bluetooth.IBluetoothPbap)
android.bluetooth.BluetoothPbap$ServiceListener access$100(android.bluetooth.BluetoothPbap)
void onServiceConnected()
void onServiceDisconnected()
android.bluetooth.IBluetoothCallback asInterface(android.os.IBinder)
android.bluetooth.IBluetoothA2dp asInterface(android.os.IBinder)
boolean isSinkConnected(android.bluetooth.BluetoothDevice)
java.util.Set unmodifiableSet(java.util.Set)
java.util.Set getConnectedSinks()
void <init>(android.bluetooth.BluetoothAudioGateway,android.bluetooth.BluetoothAdapter,android.bluetooth.BluetoothDevice,int,int)
void addResponse(java.lang.String)
void appendWithCrlf(java.lang.StringBuilder,java.lang.String)
void addResult(android.bluetooth.AtCommandResult)
android.bluetooth.AtCommandResult handleBasicCommand(java.lang.String)
android.bluetooth.AtCommandResult handleActionCommand()
android.bluetooth.AtCommandResult handleReadCommand()
android.bluetooth.AtCommandResult handleSetCommand(java.lang.Object[])
android.bluetooth.AtCommandResult handleTestCommand()
void <init>(android.bluetooth.BluetoothHeadset)
boolean connectHeadset(android.bluetooth.BluetoothDevice)
boolean isConnected(android.bluetooth.BluetoothDevice)
void disconnectHeadset(android.bluetooth.BluetoothDevice)
boolean disconnectHeadset(android.bluetooth.BluetoothDevice)
boolean startVoiceRecognition()
boolean stopVoiceRecognition()
boolean isBluetoothVoiceDialingEnabled(android.content.Context)
android.bluetooth.IBluetoothHeadset access$002(android.bluetooth.BluetoothHeadset,android.bluetooth.IBluetoothHeadset)
android.bluetooth.BluetoothHeadset$ServiceListener access$100(android.bluetooth.BluetoothHeadset)
android.bluetooth.BluetoothDevice getClient()
boolean connect(android.bluetooth.BluetoothDevice)
android.bluetooth.IBluetooth access$000(android.bluetooth.BluetoothAdapter)
void <init>(android.content.Context,android.bluetooth.BluetoothPbap$ServiceListener)
boolean doesClassMatchSink(android.bluetooth.BluetoothClass)
void initNative()
void <init>(android.os.PowerManager,android.os.Handler,int,int,int)
void releaseWakeLockNow()
boolean connect(java.lang.String,java.lang.String)
boolean connectNative(java.lang.String,java.lang.String)
boolean accept()
boolean acceptNative()
void closeNative()
void onConnected(int)
void onAccepted(int)
void onClosed()
void initializeAtParser()
void initializeNativeDataNative(int)
void <init>(android.os.PowerManager,android.bluetooth.BluetoothAdapter,android.bluetooth.BluetoothDevice,int)
void <init>(android.os.PowerManager,android.bluetooth.BluetoothAdapter,android.bluetooth.BluetoothDevice,int,int,android.os.Handler)
android.bluetooth.AtCommandResult process(java.lang.String)
boolean sendURC(java.lang.String)
android.bluetooth.AtParser getAtParser()
void startEventThread()
void stopEventThread()
boolean connectNative()
boolean connect(android.os.Handler)
int connectAsyncNative()
boolean connectAsync()
int getRemainingAsyncConnectWaitingTimeMs()
int waitForAsyncConnectNative(int)
int waitForAsyncConnect(int,android.os.Handler)
void disconnectNative()
long getConnectTimestamp()
boolean sendURCNative(java.lang.String)
int getAtInputCount()
java.lang.String readNative(int)
int getLastReadStatusNative()
boolean isAudioSink(android.os.ParcelUuid)
boolean isHandsfree(android.os.ParcelUuid)
boolean isHeadset(android.os.ParcelUuid)
boolean isAvrcpController(android.os.ParcelUuid)
boolean containsAllUuids(android.os.ParcelUuid[],android.os.ParcelUuid[])
int access$200(android.bluetooth.BluetoothProfileState)
android.bluetooth.BluetoothDevice access$300(android.bluetooth.BluetoothProfileState)
android.os.Message access$700(android.bluetooth.BluetoothProfileState)
android.bluetooth.BluetoothProfileState$StableState access$800(android.bluetooth.BluetoothProfileState)
void access$900(android.bluetooth.BluetoothProfileState,com.android.internal.util.HierarchicalState)
void access$1000(android.bluetooth.BluetoothProfileState,android.os.Message)
void <init>(android.bluetooth.IBluetooth)
boolean setScanMode(int)
void setDiscoverableTimeout(int)
java.util.Set toDeviceSet(java.lang.String[])
void throwErrnoNative(int)
android.bluetooth.BluetoothServerSocket listenUsingRfcommOn(int)
android.bluetooth.BluetoothServerSocket createNewRfcommSocketAndRecord(java.lang.String,java.util.UUID,boolean,boolean)
android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)
android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)
int nextChannel()
android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommOn(int)
android.bluetooth.BluetoothServerSocket listenUsingScoOn()
byte[] copyOfRange(byte[],int,int)
android.util.Pair readOutOfBandData()
android.bluetooth.BluetoothDevice createFromParcel(android.os.Parcel)
android.bluetooth.BluetoothDevice[] newArray(int)
android.bluetooth.IBluetoothHeadset asInterface(android.os.IBinder)
void register(java.lang.Character,android.bluetooth.AtCommandHandler)
void register(java.lang.String,android.bluetooth.AtCommandHandler)
char toUpperCase(char)
java.lang.String clean(java.lang.String)
boolean isAtoZ(char)
int findChar(char,java.lang.String,int)
java.lang.Object[] generateArgs(java.lang.String)
int findEndExtendedName(java.lang.String,int)
void attachEngine(android.service.wallpaper.IWallpaperEngine)
void <init>(android.service.wallpaper.WallpaperService$Engine)
void access$000(android.service.wallpaper.WallpaperService$Engine,android.view.MotionEvent)
android.os.Looper access$200(android.service.wallpaper.WallpaperService)
void <init>(android.service.wallpaper.WallpaperService,android.service.wallpaper.WallpaperService,android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int)
void setDesiredSize(int,int)
void setVisibility(boolean)
java.util.ArrayList access$300(android.service.wallpaper.WallpaperService)
void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)
void doDesiredSizeChanged(int,int)
void updateSurface(boolean,boolean,boolean)
void doVisibilityChanged(boolean)
void doOffsetsChanged()
void doCommand(android.service.wallpaper.WallpaperService$WallpaperCommand)
com.android.internal.os.HandlerCaller access$100(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)
android.service.wallpaper.IWallpaperService asInterface(android.os.IBinder)
android.service.wallpaper.IWallpaperConnection asInterface(android.os.IBinder)
void attach(android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int)
android.service.wallpaper.IWallpaperEngine asInterface(android.os.IBinder)
void <init>(android.service.wallpaper.WallpaperService,android.service.wallpaper.WallpaperService)
void reportVisibility()
boolean isPreview()
void setTouchEventsEnabled(boolean)
android.os.Bundle onCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)
void onDesiredSizeChanged(int,int)
void onSurfaceRedrawNeeded(android.view.SurfaceHolder)
void <init>(android.service.urlrenderer.UrlRenderer$Callback)
void complete(java.lang.String,android.os.ParcelFileDescriptor)
void render(java.util.List,int,int,android.service.urlrenderer.IUrlRendererCallback)
android.service.urlrenderer.IUrlRendererService asInterface(android.os.IBinder)
void render(java.util.List,int,int,android.service.urlrenderer.UrlRenderer$Callback)
void <init>(android.service.urlrenderer.UrlRendererService)
void <init>(android.service.urlrenderer.IUrlRendererCallback)
void processRequest(java.util.List,int,int,android.service.urlrenderer.UrlRenderer$Callback)
android.service.urlrenderer.IUrlRendererCallback asInterface(android.os.IBinder)
void <init>(android.nfc.NfcAdapter)
void disableForegroundNdefPushInternal(android.app.Activity,boolean)
boolean hasNfcFeature()
android.nfc.INfcAdapter getServiceInterface()
android.nfc.INfcTag getNfcTagInterface()
android.nfc.INfcAdapter setupService()
android.nfc.INfcAdapter asInterface(android.os.IBinder)
android.nfc.NfcAdapter getDefaultAdapter()
android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)
android.nfc.INfcAdapter getService()
android.nfc.INfcTag getTagService()
void attemptDeadServiceRecovery(java.lang.Exception)
void <init>(java.lang.String[][])
void enableForegroundDispatch(android.content.ComponentName,android.app.PendingIntent,android.content.IntentFilter[],android.nfc.TechListParcel)
void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])
void disableForegroundDispatchInternal(android.app.Activity,boolean)
void disableForegroundDispatch(android.app.Activity)
void disableForegroundDispatch(android.content.ComponentName)
void enableForegroundNdefPush(android.content.ComponentName,android.nfc.NdefMessage)
void enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)
void disableForegroundNdefPush(android.app.Activity)
void disableForegroundNdefPush(android.content.ComponentName)
void localSet(android.nfc.NdefMessage)
void setLocalNdefMessage(android.nfc.NdefMessage)
android.nfc.NdefMessage localGet()
android.nfc.NdefMessage getLocalNdefMessage()
android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface()
int reconnect(int)
int[] getTechList(int)
byte[] getUid(int)
boolean isNdef(int)
boolean isPresent(int)
android.nfc.TransceiveResult transceive(int,byte[],boolean)
int getLastError(int)
android.nfc.NdefMessage ndefRead(int)
int ndefWrite(int,android.nfc.NdefMessage)
int ndefMakeReadOnly(int)
boolean ndefIsWritable(int)
int formatNdef(int,byte[])
void setIsoDepTimeout(int)
void resetIsoDepTimeout()
android.nfc.ILlcpSocket asInterface(android.os.IBinder)
int[] copyOf(int[],int)
java.lang.String[] generateTechStringList(int[])
java.lang.Object[] copyOf(java.lang.Object[],int)
void <init>(byte[],int[],android.os.Bundle[],int,android.nfc.INfcTag)
android.nfc.Tag createMockTag(byte[],int[],android.os.Bundle[])
int getServiceHandle()
byte[] getId()
java.lang.String[] getTechList()
boolean hasTech(int)
android.os.Bundle getTechExtras(int)
byte[] readBytesWithNull(android.os.Parcel)
void writeBytesWithNull(android.os.Parcel,byte[])
void setConnectedTechnology(int)
int getConnectedTechnology()
void setTechnologyDisconnected()
android.nfc.IP2pTarget asInterface(android.os.IBinder)
void <init>(boolean,boolean,byte[])
boolean isSuccessful()
boolean isTagLost()
byte[] getResponseData()
void <init>(short,byte[],byte[],byte[])
int parseNdefRecord(byte[])
short getTnf()
byte[] getType()
byte[] getPayload()
byte[] generate(short,short,byte[],byte[],byte[])
android.nfc.LlcpPacket createFromParcel(android.os.Parcel)
android.nfc.LlcpPacket[] newArray(int)
int getRemoteSap()
byte[] getDataBuffer()
android.nfc.ILlcpConnectionlessSocket asInterface(android.os.IBinder)
android.nfc.INfcTag asInterface(android.os.IBinder)
android.nfc.TransceiveResult createFromParcel(android.os.Parcel)
android.nfc.TransceiveResult[] newArray(int)
java.lang.String asString(int)
java.lang.String[][] getTechLists()
android.nfc.INfcAdapterExtras asInterface(android.os.IBinder)
android.os.Bundle open(android.os.IBinder)
android.os.Bundle close()
android.os.Bundle transceive(byte[])
int getCardEmulationRoute()
void setCardEmulationRoute(int)
void registerTearDownApdus(java.lang.String,android.nfc.ApduList)
void unregisterTearDownApdus(java.lang.String)
android.nfc.IP2pInitiator asInterface(android.os.IBinder)
void readTypedArray(java.lang.Object[],android.os.Parcelable$Creator)
void <init>(android.nfc.NdefRecord[])
android.nfc.NdefMessage createFromParcel(android.os.Parcel)
android.nfc.NdefMessage[] newArray(int)
android.nfc.ILlcpSocket getLlcpInterface()
android.nfc.ILlcpConnectionlessSocket getLlcpConnectionlessInterface()
android.nfc.ILlcpServiceSocket getLlcpServiceInterface()
android.nfc.IP2pTarget getP2pTargetInterface()
android.nfc.IP2pInitiator getP2pInitiatorInterface()
int createLlcpConnectionlessSocket(int)
int createLlcpServiceSocket(int,java.lang.String,int,int,int)
int createLlcpSocket(int,int,int,int)
java.lang.String getProperties(java.lang.String)
int setProperties(java.lang.String,java.lang.String)
android.nfc.TechListParcel createFromParcel(android.os.Parcel)
android.nfc.TechListParcel[] newArray(int)
android.nfc.ILlcpServiceSocket asInterface(android.os.IBinder)
void <init>(android.os.Parcel,android.nfc.ApduList$1)
android.nfc.ApduList createFromParcel(android.os.Parcel)
android.nfc.ApduList[] newArray(int)
void add(byte[])
java.util.List get()
android.nfc.Tag createFromParcel(android.os.Parcel)
android.nfc.Tag[] newArray(int)
void <init>(android.nfc.Tag)
android.nfc.tech.IsoDep get(android.nfc.Tag)
void <init>(android.nfc.Tag,int)
void setTimeout(int)
byte[] getHistoricalBytes()
byte[] getHiLayerResponse()
byte[] transceive(byte[],boolean)
void reconnect()
android.nfc.Tag getTag()
void checkConnected()
android.nfc.tech.NfcV get(android.nfc.Tag)
byte getResponseFlags()
byte getDsfId()
android.nfc.tech.NfcA get(android.nfc.Tag)
byte[] getAtqa()
short getSak()
android.nfc.tech.NfcB get(android.nfc.Tag)
byte[] getApplicationData()
byte[] getProtocolInfo()
android.nfc.tech.MifareUltralight get(android.nfc.Tag)
void validatePageIndex(int)
byte[] readPages(int)
void writePage(int,byte[])
android.nfc.tech.MifareClassic get(android.nfc.Tag)
boolean isEmulated()
int getSectorCount()
int getBlockCount()
void validateSector(int)
int getBlockCountInSector(int)
void validateBlock(int)
int blockToSector(int)
int sectorToBlock(int)
boolean authenticate(int,byte[],boolean)
boolean authenticateSectorWithKeyA(int,byte[])
boolean authenticateSectorWithKeyB(int,byte[])
byte[] readBlock(int)
void writeBlock(int,byte[])
void validateValueOperand(int)
java.nio.ByteBuffer put(byte)
void increment(int,int)
void decrement(int,int)
void transfer(int)
void restore(int)
android.nfc.tech.Ndef get(android.nfc.Tag)
android.nfc.NdefMessage getCachedNdefMessage()
java.lang.String getType()
int getMaxSize()
boolean isWritable()
android.nfc.NdefMessage getNdefMessage()
void writeNdefMessage(android.nfc.NdefMessage)
boolean canMakeReadOnly()
boolean makeReadOnly()
android.nfc.tech.NdefFormatable get(android.nfc.Tag)
void format(android.nfc.NdefMessage,boolean)
void format(android.nfc.NdefMessage)
void formatReadOnly(android.nfc.NdefMessage)
android.nfc.tech.NfcF get(android.nfc.Tag)
byte[] getSystemCode()
byte[] getManufacturer()
int parseNdefMessage(byte[])
android.nfc.NdefRecord[] getRecords()
android.nfc.NdefRecord createFromParcel(android.os.Parcel)
android.nfc.NdefRecord[] newArray(int)
void <init>(android.emoji.EmojiFactory)
int access$000(android.emoji.EmojiFactory)
boolean removeEldestEntry(java.util.Map$Entry)
void nativeDestructor(int)
android.graphics.Bitmap nativeGetBitmapFromAndroidPua(int,int)
android.graphics.Bitmap getBitmapFromAndroidPua(int)
int getAndroidPuaFromVendorSpecificSjis(char)
android.graphics.Bitmap getBitmapFromVendorSpecificSjis(char)
int getAndroidPuaFromVendorSpecificPua(int)
android.graphics.Bitmap getBitmapFromVendorSpecificPua(int)
int nativeGetAndroidPuaFromVendorSpecificSjis(int,char)
int nativeGetVendorSpecificSjisFromAndroidPua(int,int)
int getVendorSpecificSjisFromAndroidPua(int)
int nativeGetAndroidPuaFromVendorSpecificPua(int,int)
int nativeGetMinimumVendorSpecificPua(int)
int nativeGetMaximumVendorSpecificPua(int)
int codePointCount(int,int)
int offsetByCodePoints(int,int)
void <init>(int[],int,int)
java.lang.String getAndroidPuaFromVendorSpecificPua(java.lang.String)
int nativeGetVendorSpecificPuaFromAndroidPua(int,int)
int getVendorSpecificPuaFromAndroidPua(int)
int nativeGetMinimumAndroidPua(int)
int nativeGetMaximumAndroidPua(int)
java.lang.String getVendorSpecificPuaFromAndroidPua(java.lang.String)
int getMinimumAndroidPua()
int getMaximumAndroidPua()
void <init>(android.widget.AutoCompleteTextView)
void <init>(android.widget.AutoCompleteTextView,android.widget.AutoCompleteTextView$1)
void initImageView()
void setAdjustViewBounds(boolean)
void setMaxWidth(int)
void setMaxHeight(int)
void setColorFilter(int)
void applyColorMod()
void updateDrawable(android.graphics.drawable.Drawable)
void resolveUri()
void setImageURI(android.net.Uri)
void resizeFromDrawable()
void setImageState(int[],boolean)
boolean setLevel(int)
void setImageLevel(int)
android.widget.ImageView$ScaleType getScaleType()
android.graphics.Matrix getImageMatrix()
boolean isIdentity()
void configureBounds()
void setImageMatrix(android.graphics.Matrix)
android.graphics.drawable.Drawable createFromPath(java.lang.String)
android.graphics.Matrix$ScaleToFit scaleTypeToScaleToFit(android.widget.ImageView$ScaleType)
int resolveAdjustedSize(int,int,int)
boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)
void <init>(int,android.graphics.PorterDuff$Mode)
void setColorFilter(int,android.graphics.PorterDuff$Mode)
void clearColorFilter()
android.graphics.drawable.Drawable mutate()
void <init>(android.widget.RelativeLayout$1)
void setIgnoreGravity(int)
void setHorizontalGravity(int)
void setVerticalGravity(int)
void add(android.view.View)
void getSortedViews(android.view.View[],int[])
void sortChildren()
void applyHorizontalSizeRules(android.widget.RelativeLayout$LayoutParams,int)
void measureChildHorizontal(android.view.View,android.widget.RelativeLayout$LayoutParams,int,int)
boolean positionChildHorizontal(android.view.View,android.widget.RelativeLayout$LayoutParams,int,boolean)
void applyVerticalSizeRules(android.widget.RelativeLayout$LayoutParams,int)
void measureChild(android.view.View,android.widget.RelativeLayout$LayoutParams,int,int)
boolean positionChildVertical(android.view.View,android.widget.RelativeLayout$LayoutParams,int,boolean)
int access$100(android.widget.RelativeLayout$LayoutParams)
int access$200(android.widget.RelativeLayout$LayoutParams)
int access$300(android.widget.RelativeLayout$LayoutParams)
int access$400(android.widget.RelativeLayout$LayoutParams)
void alignBaseline(android.view.View,android.widget.RelativeLayout$LayoutParams)
int[] getRules()
void centerHorizontal(android.view.View,android.widget.RelativeLayout$LayoutParams,int)
int access$302(android.widget.RelativeLayout$LayoutParams,int)
int access$102(android.widget.RelativeLayout$LayoutParams,int)
void centerVertical(android.view.View,android.widget.RelativeLayout$LayoutParams,int)
int access$402(android.widget.RelativeLayout$LayoutParams,int)
int access$202(android.widget.RelativeLayout$LayoutParams,int)
int access$312(android.widget.RelativeLayout$LayoutParams,int)
int access$112(android.widget.RelativeLayout$LayoutParams,int)
int access$412(android.widget.RelativeLayout$LayoutParams,int)
int access$212(android.widget.RelativeLayout$LayoutParams,int)
int getRelatedViewBaseline(int[],int)
android.widget.RelativeLayout$LayoutParams getRelatedViewParams(int[],int)
int getChildMeasureSpec(int,int,int,int,int,int,int,int)
android.util.SparseArray access$500(android.widget.RelativeLayout$DependencyGraph)
android.view.View getRelatedView(int[],int)
android.widget.RelativeLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)
void <init>(android.widget.RelativeLayout,android.widget.RelativeLayout$1)
void <init>(android.widget.ListView)
void <init>(android.widget.Gallery)
void startCommon()
void fling(int,int,int,int,int,int,int,int)
void startUsingVelocity(int)
int access$400(android.widget.Gallery)
void startUsingDistance(int)
void endFling(boolean)
void stop(boolean)
void forceFinished(boolean)
void access$500(android.widget.Gallery)
boolean access$602(android.widget.Gallery,boolean)
int access$702(android.widget.Gallery,int)
int access$800(android.widget.Gallery)
int access$900(android.widget.Gallery)
int access$1000(android.widget.Gallery)
int access$1100(android.widget.Gallery)
void trackMotionScroll(int)
boolean access$600(android.widget.Gallery)
void access$100(android.widget.Gallery$FlingRunnable,boolean)
android.widget.Scroller access$200(android.widget.Gallery$FlingRunnable)
android.content.Context access$400(android.widget.TextView)
int access$500(android.widget.TextView)
boolean access$600(android.widget.TextView,int)
void access$700(android.widget.TextView,java.lang.CharSequence,int,int,int)
void handleTextChanged(java.lang.CharSequence,int,int,int)
android.content.Context access$800(android.widget.TextView)
void sendAccessibilityEventTypeViewTextChanged(java.lang.CharSequence,int,int,int)
void sendAfterTextChanged(android.text.Editable)
void stopSelecting(android.view.View,android.text.Spannable)
void spanChange(android.text.Spanned,java.lang.Object,int,int,int,int)
void onSpanChanged(android.text.Spannable,java.lang.Object,int,int,int,int)
void onSpanAdded(android.text.Spannable,java.lang.Object,int,int)
void onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)
void <init>(android.widget.TextView,android.widget.TextView$1)
void <init>(android.widget.QuickContactBadge,android.content.ContentResolver)
android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)
android.net.Uri access$002(android.widget.QuickContactBadge,android.net.Uri)
void access$100(android.widget.QuickContactBadge)
void access$200(android.widget.QuickContactBadge,android.net.Uri)
void <init>(android.widget.Chronometer)
boolean access$000(android.widget.Chronometer)
void access$100(android.widget.Chronometer,long)
void dispatchChronometerTick()
void <init>(android.widget.TimePicker)
void setOnChangeListener(android.widget.NumberPicker$OnChangedListener)
void setRange(int,int)
void setSpeed(long)
void setFormatter(android.widget.NumberPicker$Formatter)
void configurePickerRanges()
void <init>(android.os.Parcelable,int,int,android.widget.TimePicker$1)
int getHour()
int getMinute()
void updateHourDisplay()
void updateMinuteDisplay()
void setCurrent(int)
void onTimeChanged()
int access$002(android.widget.TimePicker,int)
java.lang.Boolean access$100(android.widget.TimePicker)
int access$000(android.widget.TimePicker)
boolean access$200(android.widget.TimePicker)
int access$012(android.widget.TimePicker,int)
void access$300(android.widget.TimePicker)
int access$402(android.widget.TimePicker,int)
int access$020(android.widget.TimePicker,int)
boolean access$202(android.widget.TimePicker,boolean)
java.lang.String access$500(android.widget.TimePicker)
java.lang.String access$600(android.widget.TimePicker)
android.widget.Button access$700(android.widget.TimePicker)
void <init>(android.widget.AbsListView)
void layoutChildren()
void positionSelector(android.view.View)
android.graphics.drawable.Drawable getCurrent()
void startTransition(int)
void resetTransition()
android.widget.AbsListView$CheckForLongPress access$700(android.widget.AbsListView)
void <init>(android.widget.AbsListView,android.widget.AbsListView$1)
android.widget.AbsListView$CheckForLongPress access$702(android.widget.AbsListView,android.widget.AbsListView$CheckForLongPress)
void <init>(android.widget.AutoCompleteTextView$PopupDataSetObserver)
android.widget.ListAdapter access$1600(android.widget.AutoCompleteTextView)
void access$1700(android.widget.AutoCompleteTextView,int)
void <init>(android.view.View,long,long)
void access$1400(android.widget.AutoCompleteTextView,android.view.View,int,long)
void toggle()
void setCheckMarkDrawable(int)
void setMinHeight(int)
android.view.View makeAndAddView(int)
void layout(int,boolean)
void handleDataChanged()
void resetList()
void setSelectedPositionInt(int)
void recycleAllViews()
void checkSelectionChanged()
void setNextSelectedPositionInt(int)
android.view.View get(int)
void setUpChild(android.view.View)
android.widget.SpinnerAdapter getAdapter()
void <init>(android.widget.SpinnerAdapter)
void setPrompt(java.lang.CharSequence)
void setPromptId(int)
java.lang.CharSequence getPrompt()
void <init>(android.widget.ZoomButtonsController)
int access$400()
void access$500(android.widget.ZoomButtonsController,int)
android.widget.ZoomButtonsController$OnZoomListener access$600(android.widget.ZoomButtonsController)
void <init>(android.widget.CursorTreeAdapter$MyCursorHelper)
boolean access$402(android.widget.CursorTreeAdapter$MyCursorHelper,boolean)
void <init>(android.widget.CursorTreeAdapter$MyCursorHelper,android.widget.CursorTreeAdapter$1)
android.widget.ImageView$ScaleType[] values()
android.widget.ImageView$ScaleType valueOf(java.lang.String)
android.widget.RelativeLayout$DependencyGraph$Node newInstance()
void onAcquired(android.widget.RelativeLayout$DependencyGraph$Node)
void onReleased(android.widget.RelativeLayout$DependencyGraph$Node)
void <init>(android.widget.ListView$1)
void setDivider(android.graphics.drawable.Drawable)
void setOverscrollHeader(android.graphics.drawable.Drawable)
void setOverscrollFooter(android.graphics.drawable.Drawable)
void setDividerHeight(int)
int getMaxScrollAmount()
void adjustViewsUpOrDown()
void addHeaderView(android.view.View,java.lang.Object,boolean)
boolean removeHeader(android.view.View)
void removeFixedViewInfo(android.view.View,java.util.ArrayList)
boolean removeHeaderView(android.view.View)
void addFooterView(android.view.View,java.lang.Object,boolean)
void addFooterView(android.view.View)
int getFooterViewsCount()
boolean removeFooter(android.view.View)
boolean removeFooterView(android.view.View)
void <init>(java.util.ArrayList,java.util.ArrayList,android.widget.ListAdapter)
void <init>(android.widget.AdapterView)
int getViewTypeCount()
void setViewTypeCount(int)
int lookForSelectablePosition(int,boolean)
void clearRecycledState(java.util.ArrayList)
boolean showingTopFadingEdge()
boolean showingBottomFadingEdge()
void scrollListItemsBy(int)
int getListPaddingTop()
android.view.View fillDown(int,int)
void correctTooHigh(int)
int getListPaddingBottom()
android.view.View fillUp(int,int)
void correctTooLow(int)
void fillGap(boolean)
android.view.View makeAndAddView(int,int,boolean,int,boolean)
android.view.View fillFromTop(int)
int reconcileSelectedPosition()
void fillAboveAndBelow(android.view.View,int)
android.view.View fillFromMiddle(int,int)
int getTopSelectionPixel(int,int,int)
int getBottomSelectionPixel(int,int,int)
android.view.View fillFromSelection(int,int,int)
android.view.View moveSelection(android.view.View,android.view.View,int,int,int)
void <init>(android.widget.ListView,android.widget.ListView$1)
android.widget.ListView$FocusSelector setup(int,int)
android.view.View obtainView(int,boolean[])
void measureScrapChild(android.view.View,int,int)
boolean shouldRecycleViewType(int)
void addScrapView(android.view.View)
int measureHeightOfChildren(int,int,int,int,int)
int getItemViewType(int)
int findMotionRow(int)
android.view.View fillSpecific(int,int)
void invokeOnItemScrollListener()
void fillActiveViews(int,int)
boolean isDirectChildHeaderOrFooter(android.view.View)
void scrapActiveViews()
void updateScrollIndicators()
android.view.View getActiveView(int)
void setupChild(android.view.View,int,int,boolean,int,boolean,boolean)
boolean shouldShowSelector()
void setSelectionFromTop(int,int)
void setSelectionInt(int)
void setSelectionAfterHeaderView()
boolean commonKey(int,int,android.view.KeyEvent)
boolean resurrectSelection()
boolean arrowScroll(int)
boolean fullScroll(int)
boolean handleHorizontalFocusWithinListItem(int)
void keyPressed()
boolean pageScroll(int)
boolean sendToTextFilter(int,int,android.view.KeyEvent)
android.view.View getSelectedView()
boolean isViewAncestorOf(android.view.View,android.view.View)
boolean arrowScrollImpl(int)
int lookForSelectablePositionOnScreen(int)
int amountToScroll(int,int)
android.widget.ListView$ArrowScrollFocusResult arrowScrollFocused(int)
int getSelectedPosition()
int getAmountToScroll()
void handleNewSelectionChange(android.view.View,int,int,boolean)
int distanceToView(android.view.View)
void hideSelector()
void measureAndAdjustDown(android.view.View,int,int)
void measureItem(android.view.View)
void relayoutMeasuredItem(android.view.View)
int getArrowScrollPreviewLength()
int getLastVisiblePosition()
int positionOfNewFocus(android.view.View)
int amountToScrollToNewFocus(int,android.view.View,int)
void populate(int,int)
android.view.View addViewBelow(android.view.View,int)
android.view.View addViewAbove(android.view.View,int)
void setItemsCanFocus(boolean)
boolean getItemsCanFocus()
void setCacheColorHint(int)
boolean clipRect(android.graphics.Rect)
void drawOverscrollHeader(android.graphics.Canvas,android.graphics.drawable.Drawable,android.graphics.Rect)
void drawOverscrollFooter(android.graphics.Canvas,android.graphics.drawable.Drawable,android.graphics.Rect)
int getCacheColorHint()
void drawDivider(android.graphics.Canvas,android.graphics.Rect,int)
android.graphics.drawable.Drawable getDivider()
void requestLayoutIfNecessary()
int getDividerHeight()
void setHeaderDividersEnabled(boolean)
void setFooterDividersEnabled(boolean)
android.graphics.drawable.Drawable getOverscrollHeader()
android.graphics.drawable.Drawable getOverscrollFooter()
int getDistance(android.graphics.Rect,android.graphics.Rect,int)
android.view.View findViewInHeadersOrFooters(java.util.ArrayList,int)
android.view.View findViewTagInHeadersOrFooters(java.util.ArrayList,java.lang.Object)
int getChoiceMode()
boolean get(int,boolean)
void put(long,java.lang.Object)
void delete(long)
void rememberSyncState()
boolean performItemClick(android.view.View,int,long)
long[] getCheckedItemIds()
long[] getCheckItemIds()
long keyAt(int)
void <init>(android.os.Parcelable,android.util.SparseBooleanArray,android.util.LongSparseArray)
void setAdapter(android.widget.Adapter)
android.widget.Adapter getAdapter()
android.widget.AdapterView$OnItemClickListener getOnItemClickListener()
void setOnItemLongClickListener(android.widget.AdapterView$OnItemLongClickListener)
android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener()
android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()
java.lang.Object getSelectedItem()
int getPositionForView(android.view.View)
int getFirstVisiblePosition()
void updateEmptyStatus(boolean)
android.view.View getEmptyView()
boolean isInFilterMode()
java.lang.Object getItemAtPosition(int)
long getItemIdAtPosition(int)
void <init>(android.widget.AdapterView,android.widget.AdapterView$1)
void fireOnSelected()
void selectionChanged()
int findSyncPosition()
void access$000(android.widget.AdapterView,android.os.Parcelable)
android.os.Parcelable access$100(android.widget.AdapterView)
void access$200(android.widget.AdapterView)
void <init>(android.widget.SlidingDrawer,android.widget.SlidingDrawer$1)
float getDimension(int,float)
void prepareContent()
void onScrollStarted()
void prepareTracking(int)
void moveHandle(int)
void animateClose(int)
void animateOpen(int)
void performFling(int,float,boolean)
void stopTracking()
void onScrollEnded()
void incrementAnimation()
void closeDrawer()
void openDrawer()
void doAnimation()
void animateOpen()
void animateClose()
void animateToggle()
void onDrawerClosed()
void onDrawerOpened()
void setOnDrawerOpenListener(android.widget.SlidingDrawer$OnDrawerOpenListener)
void setOnDrawerCloseListener(android.widget.SlidingDrawer$OnDrawerCloseListener)
void setOnDrawerScrollListener(android.widget.SlidingDrawer$OnDrawerScrollListener)
android.view.View getHandle()
android.view.View getContent()
boolean isOpened()
boolean isMoving()
boolean access$200(android.widget.SlidingDrawer)
boolean access$300(android.widget.SlidingDrawer)
void access$400(android.widget.SlidingDrawer)
void setNextPoolable(android.widget.RelativeLayout$DependencyGraph$Node)
android.widget.RelativeLayout$DependencyGraph$Node getNextPoolable()
android.widget.RelativeLayout$DependencyGraph$Node acquire(android.view.View)
void <init>(android.os.Parcel,android.widget.AbsSpinner$1)
void doAfterTextChanged()
void doBeforeTextChanged()
void resetState()
android.widget.ExpandableListConnector$PositionMetadata getRecycledOrCreate()
android.widget.ExpandableListPosition obtain(int,int,int,int)
android.widget.ExpandableListConnector$PositionMetadata obtain(int,int,int,int,android.widget.ExpandableListConnector$GroupMetadata,int)
boolean isExpanded()
void registerObserver(java.lang.Object)
void unregisterObserver(java.lang.Object)
void notifyInvalidated()
void notifyChanged()
void onGroupCollapsed(int)
void onGroupExpanded(int)
long getCombinedChildId(long,long)
long getCombinedGroupId(long)
int getGroupCount()
int getChildType(int,int)
int getChildTypeCount()
int getGroupType(int)
int getGroupTypeCount()
void <init>(android.widget.MediaController)
int access$100(android.widget.MediaController)
boolean access$200(android.widget.MediaController)
boolean access$000(android.widget.MediaController)
android.widget.MediaController$MediaPlayerControl access$300(android.widget.MediaController)
int findTokenStart(java.lang.CharSequence,int)
int findTokenEnd(java.lang.CharSequence,int)
void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)
java.lang.CharSequence terminateToken(java.lang.CharSequence)
void setThumb(android.graphics.drawable.Drawable)
int getThumbOffset()
void setThumbOffset(int)
void setKeyProgressIncrement(int)
int getKeyProgressIncrement()
android.graphics.drawable.Drawable getProgressDrawable()
void setThumbPos(int,android.graphics.drawable.Drawable,float,int)
void onProgressRefresh(float,boolean)
android.graphics.drawable.Drawable getCurrentDrawable()
void onStartTrackingTouch()
void trackTouchEvent(android.view.MotionEvent)
void attemptClaimDrag()
void onStopTrackingTouch()
void setProgress(int,boolean)
void onKeyChange()
void <init>(android.widget.TableLayout)
void access$200(android.widget.TableLayout,android.view.View)
void <init>(android.widget.TableLayout,android.widget.TableLayout$1)
android.view.ViewGroup$OnHierarchyChangeListener access$102(android.widget.TableLayout$PassThroughHierarchyChangeListener,android.view.ViewGroup$OnHierarchyChangeListener)
void <init>(android.widget.NumberPicker)
void access$600(android.widget.NumberPicker,android.view.View)
void <init>(android.os.Parcel,android.widget.ProgressBar$1)
void <init>(android.widget.ZoomButtonsController,android.content.Context)
boolean access$800(android.widget.ZoomButtonsController,android.view.KeyEvent)
int getLayoutDimension(int,int)
void setRawInputType(int)
android.view.View$OnClickListener access$402(android.widget.AutoCompleteTextView$PassThroughClickListener,android.view.View$OnClickListener)
void onClickImpl()
void setCompletionHint(java.lang.CharSequence)
int getDropDownWidth()
void setDropDownWidth(int)
int getDropDownHeight()
void setDropDownHeight(int)
int getDropDownAnchor()
void setDropDownAnchor(int)
android.graphics.drawable.Drawable getDropDownBackground()
void setDropDownBackgroundDrawable(android.graphics.drawable.Drawable)
void setDropDownBackgroundResource(int)
void setDropDownVerticalOffset(int)
int getDropDownVerticalOffset()
void setDropDownHorizontalOffset(int)
int getDropDownHorizontalOffset()
void setAnimationStyle(int)
int getAnimationStyle()
int getDropDownAnimationStyle()
boolean isDropDownAlwaysVisible()
void setDropDownAlwaysVisible(boolean)
boolean isDropDownDismissedOnCompletion()
android.widget.AdapterView$OnItemClickListener getItemClickListener()
android.widget.AdapterView$OnItemSelectedListener getItemSelectedListener()
void dismissDropDown()
boolean isAboveAnchor()
void setInputMethodMode(int)
void showDropDown()
boolean access$602(android.widget.AutoCompleteTextView$DropDownListView,boolean)
void performValidation()
void performFiltering(java.lang.CharSequence,int)
void filter(java.lang.CharSequence)
java.lang.CharSequence convertResultToString(java.lang.Object)
java.lang.CharSequence convertSelectionToString(java.lang.Object)
void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)
void performCompletion(android.view.View,int,long)
void clearComposingText()
void updateDropDownForFilter(int)
android.view.View getDropDownAnchorView()
int getInputMethodMode()
boolean isInputMethodNotNeeded()
int buildDropDown()
void setWindowLayoutMode(int,int)
void setOutsideTouchable(boolean)
void update(android.view.View,int,int,int,int)
void setWidth(int)
void setHeight(int)
void setTouchInterceptor(android.view.View$OnTouchListener)
void showAsDropDown(android.view.View,int,int)
void setSelector(android.graphics.drawable.Drawable)
void setOnScrollListener(android.widget.AbsListView$OnScrollListener)
android.view.View getHintView(android.content.Context)
android.view.View getContentView()
int getMaxAvailableHeight(android.view.View,int,boolean)
void setValidator(android.widget.AutoCompleteTextView$Validator)
android.widget.AutoCompleteTextView$Validator getValidator()
boolean isValid(java.lang.CharSequence)
java.lang.CharSequence fixText(java.lang.CharSequence)
android.view.View access$900(android.widget.AutoCompleteTextView)
android.widget.AutoCompleteTextView$DropDownListView access$1000(android.widget.AutoCompleteTextView)
android.widget.PopupWindow access$1200(android.widget.AutoCompleteTextView)
java.lang.Runnable access$1300(android.widget.AutoCompleteTextView)
void access$1500(android.widget.AutoCompleteTextView)
boolean access$1800(android.widget.AutoCompleteTextView)
void initClock(android.content.Context)
void <init>(android.widget.DigitalClock)
void setFormat()
boolean get24HourMode()
boolean access$000(android.widget.DigitalClock)
java.lang.Runnable access$100(android.widget.DigitalClock)
android.os.Handler access$200(android.widget.DigitalClock)
void access$300(android.widget.DigitalClock)
android.text.Spannable$Factory getInstance()
void setCompatibilityScaling(float)
android.text.method.MovementMethod getDefaultMovementMethod()
int getColor(int,int)
boolean getDefaultEditable()
void setLines(int)
void setMinLines(int)
void setMaxEms(int)
void setEms(int)
void setMinEms(int)
void setMinWidth(int)
void setMarqueeRepeatLimit(int)
void setIncludeFontPadding(boolean)
void setCursorVisible(boolean)
void setTextScaleX(float)
void setInputExtras(int)
android.text.method.DigitsKeyListener getInstance(java.lang.String)
void setInputType(int,boolean)
android.text.method.DialerKeyListener getInstance()
android.text.method.DigitsKeyListener getInstance(boolean,boolean)
android.text.method.TextKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)
void setCompoundDrawablePadding(int)
android.content.res.ColorStateList valueOf(int)
void setTextColor(android.content.res.ColorStateList)
void setHintTextColor(android.content.res.ColorStateList)
void setLinkTextColor(android.content.res.ColorStateList)
void setHighlightColor(int)
void setRawTextSize(float)
android.text.method.PasswordTransformationMethod getInstance()
void setTransformationMethod(android.text.method.TransformationMethod)
void setTypefaceByIndex(int,int)
void setShadowLayer(float,float,float,int)
void setText(java.lang.CharSequence,android.widget.TextView$BufferType)
void prepareCursorControllers()
void setTypeface(android.graphics.Typeface,int)
android.graphics.Typeface defaultFromStyle(int)
android.graphics.Typeface create(android.graphics.Typeface,int)
int getStyle()
void setFakeBoldText(boolean)
void setTextSkewX(float)
int getLineHeight()
void setKeyListenerOnly(android.text.method.KeyListener)
void fixFocusableAndClickableSettings()
void setKeyListener(android.text.method.KeyListener)
void setFilters(android.text.Editable,android.text.InputFilter[])
android.text.method.TransformationMethod getTransformationMethod()
int getCompoundPaddingTop()
int getCompoundPaddingBottom()
int getCompoundPaddingLeft()
int getCompoundPaddingRight()
int getExtendedPaddingTop()
int getLineTop(int)
int getExtendedPaddingBottom()
int getTotalPaddingLeft()
int getTotalPaddingRight()
int getVerticalOffset(boolean)
int getTotalPaddingTop()
int getBottomVerticalOffset(boolean)
int getTotalPaddingBottom()
void copyBounds(android.graphics.Rect)
android.graphics.drawable.Drawable[] getCompoundDrawables()
int getCompoundDrawablePadding()
void nullLayouts()
int getAutoLinkMask()
float applyDimension(int,float,android.util.DisplayMetrics)
float getTextScaleX()
android.graphics.Typeface getTypeface()
android.graphics.Typeface setTypeface(android.graphics.Typeface)
void updateTextColors()
android.content.res.ColorStateList getTextColors()
int getCurrentTextColor()
void setAutoLinkMask(int)
void setLinksClickable(boolean)
boolean getLinksClickable()
android.text.style.URLSpan[] getUrls()
void setHintTextColor(int)
android.content.res.ColorStateList getHintTextColors()
int getCurrentHintTextColor()
void setLinkTextColor(int)
android.content.res.ColorStateList getLinkTextColors()
void makeNewLayout(int,int,android.text.BoringLayout$Metrics,android.text.BoringLayout$Metrics,int,boolean)
int getPaintFlags()
void setPaintFlags(int)
void setLineSpacing(float,float)
void append(java.lang.CharSequence,int,int)
void append(java.lang.CharSequence)
android.text.Editable append(java.lang.CharSequence,int,int)
int getColorForState(int[],int)
void <init>(android.widget.TextView,java.lang.CharSequence)
void setFreezesText(boolean)
boolean getFreezesText()
void setEditableFactory(android.text.Editable$Factory)
void setSpannableFactory(android.text.Spannable$Factory)
void setTextKeepState(java.lang.CharSequence,android.widget.TextView$BufferType)
void setTextKeepState(java.lang.CharSequence)
void setText(java.lang.CharSequence,android.widget.TextView$BufferType,boolean,int)
char[] access$102(android.widget.TextView$CharWrapper,char[])
java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)
void sendBeforeTextChanged(java.lang.CharSequence,int,int,int)
android.text.Spannable newSpannable(java.lang.CharSequence)
boolean addLinks(android.text.Spannable,int)
android.text.method.MovementMethod getInstance()
java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)
void initialize(android.widget.TextView,android.text.Spannable)
void checkForRelayout()
void sendOnTextChanged(java.lang.CharSequence,int,int,int)
void set(char[],int,int)
void setText(char[],int,int)
void setText(int,android.widget.TextView$BufferType)
void setHint(int)
java.lang.CharSequence getHint()
boolean isPasswordInputType(int)
boolean isVisiblePasswordInputType(int)
void applySingleLine(boolean,boolean)
boolean hasPasswordTransformationMethod()
android.text.method.DateKeyListener getInstance()
android.text.method.TimeKeyListener getInstance()
android.text.method.DateTimeKeyListener getInstance()
void setImeActionLabel(java.lang.CharSequence,int)
java.lang.CharSequence getImeActionLabel()
int getImeActionId()
void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)
boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)
java.lang.String getPrivateImeOptions()
void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)
void setError(java.lang.CharSequence)
void showError()
void <init>(android.widget.TextView,int,int)
void chooseSize(android.widget.PopupWindow,java.lang.CharSequence,android.widget.TextView)
int getErrorX()
int getErrorY()
void fixDirection(boolean)
void hideError()
void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean)
float getLineWidth(int)
void restartMarqueeIfNeeded()
void startMarquee()
android.text.InputFilter[] getFilters()
void invalidateCursor()
float getStrokeWidth()
float ceil(float)
void computeBounds(android.graphics.RectF,boolean)
float floor(float)
void invalidateCursorPath()
void invalidateCursor(int,int,int)
int getLineDescent(int)
void registerForPreDraw()
void assumeLayout()
boolean isSelectionStartDragged()
boolean bringTextIntoView()
boolean hasSelection()
void startTextSelectionMode()
void onDetached()
void hideControllers()
boolean clipRect(float,float,float,float)
boolean canMarquee()
float getLineRight(int)
boolean isRunning()
void getCursorPath(int,android.graphics.Path,java.lang.CharSequence)
void getSelectionPath(int,int,android.graphics.Path)
boolean reportExtractedText()
void mapPoints(float[])
void offset(float,float)
void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)
boolean shouldDrawGhost()
float getGhostOffset()
void updatePosition()
int getLineBottom(int)
int getLineBaseline(int)
int doKeyDown(int,android.view.KeyEvent,android.view.KeyEvent)
boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)
boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)
boolean shouldAdvanceFocusOnEnter()
void stopTextSelectionMode()
boolean onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)
boolean onKeyOther(android.widget.TextView,android.text.Spannable,android.view.KeyEvent)
boolean extractTextInternal(android.view.inputmethod.ExtractedTextRequest,int,int,int,android.view.inputmethod.ExtractedText)
void removeParcelableSpans(android.text.Spannable,int,int)
void startSelecting(android.view.View,android.text.Spannable)
void setExtractedText(android.view.inputmethod.ExtractedText)
void onBeginBatchEdit()
void finishBatchEdit(android.widget.TextView$InputMethodState)
void ensureEndedBatchEdit()
void onEndBatchEdit()
void updateAfterEdit()
void makeBlink()
void checkForResize()
void stopMarquee()
void <init>(java.lang.CharSequence,java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean,android.text.TextUtils$TruncateAt,int)
android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.BoringLayout$Metrics)
android.text.BoringLayout replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean)
android.text.BoringLayout make(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean)
android.text.BoringLayout replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)
android.text.BoringLayout make(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)
void <init>(java.lang.CharSequence,int,int,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean,android.text.TextUtils$TruncateAt,int)
boolean compressText(float)
int getLineEnd(int)
int desired(android.text.Layout)
int getEllipsizedWidth()
void increaseWidthTo(int)
int getDesiredHeight()
int getDesiredHeight(android.text.Layout,boolean)
int getBottomPadding()
android.text.Layout$Alignment getParagraphAlignment(int)
float getLineLeft(int)
void getInterestingRect(android.graphics.Rect,int)
boolean moveCursorToVisibleOffset()
int getLineForVertical(int)
void convertFromViewportToContentCoordinates(android.graphics.Rect)
int viewportToContentHorizontalOffset()
int viewportToContentVerticalOffset()
android.text.method.SingleLineTransformationMethod getInstance()
android.text.TextUtils$TruncateAt getEllipsize()
void setSelectAllOnFocus(boolean)
boolean isStopped()
void startStopMarquee(boolean)
void removeTextChangedListener(android.text.TextWatcher)
boolean isMetaTracker(java.lang.CharSequence,java.lang.Object)
boolean isSelectingMetaTracker(java.lang.CharSequence,java.lang.Object)
boolean isTextEditable()
int getLastTapPosition()
void onTakeFocus(android.widget.TextView,android.text.Spannable,int)
void resetMetaState(android.text.Spannable)
void hideInsertionPointCursorController()
void resetTouchOffsets()
void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect)
int getMinTouchOffset()
void uncancel()
boolean hasInsertionController()
android.widget.TextView$CursorController getInsertionController()
void onTapUpEvent(int,int)
boolean hasSelectionController()
android.widget.TextView$CursorController getSelectionController()
boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)
boolean didTouchFocusSelect()
boolean textCanBeSelected()
void setScroller(android.widget.Scroller)
boolean shouldDrawLeftFade()
android.content.res.ColorStateList getTextColors(android.content.Context,android.content.res.TypedArray)
int getTextColor(android.content.Context,android.content.res.TypedArray,int)
int getDefaultColor()
boolean canSelectText()
boolean canCut()
boolean canCopy()
boolean canPaste()
boolean canSelectArbitrarily()
boolean hasText()
long getWordLimitsAt(int)
int getType(char)
long packRangeInLong(int,int)
int extractRangeStartFromLong(long)
int extractRangeEndFromLong(long)
int getMaxTouchOffset()
void selectCurrentWord()
java.lang.String getWordForDictionary()
boolean isInputMethodTarget()
long prepareSpacesAroundPaste(int,int,java.lang.CharSequence)
boolean isSpaceChar(char)
void hideSelectionModifierCursorController()
int getOffsetForHorizontal(int,int)
int getOffset(int,int)
int getHysteresisOffset(int,int,int)
boolean isInBatchEditMode()
android.text.Layout access$300(android.widget.TextView)
java.lang.CharSequence access$900(android.widget.TextView)
boolean access$1000(android.widget.TextView)
boolean access$1100(android.widget.TextView)
void access$1200(android.widget.TextView)
void access$1300(android.widget.TextView)
android.content.Context access$1500(android.widget.TextView)
android.content.Context access$1600(android.widget.TextView)
int access$1700(android.widget.TextView)
int access$1800(android.widget.TextView)
android.graphics.Rect access$1900()
int access$2000(android.widget.TextView)
int access$2100(android.widget.TextView)
void access$2200(android.widget.TextView,android.graphics.Rect)
void access$2300(android.widget.TextView)
boolean access$2400(android.widget.TextView)
boolean access$2502(android.widget.TextView,boolean)
android.content.Context access$2600(android.widget.TextView)
float measureText(java.lang.String)
void setButtonDrawable(android.graphics.drawable.Drawable)
void setOnCheckedChangeWidgetListener(android.widget.CompoundButton$OnCheckedChangeListener)
void setButtonDrawable(int)
void <init>(android.widget.TabHost,java.lang.String,android.content.Intent)
android.widget.FrameLayout access$100(android.widget.TabHost)
void tabClosed()
void <init>(android.widget.TabHost,java.lang.String,android.content.Intent,android.widget.TabHost$1)
void access$700(android.widget.ZoomButtonsController)
void <init>(android.widget.DateTimeView,android.os.Handler)
void selectAll(android.text.Spannable)
void extendSelection(int)
void <init>(android.widget.RelativeLayout)
int compare(android.view.View,android.view.View)
void <init>(android.widget.SimpleAdapter)
java.util.ArrayList access$100(android.widget.SimpleAdapter)
java.util.List access$200(android.widget.SimpleAdapter)
java.util.ArrayList access$102(android.widget.SimpleAdapter,java.util.ArrayList)
int[] access$300(android.widget.SimpleAdapter)
java.lang.String[] access$400(android.widget.SimpleAdapter)
java.util.List access$202(android.widget.SimpleAdapter,java.util.List)
void <init>(android.widget.SimpleAdapter,android.widget.SimpleAdapter$1)
void <init>(android.content.Context,android.database.Cursor,int,int,int,int)
void init(java.lang.String[],int[],java.lang.String[],int[])
void <init>(android.content.Context,android.database.Cursor,int,int,java.lang.String[],int[],int,int,java.lang.String[],int[])
void <init>(android.content.Context,android.database.Cursor,int,int,int)
void <init>(android.content.Context,android.database.Cursor,int,int,java.lang.String[],int[],int,java.lang.String[],int[])
void <init>(android.content.Context,android.database.Cursor,int,int)
void <init>(android.content.Context,android.database.Cursor,int,java.lang.String[],int[],int,java.lang.String[],int[])
android.widget.SimpleCursorTreeAdapter$ViewBinder getViewBinder()
void setViewBinder(android.widget.SimpleCursorTreeAdapter$ViewBinder)
boolean setViewValue(android.view.View,android.database.Cursor,int)
void setViewText(android.widget.TextView,java.lang.String)
void setViewImage(android.widget.ImageView,java.lang.String)
void bindView(android.view.View,android.content.Context,android.database.Cursor,int[],int[])
void initFromColumns(android.database.Cursor,java.lang.String[],int[])
void bindChildView(android.view.View,android.content.Context,android.database.Cursor,boolean)
void bindGroupView(android.view.View,android.content.Context,android.database.Cursor,boolean)
void initScrollView()
void setFillViewport(boolean)
boolean canScroll()
boolean isFillViewport()
boolean isSmoothScrollingEnabled()
void setSmoothScrollingEnabled(boolean)
boolean inChild(int,int)
int getScrollRange()
void onSecondaryPointerUp(android.view.MotionEvent)
void fling(int)
android.view.View findFocusableViewInBounds(boolean,int,int)
android.view.View findFocusableViewInMyBounds(boolean,int,android.view.View)
boolean scrollAndFocus(int,int,int)
void doScrollY(int)
boolean isWithinDeltaOfScreen(android.view.View,int,int)
int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect)
boolean isOffScreen(android.view.View)
void smoothScrollBy(int,int)
void smoothScrollTo(int,int)
void scrollToChild(android.view.View)
boolean scrollToChildRect(android.graphics.Rect,boolean)
int clamp(int,int,int)
void <init>(android.os.Parcel,android.widget.AbsListView$1)
android.widget.AbsListView$SavedState createFromParcel(android.os.Parcel)
android.widget.AbsListView$SavedState[] newArray(int)
void <init>(java.lang.Appendable)
java.util.Formatter format(java.lang.String,java.lang.Object[])
boolean areAllListInfosSelectable(java.util.ArrayList)
int getHeadersCount()
int getFootersCount()
android.widget.ListAdapter getWrappedAdapter()
void <init>(android.database.Cursor,android.content.Context)
android.view.View newChildView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)
android.view.View newGroupView(android.content.Context,android.database.Cursor,boolean,android.view.ViewGroup)
void <init>(android.widget.AnalogClock)
void scale(float,float,float,float)
void setToNow()
android.text.format.Time access$002(android.widget.AnalogClock,android.text.format.Time)
void access$100(android.widget.AnalogClock)
void setIsIndicator(boolean)
void setNumStars(int)
void setStepSize(float)
void setRating(float)
void setOnRatingBarChangeListener(android.widget.RatingBar$OnRatingBarChangeListener)
android.widget.RatingBar$OnRatingBarChangeListener getOnRatingBarChangeListener()
boolean isIndicator()
int getNumStars()
float getProgressPerStar()
float getRating()
float getStepSize()
android.graphics.drawable.shapes.Shape getDrawableShape()
void updateSecondaryProgress(int)
void dispatchRatingChange(boolean)
void onRatingChanged(android.widget.RatingBar,float,boolean)
void <init>(android.widget.TabHost,java.lang.String)
void <init>(android.widget.TabHost,java.lang.CharSequence,android.widget.TabHost$1)
android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence)
void <init>(android.widget.TabHost,java.lang.CharSequence,android.graphics.drawable.Drawable,android.widget.TabHost$1)
android.widget.TabHost$TabSpec setIndicator(java.lang.CharSequence,android.graphics.drawable.Drawable)
void <init>(android.widget.TabHost,android.view.View,android.widget.TabHost$1)
android.widget.TabHost$TabSpec setIndicator(android.view.View)
void <init>(android.widget.TabHost,int,android.widget.TabHost$1)
android.widget.TabHost$TabSpec setContent(int)
void <init>(android.widget.TabHost,java.lang.CharSequence,android.widget.TabHost$TabContentFactory)
android.widget.TabHost$TabSpec setContent(android.widget.TabHost$TabContentFactory)
android.widget.TabHost$TabSpec setContent(android.content.Intent)
java.lang.String getTag()
void <init>(android.widget.TabHost,java.lang.String,android.widget.TabHost$1)
android.widget.TabHost$IndicatorStrategy access$200(android.widget.TabHost$TabSpec)
android.widget.TabHost$ContentStrategy access$300(android.widget.TabHost$TabSpec)
void <init>(android.widget.RemoteViews$1)
void <init>(android.widget.RemoteViews,int,boolean,int,int,android.graphics.PorterDuff$Mode,int)
android.graphics.PorterDuff$Mode valueOf(java.lang.String)
void <init>(android.widget.RemoteViews,android.os.Parcel)
void apply(android.view.View)
android.widget.AppSecurityPermissions$State[] values()
android.widget.AppSecurityPermissions$State valueOf(java.lang.String)
void <init>(android.widget.DoubleDigitManager)
java.lang.Integer access$000(android.widget.DoubleDigitManager)
android.widget.DoubleDigitManager$CallBack access$100(android.widget.DoubleDigitManager)
void singleDigitFinal(int)
java.lang.Integer access$002(android.widget.DoubleDigitManager,java.lang.Integer)
void <init>(android.widget.AbsSpinner)
void put(int,android.view.View)
void access$100(android.widget.AbsSpinner,android.view.View,boolean)
java.text.Collator getInstance()
void setStrength(int)
void <init>(android.database.Cursor,int,java.lang.CharSequence)
java.lang.Object[] getSections()
void setCursor(android.database.Cursor)
int getPositionForSection(int)
int getSectionForPosition(int)
void <init>(android.widget.VideoView)
int access$1002(android.widget.VideoView,int)
int access$1102(android.widget.VideoView,int)
int access$1200(android.widget.VideoView)
int access$000(android.widget.VideoView)
int access$100(android.widget.VideoView)
android.media.MediaPlayer access$700(android.widget.VideoView)
int access$900(android.widget.VideoView)
android.widget.MediaController access$800(android.widget.VideoView)
android.view.SurfaceHolder access$1902(android.widget.VideoView,android.view.SurfaceHolder)
int access$200(android.widget.VideoView)
android.view.SurfaceHolder access$1900(android.widget.VideoView)
void setDisplay(android.view.SurfaceHolder)
void access$2000(android.widget.VideoView)
void access$2100(android.widget.VideoView,boolean)
void <init>(android.widget.TabHost,int)
void <init>(android.widget.SlidingDrawer)
void initVideoView()
int resolveAdjustedSize(int,int)
void setVideoURI(android.net.Uri)
void setVideoPath(java.lang.String)
void openVideo()
void release(boolean)
void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)
void setDataSource(android.content.Context,android.net.Uri,java.util.Map)
void setAudioStreamType(int)
void setScreenOnWhilePlaying(boolean)
void attachMediaController()
void setMediaPlayer(android.widget.MediaController$MediaPlayerControl)
void setAnchorView(android.view.View)
boolean isInPlaybackState()
void toggleMediaControlsVisiblity()
boolean suspend()
void suspend()
boolean resume()
int getBufferPercentage()
boolean canPause()
boolean canSeekBackward()
boolean canSeekForward()
int access$002(android.widget.VideoView,int)
int access$102(android.widget.VideoView,int)
int access$202(android.widget.VideoView,int)
boolean access$302(android.widget.VideoView,boolean)
boolean access$402(android.widget.VideoView,boolean)
boolean access$502(android.widget.VideoView,boolean)
android.media.MediaPlayer$OnPreparedListener access$600(android.widget.VideoView)
int access$1000(android.widget.VideoView)
int access$1100(android.widget.VideoView)
int access$1202(android.widget.VideoView,int)
android.media.MediaPlayer$OnCompletionListener access$1300(android.widget.VideoView)
java.lang.String access$1400(android.widget.VideoView)
android.media.MediaPlayer$OnErrorListener access$1500(android.widget.VideoView)
android.content.Context access$1600(android.widget.VideoView)
android.content.Context access$1700(android.widget.VideoView)
int access$1802(android.widget.VideoView,int)
void setAnimationDuration(int)
void setSpacing(int)
void setUnselectedAlpha(float)
void setCallbackDuringFling(boolean)
void setCallbackOnUnselectedItemClick(boolean)
int getChildHeight(android.view.View)
int getLimitedMotionScrollAmount(boolean,int)
void onFinishedMovement()
void offsetChildrenLeftAndRight(int)
void detachOffScreenChildren(boolean)
void fillToGalleryRight()
void fillToGalleryLeft()
void setSelectionToCenterChild()
int getCenterOfView(android.view.View)
int getCenterOfGallery()
void scrollIntoSlots()
android.view.View makeAndAddView(int,int,int,boolean)
void updateSelectedItemMetadata()
void setUpChild(android.view.View,int,int,boolean)
int calculateTop(android.view.View,boolean)
void onUp()
boolean scrollToChild(int)
int pointToPosition(int,int)
void dispatchUnpress()
boolean dispatchLongPress(android.view.View,int,long)
void dispatchPress(android.view.View)
boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)
void <init>(android.view.View,int,long)
boolean movePrevious()
boolean moveNext()
boolean access$002(android.widget.Gallery,boolean)
void access$300(android.widget.Gallery)
android.widget.ExpandableListConnector$PositionMetadata getUnflattenedPos(int)
android.graphics.drawable.Drawable getIndicator(android.widget.ExpandableListConnector$PositionMetadata)
void setChildDivider(android.graphics.drawable.Drawable)
int getFlatPositionForConnector(int)
void <init>(android.widget.ExpandableListAdapter)
boolean isHeaderOrFooterPosition(int)
int getAbsoluteFlatPosition(int)
boolean handleItemClick(android.view.View,int,long)
long getChildOrGroupId(android.widget.ExpandableListPosition)
boolean onGroupClick(android.widget.ExpandableListView,android.view.View,int,long)
boolean collapseGroup(android.widget.ExpandableListConnector$PositionMetadata)
boolean expandGroup(android.widget.ExpandableListConnector$PositionMetadata)
int getChildrenCount(int)
void smoothScrollToPosition(int,int)
boolean expandGroup(int)
boolean collapseGroup(int)
void setOnGroupClickListener(android.widget.ExpandableListView$OnGroupClickListener)
long getExpandableListPosition(int)
long getPackedPosition()
android.widget.ExpandableListPosition obtainPosition(long)
android.widget.ExpandableListConnector$PositionMetadata getFlattenedPos(android.widget.ExpandableListPosition)
int getFlatListPosition(long)
int getPackedPositionGroup(long)
int getPackedPositionType(long)
long getGroupId(int)
int getPackedPositionChild(long)
long getChildId(int,int)
android.widget.ExpandableListPosition obtainGroupPosition(int)
android.widget.ExpandableListPosition obtainChildPosition(int,int)
boolean isGroupExpanded(int)
long getPackedPositionForChild(int,int)
long getPackedPositionForGroup(int)
android.view.ContextMenu$ContextMenuInfo createContextMenuInfo(android.view.View,int,long)
void setChildIndicator(android.graphics.drawable.Drawable)
void setChildIndicatorBounds(int,int)
void setGroupIndicator(android.graphics.drawable.Drawable)
void setIndicatorBounds(int,int)
java.util.ArrayList getExpandedGroupMetadataList()
void <init>(android.os.Parcelable,java.util.ArrayList)
void setExpandedGroupMetadataList(java.util.ArrayList)
void <init>(android.widget.CursorAdapter)
void <init>(android.widget.CursorAdapter,android.widget.CursorAdapter$1)
void <init>(long,android.widget.DoubleDigitManager$CallBack)
boolean singleDigitIntermediate(int)
boolean twoDigitsFinal(int,int)
void reportDigit(int)
void <init>(android.os.Parcel,android.widget.TimePicker$1)
android.widget.TimePicker$SavedState createFromParcel(android.os.Parcel)
android.widget.TimePicker$SavedState[] newArray(int)
void <init>(android.content.Context,android.database.Cursor)
void <init>(android.content.Context,int,android.database.Cursor)
android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup)
void setViewResource(int)
void setDropDownViewResource(int)
void initTableRow()
void <init>(android.widget.TableRow,android.widget.TableRow$1)
void access$100(android.widget.TableRow$ChildrenTracker,android.view.ViewGroup$OnHierarchyChangeListener)
android.view.View getVirtualChildAt(int)
void setColumnCollapsed(int,boolean)
void measureHorizontal(int,int)
void layoutHorizontal()
void mapIndexAndColumns()
int getVirtualChildCount()
int measureNullChild(int)
int[] access$200(android.widget.TableRow$LayoutParams)
void measureChildBeforeLayout(android.view.View,int,int,int,int,int)
int getChildrenSkipCount(android.view.View,int)
int getLocationOffset(android.view.View)
int getNextLocationOffset(android.view.View)
int[] getColumnsWidths(int)
void setColumnsWidthConstraints(int[])
android.widget.TableRow$LayoutParams generateLayoutParams(android.util.AttributeSet)
android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams()
android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)
android.util.SparseIntArray access$302(android.widget.TableRow,android.util.SparseIntArray)
void setFormat(java.lang.String)
void updateText(long)
void setBase(long)
java.lang.String getFormat()
android.widget.Chronometer$OnChronometerTickListener getOnChronometerTickListener()
void updateRunning()
void setStarted(boolean)
java.lang.String formatElapsedTime(java.lang.StringBuilder,long)
void initAbsSpinner()
void setAdapter(android.widget.SpinnerAdapter)
int getChildWidth(android.view.View)
void setSelectionInt(int,boolean)
void setSelection(int,boolean)
void <init>(android.widget.TabWidget,int)
android.widget.TabWidget$OnTabSelectionChanged access$100(android.widget.TabWidget)
void onTabSelectionChanged(int,boolean)
void <init>(android.widget.TabWidget,int,android.widget.TabWidget$1)
void addRule(int)
void addRule(int,int)
int[] access$700(android.widget.RelativeLayout$LayoutParams)
android.widget.ExpandableListConnector$GroupMetadata obtain(int,int,int,long)
int compareTo(android.widget.ExpandableListConnector$GroupMetadata)
void initViewAnimator(android.content.Context,android.util.AttributeSet)
void setInAnimation(android.content.Context,int)
void setOutAnimation(android.content.Context,int)
void setMeasureAllChildren(boolean)
void showOnly(int)
void setDisplayedChild(int)
int getDisplayedChild()
void showNext()
void showPrevious()
android.view.View getCurrentView()
android.view.animation.Animation getInAnimation()
void setInAnimation(android.view.animation.Animation)
android.view.animation.Animation getOutAnimation()
void setOutAnimation(android.view.animation.Animation)
void setAnimateFirstView(boolean)
void <init>(android.content.Context,java.util.List,int,java.lang.String[],int[])
android.view.View createViewFromResource(int,android.view.View,android.view.ViewGroup,int)
void bindView(int,android.view.View)
android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)
boolean setViewValue(android.view.View,java.lang.Object,java.lang.String)
void setViewImage(android.widget.ImageView,int)
android.widget.SimpleAdapter$ViewBinder getViewBinder()
void setViewBinder(android.widget.SimpleAdapter$ViewBinder)
void <init>(android.widget.Toast)
void setMargin(float,float)
float getHorizontalMargin()
float getVerticalMargin()
int getXOffset()
int getYOffset()
void onChanged(android.widget.NumberPicker,int,int)
void <init>(android.widget.DatePicker)
int access$202(android.widget.DatePicker,int)
void access$300(android.widget.DatePicker)
void access$100(android.widget.DatePicker)
void access$400(android.widget.DatePicker)
int access$1000(android.widget.AbsListView)
void startSpringback()
int access$1100(android.widget.AbsListView)
int access$1200(android.widget.AbsListView)
int access$1300(android.widget.AbsListView)
void startOverfling(int)
int access$1400(android.widget.AbsListView)
void notifyVerticalEdgeReached(int,int,int)
boolean access$1500(android.widget.AbsListView)
android.widget.EdgeGlow access$1600(android.widget.AbsListView)
android.widget.EdgeGlow access$1700(android.widget.AbsListView)
void edgeReached(int)
void startScroll(int,int)
void reportScrollStateChange(int)
void access$1800(android.widget.AbsListView)
android.widget.AbsListView$PositionScroller access$1900(android.widget.AbsListView)
void endFling()
int access$2000(android.widget.AbsListView)
int access$2100(android.widget.AbsListView)
int access$2200(android.widget.AbsListView)
int access$2300(android.widget.AbsListView)
boolean trackMotionScroll(int,int)
int access$2400(android.widget.AbsListView)
boolean access$2500(android.widget.AbsListView,int,int,int,int,int,int,int,int,boolean)
int access$2600(android.widget.AbsListView)
boolean access$2700(android.widget.AbsListView,int,int,int,int,int,int,int,int,boolean)
void access$200(android.widget.AbsListView$FlingRunnable)
boolean access$000(android.widget.NumberPicker)
int access$100(android.widget.NumberPicker)
void changeCurrent(int)
android.os.Handler access$300(android.widget.NumberPicker)
long access$200(android.widget.NumberPicker)
boolean access$400(android.widget.NumberPicker)
void <init>(android.widget.DateTimeView)
long access$000(android.widget.DateTimeView)
void <init>(android.widget.TabHost)
android.view.View getNextView()
void <init>(android.widget.RemoteViews,int,android.app.PendingIntent)
void <init>(android.widget.RemoteViews$SetOnClickPendingIntent)
void <init>(android.widget.FastScroller)
void startFade()
int getAlpha()
android.widget.AbsListView access$000(android.widget.FastScroller)
void syncTextState()
java.lang.CharSequence getTextOn()
void setTextOn(java.lang.CharSequence)
java.lang.CharSequence getTextOff()
void setTextOff(java.lang.CharSequence)
void updateReferenceToIndicatorDrawable(android.graphics.drawable.Drawable)
android.graphics.drawable.Drawable findDrawableByLayerId(int)
void <init>(android.os.Parcel,android.widget.TextView$1)
void <init>(android.widget.Filter,android.os.Looper)
java.lang.Object access$300(android.widget.Filter)
android.os.Handler access$400(android.widget.Filter)
android.os.Handler access$402(android.widget.Filter,android.os.Handler)
android.os.Handler access$200(android.widget.Filter)
void <init>(android.widget.RadioGroup)
boolean access$300(android.widget.RadioGroup)
boolean access$302(android.widget.RadioGroup,boolean)
int access$400(android.widget.RadioGroup)
void access$500(android.widget.RadioGroup,int,boolean)
void access$600(android.widget.RadioGroup,int)
void <init>(android.widget.RadioGroup,android.widget.RadioGroup$1)
void access$2900(android.widget.AbsListView,boolean)
int access$3000(android.widget.AbsListView)
void access$3100(android.widget.AbsListView,boolean)
void <init>(android.os.Parcel,android.widget.DatePicker$1)
android.widget.DatePicker$SavedState createFromParcel(android.os.Parcel)
android.widget.DatePicker$SavedState[] newArray(int)
void <init>(android.os.Parcel,android.widget.CompoundButton$1)
void <init>(android.widget.Toast$TN)
void handleShow()
void <init>(android.widget.ProgressBar,int,int,boolean)
void access$000(android.widget.ProgressBar,int,int,boolean)
android.widget.ProgressBar$RefreshProgressRunnable access$102(android.widget.ProgressBar,android.widget.ProgressBar$RefreshProgressRunnable)
void setup(int,int,boolean)
void setBaselineAligned(boolean)
boolean isBaselineAligned()
int getBaselineAlignedChildIndex()
void setBaselineAlignedChildIndex(int)
float getWeightSum()
void setWeightSum(float)
void measureVertical(int,int)
void forceUniformWidth(int,int)
void forceUniformHeight(int,int)
void layoutVertical()
void setChildFrame(android.view.View,int,int,int,int)
android.text.Layout$Alignment[] values()
void initTabHost()
android.widget.TabHost$TabSpec newTabSpec(java.lang.String)
void setTabSelectionListener(android.widget.TabWidget$OnTabSelectionChanged)
void setup()
android.view.View getChildTabViewAt(int)
android.view.View createIndicatorView()
void setStripEnabled(boolean)
void addTab(android.widget.TabHost$TabSpec)
void clearAllTabs()
android.widget.FrameLayout getTabContentView()
void focusCurrentTab(int)
void invokeOnTabChangeListener()
void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)
void onTabChanged(java.lang.String)
android.widget.TabWidget access$900(android.widget.TabHost)
void <init>(android.widget.TextView$InsertionPointCursorController)
void tick()
void resetScroll()
boolean isQwertyKeyboard()
void makeDigitsPrimary()
void makeLettersPrimary()
void onModeChange(int,int)
void swapPrimaryAndHint(boolean)
java.lang.CharSequence getLetters()
java.lang.CharSequence getDigits()
java.lang.CharSequence getFilterText()
android.text.Editable append(java.lang.CharSequence)
void clearText()
void setLettersWatcher(android.text.TextWatcher)
void setDigitsWatcher(android.text.TextWatcher)
void setFilterWatcher(android.text.TextWatcher)
void removeFilterWatcher(android.text.TextWatcher)
boolean getAlwaysDrawVerticalTrack()
boolean getAlwaysDrawHorizontalTrack()
void drawTrack(android.graphics.Canvas,android.graphics.Rect,boolean)
void drawThumb(android.graphics.Canvas,android.graphics.Rect,int,int,boolean)
void onBoundsChange(android.graphics.Rect)
android.widget.TextView getText1()
android.widget.TextView getText2()
void set(long)
void <init>(int,int,int,int,int,int)
long normalize(boolean)
java.text.DateFormat getTimeFormat()
java.text.DateFormat getDateFormat()
android.widget.ExpandableListPosition getRecycledOrCreate()
void setNumberPicker(android.widget.NumberPicker)
void cancelLongpressIfRequired(android.view.MotionEvent)
void cancelLongpress()
void cancelIncrement()
void cancelDecrement()
void <init>(android.widget.TabHost,java.lang.CharSequence)
void handleHide()
void <init>(android.os.Parcelable,int,int,int)
int getDay()
void <init>(android.os.Parcelable,int,int,int,android.widget.DatePicker$1)
void <init>(android.widget.RemoteViews,int,android.widget.RemoteViews)
void <init>(android.widget.CursorFilter$CursorFilterClient)
void <init>(android.widget.ViewFlipper)
void startFlipping()
void setFlipInterval(int)
void stopFlipping()
boolean isFlipping()
void setAutoStart(boolean)
boolean isAutoStart()
boolean access$002(android.widget.ViewFlipper,boolean)
void access$100(android.widget.ViewFlipper)
boolean access$200(android.widget.ViewFlipper)
int access$300(android.widget.ViewFlipper)
void <init>(android.os.Parcelable,int,int)
void initializeFromContext(android.content.Context)
void updateScroll(float)
float getDeceleration(int)
int computeDuration(int,int,float,float)
void startScroll(int,int,int)
void fling(int,int,int,int)
void setFinalPosition(int)
void setBounceCoefficient(float)
void startSpringback(int,int,boolean)
boolean springback(int,int,int)
void onEdgeReached()
void fling(int,int,int,int,int)
void notifyEdgeReached(int,int,int)
boolean continueWhenFinished()
boolean update()
int access$000(android.widget.OverScroller$MagneticOverScroller)
void <init>(android.widget.TableRow)
java.lang.String[] access$1000(android.widget.NumberPicker)
android.text.InputFilter access$1100(android.widget.NumberPicker)
void <init>(android.widget.NumberPicker,android.widget.NumberPicker$1)
boolean sameWindow()
boolean access$600(android.widget.AbsListView,android.view.View,int,long)
java.util.LinkedList findRoots(int[])
void printNode(android.content.res.Resources,android.widget.RelativeLayout$DependencyGraph$Node)
void log(android.content.res.Resources,int[])
void printViewId(android.content.res.Resources,android.view.View)
void appendViewId(android.content.res.Resources,android.widget.RelativeLayout$DependencyGraph$Node,java.lang.StringBuilder)
void printdependents(android.content.res.Resources,android.widget.RelativeLayout$DependencyGraph$Node,java.lang.StringBuilder)
void addAction(android.widget.RemoteViews$Action)
void addView(int,android.widget.RemoteViews)
void removeAllViews(int)
void setInt(int,java.lang.String,int)
void setViewVisibility(int,int)
void setCharSequence(int,java.lang.String,java.lang.CharSequence)
void setUri(int,java.lang.String,android.net.Uri)
void setImageViewUri(int,android.net.Uri)
void setBitmap(int,java.lang.String,android.graphics.Bitmap)
void setImageViewBitmap(int,android.graphics.Bitmap)
void setString(int,java.lang.String,java.lang.String)
void setBoolean(int,java.lang.String,boolean)
void setChronometer(int,long,java.lang.String,boolean)
void setProgressBar(int,int,int,boolean)
void setOnClickPendingIntent(int,android.app.PendingIntent)
void setDrawableParameters(int,boolean,int,int,android.graphics.PorterDuff$Mode,int)
void setTextColor(int,int)
void <init>(android.widget.RemoteViews,int,java.lang.String,int,java.lang.Object)
java.lang.Byte valueOf(byte)
void setByte(int,java.lang.String,byte)
java.lang.Short valueOf(short)
void setShort(int,java.lang.String,short)
void setFloat(int,java.lang.String,float)
void setDouble(int,java.lang.String,double)
void setChar(int,java.lang.String,char)
void setBundle(int,java.lang.String,android.os.Bundle)
android.content.Context prepareContext(android.content.Context)
void performApply(android.view.View)
void <init>(android.widget.Filter)
void <init>(android.widget.Filter,android.widget.Filter$1)
android.widget.TextView$SavedState createFromParcel(android.os.Parcel)
android.widget.TextView$SavedState[] newArray(int)
void <init>(android.content.Context,java.util.List)
void getAllUsedPermissions(int,java.util.Set)
void extractPerms(java.lang.String[],java.util.Set)
void <init>(android.content.Context,android.content.pm.PackageParser$Package)
android.view.View getPermissionItemView(android.content.Context,android.view.LayoutInflater,java.lang.CharSequence,java.lang.CharSequence,boolean,android.graphics.drawable.Drawable)
android.view.View getPermissionItemView(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,boolean)
void getPermissionsForPackage(java.lang.String,java.util.Set)
int getPermissionCount()
void setPermissions(java.util.List)
android.view.View getPermissionsView()
java.lang.String canonicalizeGroupDesc(java.lang.String)
java.lang.String formatPermissions(java.lang.String,java.lang.CharSequence)
java.lang.CharSequence getGroupLabel(java.lang.String)
android.view.View getPermissionItemView(java.lang.CharSequence,java.lang.CharSequence,boolean)
void displayPermissions(boolean)
void displayNoPermissions()
void showPermissions()
boolean isDisplayablePermission(android.content.pm.PermissionInfo)
void aggregateGroupDescs(java.util.Map,java.util.Map)
int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)
void <init>(android.widget.PopupWindow)
int getStateDrawableIndex(int[])
int getStateCount()
android.graphics.drawable.Drawable getStateDrawable(int)
void <init>(android.view.View,int,int)
void <init>(android.view.View,int,int,boolean)
void setIgnoreCheekPress()
int getSoftInputMode()
boolean isTouchable()
void setTouchable(boolean)
boolean isOutsideTouchable()
boolean isClippingEnabled()
void setClippingEnabled(boolean)
boolean isSplitTouchEnabled()
void setSplitTouchEnabled(boolean)
boolean isLayoutInScreenEnabled()
void setLayoutInScreenEnabled(boolean)
void setWindowLayoutType(int)
int getWindowLayoutType()
void unregisterForScrollChanged()
android.view.WindowManager$LayoutParams createPopupLayout(android.os.IBinder)
int computeAnimationResource()
void preparePopup(android.view.WindowManager$LayoutParams)
void invokePopup(android.view.WindowManager$LayoutParams)
void showAtLocation(android.view.View,int,int,int)
void showAsDropDown(android.view.View)
void registerForScrollChanged(android.view.View,int,int)
boolean findDropDownPosition(android.view.View,android.view.WindowManager$LayoutParams,int,int)
void updateAboveAnchor(boolean)
void <init>(android.widget.PopupWindow,android.content.Context)
int computeFlags(int)
int getMaxAvailableHeight(android.view.View,int)
int getMaxAvailableHeight(android.view.View)
void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)
void update(int,int,int,int,boolean)
void update(int,int)
void update(int,int,int,int)
void update(android.view.View,boolean,int,int,boolean,int,int)
void update(android.view.View,int,int)
java.lang.ref.WeakReference access$000(android.widget.PopupWindow)
android.view.View access$100(android.widget.PopupWindow)
int access$200(android.widget.PopupWindow)
int access$300(android.widget.PopupWindow)
boolean access$400(android.widget.PopupWindow,android.view.View,android.view.WindowManager$LayoutParams,int,int)
void access$500(android.widget.PopupWindow,boolean)
boolean access$600(android.widget.PopupWindow)
int[] access$700()
android.view.View$OnTouchListener access$800(android.widget.PopupWindow)
android.view.View access$900(android.widget.PopupWindow)
void access$200(android.widget.ZoomButtonsController)
android.view.View access$300(android.widget.ZoomButtonsController)
java.lang.Class getParameterType()
void setSourceBounds(android.graphics.Rect)
void <init>(android.content.Context,android.view.animation.Interpolator)
int timePassed()
int getStartX()
int getStartY()
float viscousFluid(float)
double exp(double)
void initProgressBar()
android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean)
android.graphics.drawable.Drawable tileifyIndeterminate(android.graphics.drawable.Drawable)
int getNumberOfLayers()
int getId(int)
void <init>(android.graphics.drawable.Drawable[])
void setId(int,int)
int[] getStateSet(int)
android.graphics.Bitmap getBitmap()
void <init>(android.graphics.drawable.Drawable,int,int)
void <init>(float[],android.graphics.RectF,float[])
int getNumberOfFrames()
boolean isOneShot()
void setOneShot(boolean)
android.graphics.drawable.Drawable getFrame(int)
int getDuration(int)
void addFrame(android.graphics.drawable.Drawable,int)
void startAnimation()
void stopAnimation()
android.graphics.drawable.Drawable getIndeterminateDrawable()
void doRefreshProgress(int,int,boolean)
void refreshProgress(int,int,boolean)
void <init>(android.content.Context,android.view.animation.Interpolator,float,float)
void notifyHorizontalEdgeReached(int,int,int)
boolean isOverScrolled()
void init(android.database.Cursor,android.content.Context,boolean)
void <init>(android.database.Cursor,android.content.Context,boolean)
void <init>(android.widget.CursorTreeAdapter,android.database.Cursor)
android.database.Cursor moveTo(int)
android.database.Cursor getChildrenCursor(android.database.Cursor)
android.widget.CursorTreeAdapter$MyCursorHelper getChildrenCursorHelper(int,boolean)
void changeCursor(android.database.Cursor,boolean)
void setGroupCursor(android.database.Cursor)
void setChildrenCursor(int,android.database.Cursor)
android.database.Cursor getChild(int,int)
long getId(int)
android.database.Cursor getGroup(int)
android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)
android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)
boolean isChildSelectable(int,int)
void releaseCursorHelpers()
void notifyDataSetChanged(boolean)
void deactivateChildrenCursorHelper(int)
java.lang.String convertToString(android.database.Cursor)
android.database.Cursor runQuery(java.lang.CharSequence)
android.widget.FilterQueryProvider getFilterQueryProvider()
void setFilterQueryProvider(android.widget.FilterQueryProvider)
java.lang.Object getChild(int,int)
java.lang.Object getGroup(int)
android.os.Handler access$100(android.widget.CursorTreeAdapter)
boolean access$200(android.widget.CursorTreeAdapter)
char[] access$1200()
char[] getAcceptedChars()
int access$1300(android.widget.NumberPicker,java.lang.String)
int access$1400(android.widget.NumberPicker)
android.widget.EditText access$500(android.widget.NumberPicker)
boolean deliverSelfNotifications()
android.database.Cursor access$300(android.widget.CursorTreeAdapter$MyCursorHelper)
android.media.Metadata getMetadata(boolean,boolean)
boolean has(int)
void show(int)
void drawText(char[],int,int,float,float,android.graphics.Paint)
void drawText(android.graphics.Canvas,int,int,float,float,android.graphics.Paint)
float measureText(char[],int,int)
float measureText(int,int,android.graphics.Paint)
int getTextWidths(char[],int,int,float[])
int getTextWidths(int,int,float[],android.graphics.Paint)
android.widget.ExpandableListConnector$GroupMetadata createFromParcel(android.os.Parcel)
android.widget.ExpandableListConnector$GroupMetadata[] newArray(int)
void <init>(android.widget.TabHost,java.lang.CharSequence,android.graphics.drawable.Drawable)
void <init>(android.content.Context,java.util.List,int,int,java.lang.String[],int[],java.util.List,int,int,java.lang.String[],int[])
void <init>(android.content.Context,java.util.List,int,java.lang.String[],int[],java.util.List,int,java.lang.String[],int[])
void <init>(android.content.Context,java.util.List,int,int,java.lang.String[],int[],java.util.List,int,java.lang.String[],int[])
android.view.View newChildView(boolean,android.view.ViewGroup)
void bindView(android.view.View,java.util.Map,java.lang.String[],int[])
android.view.View newGroupView(boolean,android.view.ViewGroup)
void <init>(android.widget.AbsListView,android.view.inputmethod.InputConnection,boolean)
android.view.inputmethod.InputConnection access$3200(android.widget.AbsListView)
void <init>(android.widget.TextView,android.widget.TextView$CursorController,int)
void updatePosition(android.widget.TextView$HandleView,int,int)
void positionAtCursor(int,boolean)
void updateMinAndMaxOffsets(android.view.MotionEvent)
boolean isDragging()
void onScroll(android.widget.AbsListView,int,int,int)
void onScrollStateChanged(android.widget.AbsListView,int)
android.content.Context access$2800(android.widget.AbsListView)
void start(int,int)
void onVideoSizeChanged(android.media.MediaPlayer,int,int)
android.widget.CompoundButton$SavedState createFromParcel(android.os.Parcel)
android.widget.CompoundButton$SavedState[] newArray(int)
void <init>(android.widget.ExpandableListConnector)
void setExpandableListAdapter(android.widget.ExpandableListAdapter)
int findGroupPosition(long,int)
void refreshExpGroupMetadataList(boolean,boolean)
void setMaxExpGroupCount(int)
android.widget.ExpandableListAdapter getAdapter()
void access$000(android.widget.ExpandableListConnector,boolean,boolean)
void initTabWidget()
int getTabCount()
void setDividerDrawable(android.graphics.drawable.Drawable)
void setDividerDrawable(int)
void setLeftStripDrawable(android.graphics.drawable.Drawable)
void setLeftStripDrawable(int)
void setRightStripDrawable(android.graphics.drawable.Drawable)
void setRightStripDrawable(int)
boolean isStripEnabled()
void setRange(int,int,java.lang.String[])
void updateView()
java.lang.String formatNumber(int)
void notifyChange()
int getSelectedPos(java.lang.String)
void validateCurrentView(java.lang.CharSequence)
void validateInput(android.view.View)
int getCurrent()
int getEndRange()
int getBeginRange()
boolean access$002(android.widget.NumberPicker,boolean)
java.lang.Runnable access$700(android.widget.NumberPicker)
boolean access$402(android.widget.NumberPicker,boolean)
android.widget.FrameLayout createContainer()
void setIsZoomInEnabled(boolean)
void setIsZoomOutEnabled(boolean)
void setZoomSpeed(long)
boolean isAutoDismissed()
void setAutoDismissed(boolean)
void dismissControlsDelayed(int)
android.view.ViewGroup getContainer()
void refreshPositioningVariables()
boolean isInterestingKey(int)
boolean onContainerKey(android.view.KeyEvent)
android.view.ViewRoot getOwnerViewRoot()
void setTouchTargetView(android.view.View)
android.view.View findViewForTouch(int,int)
void onPostConfigurationChanged()
boolean access$000(android.widget.ZoomButtonsController)
android.os.Handler access$100(android.widget.ZoomButtonsController)
void registerContentObserver(android.database.ContentObserver)
boolean access$202(android.widget.MediaController,boolean)
android.os.Handler access$500(android.widget.MediaController)
void onStartTrackingTouch(android.widget.SeekBar)
android.widget.TextView access$600(android.widget.MediaController)
java.lang.String access$700(android.widget.MediaController,int)
void onProgressChanged(android.widget.SeekBar,int,boolean)
void access$800(android.widget.MediaController)
void onStopTrackingTouch(android.widget.SeekBar)
void init(android.content.Context,int,int,java.util.List)
void <init>(android.content.Context,int,int,java.util.List)
void add(java.lang.Object)
void insert(java.lang.Object,int)
void remove(java.lang.Object)
void sort(java.util.Comparator)
void setNotifyOnChange(boolean)
int getPosition(java.lang.Object)
android.widget.ArrayAdapter createFromResource(android.content.Context,int,int)
void <init>(android.widget.ArrayAdapter,android.widget.ArrayAdapter$1)
java.util.ArrayList access$100(android.widget.ArrayAdapter)
java.lang.Object access$200(android.widget.ArrayAdapter)
java.util.ArrayList access$102(android.widget.ArrayAdapter,java.util.ArrayList)
java.util.List access$300(android.widget.ArrayAdapter)
java.util.List access$302(android.widget.ArrayAdapter,java.util.List)
void <init>(android.os.Parcel,android.widget.ExpandableListView$1)
android.widget.RemoteViews createFromParcel(android.os.Parcel)
android.widget.RemoteViews[] newArray(int)
void <init>(android.widget.VideoView$4)
android.widget.CompoundButton$OnCheckedChangeListener access$700(android.widget.RadioGroup)
android.view.ViewGroup$OnHierarchyChangeListener access$202(android.widget.RadioGroup$PassThroughHierarchyChangeListener,android.view.ViewGroup$OnHierarchyChangeListener)
void <init>(android.os.Parcel,android.widget.ListView$1)
android.widget.ListView$SavedState createFromParcel(android.os.Parcel)
android.widget.ListView$SavedState[] newArray(int)
int access$502(android.widget.DatePicker,int)
void initAbsListView()
void setStackFromBottom(boolean)
void setScrollingCacheEnabled(boolean)
void setTranscriptMode(int)
void setFastScrollEnabled(boolean)
void setSmoothScrollbarEnabled(boolean)
boolean contentFits()
void <init>(android.content.Context,android.widget.AbsListView)
boolean isFastScrollEnabled()
boolean isSmoothScrollbarEnabled()
boolean isScrollingCacheEnabled()
void clearScrollingCache()
boolean isTextFilterEnabled()
void useDefaultSelector()
boolean isStackFromBottom()
void dismissPopup()
void setFilterText(java.lang.String)
boolean acceptFilter()
void createTextFilter(boolean)
void clearSavedState()
java.lang.CharSequence getTextFilter()
void markChildrenDirty()
void positionPopup()
int getListPaddingLeft()
int getListPaddingRight()
android.view.View getScrapView(int)
void positionSelector(int,int,int,int)
void drawSelector(android.graphics.Canvas)
boolean touchModeDrawsInPressedState()
void setDrawSelectorOnTop(boolean)
void setSelector(int)
android.graphics.drawable.Drawable getSelector()
void setScrollIndicators(android.view.View,android.view.View)
void finishGlows()
void showPopup()
boolean performLongPress(android.view.View,int,long)
long pointToRowId(int,int)
void createScrollingCache()
boolean startScrollIfNeeded(int)
int findClosestMotionRow(int)
void <init>(android.widget.AbsListView,android.view.View,android.widget.AbsListView$PerformClick)
void smoothScrollToPosition(int)
void invalidateViews()
void clearTextFilter()
boolean hasTextFilter()
android.widget.AbsListView$LayoutParams generateLayoutParams(android.util.AttributeSet)
int getTranscriptMode()
android.widget.AbsListView$RecyclerListener access$3300(android.widget.AbsListView$RecycleBin)
void onMovedToScrapHeap(android.view.View)
void reclaimScrapViews(java.util.List)
void reclaimViews(java.util.List)
android.view.View[] access$3400(android.widget.AbsListView$RecycleBin)
java.util.ArrayList access$3500(android.widget.AbsListView$RecycleBin)
boolean checkScrap(java.util.ArrayList)
java.util.ArrayList[] access$3600(android.widget.AbsListView$RecycleBin)
android.widget.AbsListView$RecyclerListener access$3302(android.widget.AbsListView$RecycleBin,android.widget.AbsListView$RecyclerListener)
void setRecyclerListener(android.widget.AbsListView$RecyclerListener)
int access$300(android.widget.AbsListView)
int access$400(android.widget.AbsListView)
void access$3700(android.widget.AbsListView,android.view.View,boolean)
void access$3800(android.widget.AbsListView,android.view.View,boolean)
void access$3900(android.widget.AbsListView,android.view.View,boolean)
void access$4000(android.widget.AbsListView,android.view.View,boolean)
void access$4100(android.widget.AbsListView,android.view.View,boolean)
void access$400(android.widget.MediaController)
void hideDelayed(int)
java.lang.String[] getShortMonths()
void reorderPickers(java.lang.String[])
java.text.DateFormat getDateFormat(android.content.Context)
java.text.DateFormat getMediumDateFormat(android.content.Context)
java.lang.String toPattern()
char[] getDateFormatOrder(android.content.Context)
void updateSpinners()
void notifyDateChanged()
java.lang.String getMonthString(int,int)
void updateDaySpinner()
void set(int,int,int)
int getActualMaximum(int)
void adjustMaxDay()
int access$002(android.widget.DatePicker,int)
void setCheckedStateForView(int,boolean)
void setCheckedId(int)
void check(int)
void onCheckedChanged(android.widget.RadioGroup,int)
int getCheckedRadioButtonId()
void clearCheck()
void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)
android.widget.RadioGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)
void onReceiveResult(int,android.os.Bundle)
void init(android.content.Context,android.database.Cursor,boolean)
void <init>(android.widget.ArrayAdapter)
android.widget.AbsSpinner$SavedState createFromParcel(android.os.Parcel)
android.widget.AbsSpinner$SavedState[] newArray(int)
void initTableLayout()
android.util.SparseBooleanArray parseColumns(java.lang.String)
void requestRowsLayout()
boolean isShrinkAllColumns()
void setShrinkAllColumns(boolean)
boolean isStretchAllColumns()
void setStretchAllColumns(boolean)
boolean isColumnCollapsed(int)
void setColumnStretchable(int,boolean)
boolean isColumnStretchable(int)
void setColumnShrinkable(int,boolean)
boolean isColumnShrinkable(int)
void trackCollapsedColumns(android.view.View)
void findLargestCells(int)
void shrinkAndStretchColumns(int)
void mutateColumnsWidth(android.util.SparseBooleanArray,boolean,int,int)
android.widget.TableLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)
android.widget.TextView$BufferType[] values()
android.widget.TextView$BufferType valueOf(java.lang.String)
int compare(android.content.pm.PermissionInfo,android.content.pm.PermissionInfo)
void setHorizontalSpacing(int)
void setVerticalSpacing(int)
void setStretchMode(int)
void setColumnWidth(int)
void setNumColumns(int)
void correctTooHigh(int,int,int)
void correctTooLow(int,int,int)
android.view.View makeRow(int,int,boolean)
android.view.View makeAndAddView(int,int,boolean,int,boolean,int)
android.view.View fillFromBottom(int,int)
void pinToBottom(int)
int getBottomSelectionPixel(int,int,int,int)
void pinToTop(int)
android.view.View fillSelection(int,int)
void adjustForTopFadingEdge(android.view.View,int,int)
void adjustForBottomFadingEdge(android.view.View,int,int)
android.view.View moveSelection(int,int,int)
void determineColumns(int)
void setupChild(android.view.View,int,int,boolean,int,boolean,boolean,int)
boolean isCandidateSelection(int,int)
int getStretchMode()
void onContactUriChanged()
android.content.Intent getQuickContactIntent(android.content.Context,android.view.View,android.net.Uri,int,java.lang.String[])
void trigger(android.net.Uri)
void <init>(android.widget.ZoomButton)
android.view.View$OnClickListener access$000(android.widget.ZoomButton)
boolean access$100(android.widget.ZoomButton)
android.view.View$OnClickListener access$200(android.widget.ZoomButton)
long access$300(android.widget.ZoomButton)
android.os.Handler access$400(android.widget.ZoomButton)
android.util.SparseBooleanArray readSparseBooleanArray()
void setValues(long[],java.lang.Object)
void writeSparseBooleanArray(android.util.SparseBooleanArray)
long[] getKeys()
void initControllerView(android.view.View)
void initFloatingWindow()
void <init>(android.content.Context,boolean)
void updatePausePlay()
android.view.View makeControllerView()
void setOnSeekBarChangeListener(android.widget.SeekBar$OnSeekBarChangeListener)
void installPrevNextListeners()
void disableUnsupportedButtons()
int setProgress()
java.lang.String stringForTime(int)
void doPauseResume()
void setPrevNextListeners(android.view.View$OnClickListener,android.view.View$OnClickListener)
android.widget.ExpandableListView$SavedState createFromParcel(android.os.Parcel)
android.widget.ExpandableListView$SavedState[] newArray(int)
void findColumns(java.lang.String[])
android.widget.SimpleCursorAdapter$ViewBinder getViewBinder()
void setViewBinder(android.widget.SimpleCursorAdapter$ViewBinder)
int getStringConversionColumn()
void setStringConversionColumn(int)
android.widget.SimpleCursorAdapter$CursorToStringConverter getCursorToStringConverter()
void setCursorToStringConverter(android.widget.SimpleCursorAdapter$CursorToStringConverter)
void changeCursorAndColumns(android.database.Cursor,java.lang.String[],int[])
boolean isPositionVisible()
void moveTo(int,int)
void <init>(android.widget.Filter$1)
void pruneScrapViews()
void setCurrentText(java.lang.CharSequence)
void setTokenizer(android.widget.MultiAutoCompleteTextView$Tokenizer)
void performFiltering(java.lang.CharSequence,int,int,int)
void markAsReplaced(android.text.Spannable,int,int,java.lang.String)
android.widget.ProgressBar$SavedState createFromParcel(android.os.Parcel)
android.widget.ProgressBar$SavedState[] newArray(int)
void <init>(android.widget.TabHost,android.view.View)
void resetThumbPos()
void useThumbDrawable(android.content.Context,android.graphics.drawable.Drawable)
void getSectionsFromIndexer()
void setTextAlign(android.graphics.Paint$Align)
float descent()
android.widget.SectionIndexer getSectionIndexer()
void scrollTo(float)
void cancelFling()
boolean isPointInside(float,float)
android.view.View createTabContent(java.lang.String)
void doScrollX(int)
boolean isWithinDeltaOfScreen(android.view.View,int)
android.view.View makeView()
android.view.View obtainView()
void setFactory(android.widget.ViewSwitcher$ViewFactory)
void setForeground(android.graphics.drawable.Drawable)
void setForegroundGravity(int)
android.widget.FrameLayout$LayoutParams generateDefaultLayoutParams()
android.graphics.drawable.Drawable getForeground()
boolean getConsiderGoneChildrenWhenMeasuring()
void <init>(android.sax.RootElement)
void setDocumentLocator(org.xml.sax.Locator)
void startRoot(java.lang.String,java.lang.String,org.xml.sax.Attributes)
void <init>(java.lang.String,org.xml.sax.Locator)
android.sax.Element get(java.lang.String,java.lang.String)
void start(android.sax.Element,org.xml.sax.Attributes)
void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)
java.lang.String toString(java.lang.String,java.lang.String)
void start(org.xml.sax.Attributes)
void resetRequiredChildren()
java.lang.StringBuilder append(char[],int,int)
void characters(char[],int,int)
void checkRequiredChildren(org.xml.sax.Locator)
void end()
void end(java.lang.String)
void endElement(java.lang.String,java.lang.String,java.lang.String)
void <init>(android.sax.Element,java.lang.String,java.lang.String,int)
org.xml.sax.ContentHandler getContentHandler()
void <init>(android.sax.Element,java.lang.String,java.lang.String,int,int)
android.sax.Element getChild(java.lang.String,java.lang.String)
android.sax.Element getChild(java.lang.String)
android.sax.Element getOrCreate(android.sax.Element,java.lang.String,java.lang.String)
android.sax.Element requireChild(java.lang.String,java.lang.String)
android.sax.Element requireChild(java.lang.String)
void setStartElementListener(android.sax.StartElementListener)
void setEndElementListener(android.sax.EndElementListener)
void setElementListener(android.sax.ElementListener)
void setEndTextElementListener(android.sax.EndTextElementListener)
void setTextElementListener(android.sax.TextElementListener)
void <init>(android.content.Context,com.android.internal.view.IInputMethodCallback)
void <init>(android.content.Context,android.view.inputmethod.InputMethodSession)
void sessionCreated(android.view.inputmethod.InputMethodSession)
void <init>(android.inputmethodservice.KeyboardView)
boolean access$500(android.inputmethodservice.KeyboardView)
android.inputmethodservice.KeyboardView$SwipeTracker access$600(android.inputmethodservice.KeyboardView)
int access$700(android.inputmethodservice.KeyboardView)
boolean access$800(android.inputmethodservice.KeyboardView)
int access$900(android.inputmethodservice.KeyboardView)
int access$1000(android.inputmethodservice.KeyboardView)
int access$1100(android.inputmethodservice.KeyboardView)
void access$1200(android.inputmethodservice.KeyboardView,int,int,int,long)
void setToken(android.os.IBinder)
void initDockWindow()
void <init>(android.content.Context,int,android.view.KeyEvent$DispatcherState)
android.view.inputmethod.InputMethodSession getInternalInputMethodSession()
void <init>(com.android.internal.view.IInputMethodCallback)
void dispatchKeyEvent(int,android.view.KeyEvent,android.view.inputmethod.InputMethodSession$EventCallback)
void dispatchTrackballEvent(int,android.view.MotionEvent,android.view.inputmethod.InputMethodSession$EventCallback)
void access$100(android.inputmethodservice.KeyboardView,int)
android.widget.TextView access$200(android.inputmethodservice.KeyboardView)
boolean access$300(android.inputmethodservice.KeyboardView)
boolean access$400(android.inputmethodservice.KeyboardView,android.view.MotionEvent)
void <init>(android.inputmethodservice.AbstractInputMethodService)
void <init>(android.inputmethodservice.InputMethodService)
android.view.inputmethod.InputConnection getCurrentInputConnection()
void onBindInput()
void onUnbindInput()
void doStartInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo,boolean)
void startInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)
void restartInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)
boolean isInputViewShown()
void hideWindow()
boolean onShowInputRequested(int,boolean)
void showWindow(boolean)
void setIME(android.inputmethodservice.InputMethodService)
void startInternalChanges()
void finishInternalChanges()
void onExtractedSelectionChanged(int,int)
void onExtractedTextClicked()
boolean onExtractTextContextMenuItem(int)
boolean hasVerticalScrollBar()
boolean isRevoked()
void revokeSelf()
android.inputmethodservice.Keyboard access$600(android.inputmethodservice.Keyboard$Row)
void <init>(android.inputmethodservice.Keyboard$Row)
int access$000(android.inputmethodservice.Keyboard)
int getDimensionOrFraction(android.content.res.TypedArray,int,int,int)
int access$200(android.inputmethodservice.Keyboard)
boolean getValue(int,android.util.TypedValue)
int[] parseCSV(java.lang.String)
void onPressed()
int squaredDistanceFrom(int,int)
int[] getCurrentDrawableState()
boolean isExtractViewShown()
android.app.Dialog getWindow()
void onComputeInsets(android.inputmethodservice.InputMethodService$Insets)
void <init>(android.inputmethodservice.Keyboard)
int access$100(android.inputmethodservice.Keyboard)
int access$300(android.inputmethodservice.Keyboard)
int access$400(android.inputmethodservice.Keyboard)
int access$500(android.inputmethodservice.Keyboard)
void <init>(android.content.res.Resources,android.inputmethodservice.Keyboard,android.content.res.XmlResourceParser)
android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()
void addPoint(float,float,long)
void <init>(android.inputmethodservice.KeyboardView$1)
void loadKeyboard(android.content.Context,android.content.res.XmlResourceParser)
java.util.List getModifierKeys()
int getHorizontalGap()
void setHorizontalGap(int)
int getVerticalGap()
void setVerticalGap(int)
int getKeyHeight()
void setKeyHeight(int)
int getKeyWidth()
void setKeyWidth(int)
int getMinWidth()
void computeNearestNeighbors()
int[] getNearestKeys(int,int)
android.inputmethodservice.Keyboard$Row createRowFromXml(android.content.res.Resources,android.content.res.XmlResourceParser)
void skipToEndOfRow(android.content.res.XmlResourceParser)
void parseKeyboardAttributes(android.content.res.Resources,android.content.res.XmlResourceParser)
float getFraction(int,int,int,float)
void initViews()
void onInitializeInterface()
int getCandidatesHiddenVisibility()
void onDisplayCompletions(android.view.inputmethod.CompletionInfo[])
android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl onCreateInputMethodInterface()
android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface()
int getMaxWidth()
android.view.inputmethod.InputBinding getCurrentInputBinding()
boolean getCurrentInputStarted()
boolean onEvaluateFullscreenMode()
android.view.View onCreateExtractTextView()
void setExtractView(android.view.View)
void startExtractingText(boolean)
void updateExtractFrameVisibility()
void onConfigureWindow(android.view.Window,boolean,boolean)
void updateFullscreenMode()
void setExtractViewShown(boolean)
void updateCandidatesVisibility(boolean)
boolean onEvaluateInputViewShown()
android.view.View onCreateInputView()
void setInputView(android.view.View)
void updateInputViewShown()
boolean isShowInputRequested()
void setCandidatesViewShown(boolean)
void showStatusIcon(int)
void hideStatusIcon()
void switchInputMethod(java.lang.String)
void setCandidatesView(android.view.View)
android.view.View onCreateCandidatesView()
void onStartInputView(android.view.inputmethod.EditorInfo,boolean)
void onFinishInputView(boolean)
void onStartCandidatesView(android.view.inputmethod.EditorInfo,boolean)
void onFinishCandidatesView(boolean)
void showWindowInner(boolean)
void onWindowShown()
void onWindowHidden()
void onStartInput(android.view.inputmethod.EditorInfo,boolean)
void onFinishInput()
void doFinishInput()
void onUpdateExtractedText(int,android.view.inputmethod.ExtractedText)
void onUpdateSelection(int,int,int,int,int,int)
void onUpdateCursor(android.graphics.Rect)
void requestHideSelf(int)
void requestShowSelf(int)
boolean handleBack(boolean)
boolean doMovementKey(int,android.view.KeyEvent,int)
void onAppPrivateCommand(java.lang.String,android.os.Bundle)
void onToggleSoftInput(int,int)
void onExtractedCursorMovement(int,int)
void reportExtractedMovement(int,int)
boolean sendDefaultEditorAction(boolean)
void sendKeyChar(char)
java.lang.CharSequence getTextForImeAction(int)
void onUpdateExtractingVisibility(android.view.inputmethod.EditorInfo)
void onUpdateExtractingViews(android.view.inputmethod.EditorInfo)
void onExtractingInputChanged(android.view.inputmethod.EditorInfo)
void access$000(android.inputmethodservice.InputMethodService,int,int)
void resetMultiTap()
void initGestureDetector()
android.inputmethodservice.KeyboardView$OnKeyboardActionListener getOnKeyboardActionListener()
void showPreview(int)
void invalidateAllKeys()
void computeProximityThreshold(android.inputmethodservice.Keyboard)
boolean isPreviewEnabled()
void setVerticalCorrection(int)
void setPopupParent(android.view.View)
void setPopupOffset(int,int)
void setProximityCorrectionEnabled(boolean)
boolean isProximityCorrectionEnabled()
void dismissPopupKeyboard()
boolean isLowerCase(char)
java.lang.CharSequence adjustCase(java.lang.CharSequence)
void onBufferDraw()
boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)
boolean getClipBounds(android.graphics.Rect)
void fill(int[],int)
int getKeyIndices(int,int,int[])
void detectAndSendKey(int,int,int,long)
java.lang.CharSequence getPreviewText(android.inputmethodservice.Keyboard$Key)
void invalidateKey(int)
void showKey(int)
boolean openPopupIfRequired(android.view.MotionEvent)
boolean onLongPress(android.inputmethodservice.Keyboard$Key)
boolean onModifiedTouchEvent(android.view.MotionEvent,boolean)
void checkMultiTap(long,int)
boolean repeatKey()
void closing()
boolean handleBack()
android.inputmethodservice.KeyboardView$OnKeyboardActionListener access$1300(android.inputmethodservice.KeyboardView)
void access$1400(android.inputmethodservice.KeyboardView)
void <init>(android.inputmethodservice.AbstractInputMethodService,android.view.inputmethod.InputMethod)
android.view.inputmethod.InputMethod getInternalInputMethod()
void createSession(android.view.inputmethod.InputMethod$SessionCallback)
void setSessionEnabled(android.view.inputmethod.InputMethodSession,boolean)
void revokeSession(android.view.inputmethod.InputMethodSession)
java.lang.Object get(int,java.lang.Object)
int binarySearch(int[],int,int,int)
void setValueAt(int,java.lang.Object)
int indexOfValue(java.lang.Object)
void checkIntegrity()
int maxOutputSize(int)
boolean process(byte[],int,int,boolean)
void reset(java.lang.String,java.lang.String)
void addSplit(java.lang.String)
void dumpToLog()
int constrain(int,int,int)
float constrain(float,float,float)
double log(double)
float log(float)
float exp(float)
float pow(float,float)
float max(int,int)
float max(float,float,float)
float max(int,int,int)
float min(int,int)
float min(float,float,float)
float min(int,int,int)
float dist(float,float,float,float)
float dist(float,float,float,float,float,float)
float mag(float,float)
float mag(float,float,float)
float sq(float)
float radians(float)
float degrees(float)
double acos(double)
float acos(float)
float asin(float)
float atan(float)
float atan2(float,float)
float tan(float)
float lerp(float,float,float)
float norm(float,float,float)
float map(float,float,float,float,float)
int random(int)
int random(int,int)
float random(float)
float random(float,float)
void setSeed(long)
void randomSeed(long)
void setSharedPreference(android.content.SharedPreferences,java.lang.String,java.lang.String)
void setSharedPreference(android.content.SharedPreferences,java.lang.String,boolean)
android.content.SharedPreferences getSharedPreferences(android.content.Context,java.lang.String)
void <init>(java.lang.StringBuilder)
void readTagsFile()
java.lang.String getTagName(int)
int getTagCode(java.lang.String)
java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])
boolean isObjectSelected(java.lang.Object)
int indexOfValue(boolean)
void append(int,boolean)
void <init>(android.util.CalendarUtils$TimeZoneUtils,android.content.ContentResolver)
java.util.HashSet access$000()
boolean access$100()
boolean access$102(boolean)
java.lang.String access$202(java.lang.String)
java.lang.String access$300(android.util.CalendarUtils$TimeZoneUtils)
boolean access$402(boolean)
void setTo(android.util.DisplayMetrics)
void setToDefaults()
boolean isConfiguredExpandable()
boolean isConfiguredLargeScreens()
boolean isConfiguredXLargeScreens()
void setExpandable(boolean)
void setLargeScreens(boolean)
void setXLargeScreens(boolean)
boolean isScalingRequired()
void updateMetrics(android.content.res.CompatibilityInfo,int,int)
int getDeviceDensity()
java.nio.ByteBuffer wrap(byte[])
java.nio.ByteOrder nativeOrder()
int getProcessId()
int getThreadId()
long getTimeNanos()
java.nio.Buffer limit(int)
java.nio.Buffer position(int)
java.lang.Object decodeObject()
java.lang.Object getData()
long getLong()
void <init>(android.util.Pool)
void <init>(android.util.Pool,java.lang.Object)
void recalculate()
int getWeekStartDay()
int getFirstDayOfMonth()
int getNumberOfDaysInMonth()
int getDayAt(int,int)
int[] getDigitsForRow(int)
int getRowOf(int)
int getColumnOf(int)
void previousMonth()
void nextMonth()
boolean isWithinCurrentMonth(int,int)
java.lang.Object get(long,java.lang.Object)
java.lang.Object get(long)
int binarySearch(long[],int,int,long)
void remove(long)
int indexOfKey(long)
void append(long,java.lang.Object)
void <init>(java.io.InputStream,int,boolean)
void <init>(java.io.InputStream,int)
boolean markSupported()
void refill()
long skip(long)
org.xmlpull.v1.XmlPullParserFactory newInstance(java.lang.String,java.lang.Class)
android.util.Xml$Encoding[] values()
android.util.Xml$Encoding valueOf(java.lang.String)
byte[] decode(byte[],int)
byte[] decode(java.lang.String,int)
byte[] decode(byte[],int,int,int)
byte[] encode(byte[],int)
java.lang.String encodeToString(byte[],int)
byte[] encode(byte[],int,int,int)
java.lang.String encodeToString(byte[],int,int,int)
void <init>(android.util.PoolableManager)
android.util.Pool simplePool(android.util.PoolableManager)
void <init>(android.util.PoolableManager,int)
android.util.Pool synchronizedPool(android.util.Pool,java.lang.Object)
int getSelectedRow()
int getSelectedColumn()
void setSelectedRowColumn(int,int)
int getSelectedDayOfMonth()
int getSelectedMonthOffset()
void setSelectedDayOfMonth(int)
boolean isSelected(int,int)
boolean up()
boolean down()
boolean left()
boolean right()
void <init>(java.io.PrintStream)
int valueAt(int)
int indexOfValue(int)
void append(int,int)
boolean isWildCard(int[])
boolean stateSetMatches(int[],int[])
boolean stateSetMatches(int[],int)
int[] trimStateSet(int[],int)
java.lang.String dump(int[])
int println_native(int,int,java.lang.String,java.lang.String)
java.lang.String getTimeZoneDatabaseVersion()
int accumField(int,int,boolean,int)
int printField(char[],int,char,int,boolean,int)
int formatDurationLocked(long,int)
void formatDuration(long,java.lang.StringBuilder)
void formatDuration(long,java.io.PrintWriter,int)
void formatDuration(long,java.io.PrintWriter)
void formatDuration(long,long,java.io.PrintWriter)
void <init>(org.xmlpull.v1.XmlPullParser)
int getAttributeCount()
java.lang.String getAttributeName(int)
java.lang.String getAttributeValue(int)
int getAttributeNameResource(int)
int getAttributeListValue(java.lang.String,java.lang.String,java.lang.String[],int)
boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)
int getAttributeIntValue(java.lang.String,java.lang.String,int)
int getAttributeUnsignedIntValue(java.lang.String,java.lang.String,int)
float getAttributeFloatValue(java.lang.String,java.lang.String,float)
int getAttributeListValue(int,java.lang.String[],int)
boolean getAttributeBooleanValue(int,boolean)
int getAttributeResourceValue(int,int)
int getAttributeIntValue(int,int)
int getAttributeUnsignedIntValue(int,int)
float getAttributeFloatValue(int,float)
java.lang.String getIdAttribute()
java.lang.String getClassAttribute()
int getIdAttributeResourceValue(int)
int getStyleAttribute()
void <init>(java.io.OutputStream,int,boolean)
void internalWrite(byte[],int,int,boolean)
void flushBuffer()
byte[] embiggen(byte[],int)
float intBitsToFloat(int)
float complexToDimension(int,android.util.DisplayMetrics)
int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)
float complexToDimensionNoisy(int,android.util.DisplayMetrics)
float getDimension(android.util.DisplayMetrics)
float complexToFraction(int,float,float)
float getFraction(float,float)
java.lang.String coerceToString(int,int)
java.lang.CharSequence coerceToString()
java.lang.String toString(float)
void setTo(android.util.TypedValue)
void <init>(java.io.BufferedReader)
android.util.EventLogTags$Description get(java.lang.String)
android.util.EventLogTags$Description get(int)
boolean isShiftJis(java.lang.String)
java.lang.String nameForVendor(java.lang.String,java.lang.String)
java.lang.String getDefaultVendor()
java.lang.String nameForDefaultVendor(java.lang.String)
java.nio.charset.Charset charsetForVendor(java.lang.String,java.lang.String)
java.nio.charset.Charset charsetForVendor(java.lang.String)
int groupCount()
java.lang.String concatGroups(java.util.regex.Matcher)
java.lang.String group()
java.lang.String digitsAndPlusOnly(java.util.regex.Matcher)
java.lang.String getTimeZone(android.content.Context,java.lang.Runnable)
java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int,java.lang.String)
java.lang.String formatDateRange(android.content.Context,long,long,int)
void cancelOperation(int)
void startUpdate(int,java.lang.Object,android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])
void setTimeZone(android.content.Context,java.lang.String)
java.lang.String getCurrentTimezone()
void forceDBRequery(android.content.Context,java.lang.Runnable)
void setContentHandler(org.xml.sax.ContentHandler)
void parse(org.xml.sax.InputSource)
void parse(java.lang.String,org.xml.sax.ContentHandler)
void parse(java.io.Reader,org.xml.sax.ContentHandler)
void parse(java.io.InputStream,android.util.Xml$Encoding,org.xml.sax.ContentHandler)
void setNamespaceProcessingEnabled(boolean)
android.util.Xml$Encoding findEncodingByName(java.lang.String)
java.lang.String[] listServices()
void setPermissionController(android.os.IPermissionController)
void <init>(android.os.ResultReceiver,int,android.os.Bundle)
java.io.FileDescriptor native_open(java.lang.String,int)
int native_mmap(java.io.FileDescriptor,int,int)
boolean isMemoryFile(java.io.FileDescriptor)
int modeToProt(java.lang.String)
void <init>(java.io.FileDescriptor,int,java.lang.String)
void native_close(java.io.FileDescriptor)
boolean isDeactivated()
void native_munmap(int,int)
boolean valid()
boolean isPurgingAllowed()
void native_pin(java.io.FileDescriptor,boolean)
boolean allowPurging(boolean)
void <init>(android.os.MemoryFile,android.os.MemoryFile$1)
int native_read(java.io.FileDescriptor,int,byte[],int,int,int,boolean)
int readBytes(byte[],int,int,int)
void native_write(java.io.FileDescriptor,int,byte[],int,int,int,boolean)
void writeBytes(byte[],int,int,int)
android.os.ParcelFileDescriptor getParcelFileDescriptor()
int native_get_size(java.io.FileDescriptor)
int getSize(java.io.FileDescriptor)
int access$200(android.os.MemoryFile)
void registerObserver(android.net.INetworkManagementEventObserver)
void unregisterObserver(android.net.INetworkManagementEventObserver)
java.lang.String[] listInterfaces()
android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)
void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)
boolean getIpForwardingEnabled()
void setIpForwardingEnabled(boolean)
void startTethering(java.lang.String[])
void stopTethering()
boolean isTetheringStarted()
void tetherInterface(java.lang.String)
void untetherInterface(java.lang.String)
java.lang.String[] listTetheredInterfaces()
void setDnsForwarders(java.lang.String[])
java.lang.String[] getDnsForwarders()
void enableNat(java.lang.String,java.lang.String)
void disableNat(java.lang.String,java.lang.String)
java.lang.String[] listTtys()
void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
void detachPppd(java.lang.String)
void startUsbRNDIS()
void stopUsbRNDIS()
boolean isUsbRNDISStarted()
void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)
void stopAccessPoint()
void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)
long getInterfaceTxCounter(java.lang.String)
long getInterfaceRxCounter(java.lang.String)
void setInterfaceThrottle(java.lang.String,int,int)
int getInterfaceRxThrottle(java.lang.String)
int getInterfaceTxThrottle(java.lang.String)
boolean isEncryptedFilesystemEnabled()
java.io.File getSystemSecureDirectory()
java.io.File getSecureDataDirectory()
java.io.File getExternalStorageAppDataDirectory(java.lang.String)
java.io.File getExternalStorageAppMediaDirectory(java.lang.String)
java.lang.String getVolumeState(java.lang.String)
boolean isExternalStorageRemovable()
java.io.File getDirectory(java.lang.String,java.lang.String)
void <init>(java.lang.String,long,java.lang.String)
void <init>(java.lang.String,long,byte[],int)
void <init>(java.lang.String,long,android.os.ParcelFileDescriptor,int)
android.os.ParcelFileDescriptor open(java.io.File,int)
void <init>(java.lang.String,long,java.io.File,int)
long getTimeMillis()
java.lang.String getText(int)
void addText(java.lang.String,java.lang.String)
void addData(java.lang.String,byte[],int)
void addFile(java.lang.String,java.io.File,int)
void <init>(android.os.IRemoteCallback)
void onResult(android.os.Bundle)
void stopWatching()
int startWatching(java.lang.String,int,android.os.FileObserver)
void stopWatching(int)
android.os.StrictMode$VmPolicy$Builder enable(int)
android.os.StrictMode$VmPolicy$Builder detectAll()
android.os.StrictMode$VmPolicy$Builder detectLeakedSqlLiteObjects()
android.os.StrictMode$VmPolicy$Builder penaltyDeath()
android.os.StrictMode$VmPolicy$Builder penaltyLog()
android.os.StrictMode$VmPolicy$Builder penaltyDropBox()
void <init>(int,android.os.StrictMode$1)
android.os.StrictMode$VmPolicy build()
boolean register(android.os.IInterface,java.lang.Object)
boolean register(android.os.IInterface)
void <init>(android.os.RemoteCallbackList,android.os.IInterface,java.lang.Object)
boolean unregister(android.os.IInterface)
void onCallbackDied(android.os.IInterface)
void onCallbackDied(android.os.IInterface,java.lang.Object)
int beginBroadcast()
android.os.IInterface getBroadcastItem(int)
java.lang.Object getBroadcastCookie(int)
void finishBroadcast()
android.os.IRemoteCallback asInterface(android.os.IBinder)
void sendResult(android.os.Bundle)
void nativeInit()
void flushPendingCommands()
void nativePollOnce(int,int)
android.os.Message next()
boolean enqueueMessage(android.os.Message,long)
void nativeWake(int)
boolean removeMessages(android.os.Handler,int,java.lang.Object,boolean)
void removeMessages(android.os.Handler,java.lang.Runnable,java.lang.Object)
void removeCallbacksAndMessages(android.os.Handler,java.lang.Object)
void <init>(java.util.concurrent.Callable)
void <init>(android.os.AsyncTask,java.util.concurrent.Callable)
android.os.AsyncTask$InternalHandler access$200()
void <init>(android.os.AsyncTask,java.lang.Object[])
void done()
android.os.AsyncTask$Status[] values()
android.os.DropBoxManager$Entry[] newArray(int)
android.os.DropBoxManager$Entry createFromParcel(android.os.Parcel)
android.os.IPermissionController asInterface(android.os.IBinder)
boolean checkPermission(java.lang.String,int,int)
void acquireWakeLock(int,android.os.IBinder,java.lang.String,android.os.WorkSource)
void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)
void goToSleep(long)
void goToSleepWithReason(long,int)
void releaseWakeLock(android.os.IBinder,int)
void userActivity(long,boolean)
void userActivityWithForce(long,boolean,boolean)
void clearUserActivityTimeout(long,long)
void setPokeLock(int,android.os.IBinder,java.lang.String)
int getSupportedWakeLockFlags()
void setStayOnSetting(int)
void setMaximumScreenOffTimeount(int)
void preventScreenOn(boolean)
void crash(java.lang.String)
void setBacklightBrightness(int)
void setAttentionLight(boolean,int)
void setPerformanceResultsWriter(android.os.PerformanceCollector$PerformanceResultsWriter)
void <init>(android.os.PerformanceCollector$PerformanceResultsWriter)
void writeBeginSnapshot(java.lang.String)
void writeEndSnapshot(android.os.Bundle)
void writeStartTiming(java.lang.String)
void putParcelableArrayList(java.lang.String,java.util.ArrayList)
long getElapsedCpuTime()
void startTiming(java.lang.String)
java.util.ArrayList getParcelableArrayList(java.lang.String)
android.os.Bundle addIteration(java.lang.String)
void writeStopTiming(android.os.Bundle)
android.os.Bundle stopTiming(java.lang.String)
void writeMeasurement(java.lang.String,long)
void addMeasurement(java.lang.String,long)
void writeMeasurement(java.lang.String,float)
void addMeasurement(java.lang.String,float)
void writeMeasurement(java.lang.String,java.lang.String)
void addMeasurement(java.lang.String,java.lang.String)
void <init>(android.os.TokenWatcher)
java.util.WeakHashMap access$000(android.os.TokenWatcher)
int access$100(android.os.TokenWatcher)
int access$102(android.os.TokenWatcher,int)
void acquired()
void released()
android.os.INetworkManagementService asInterface(android.os.IBinder)
android.net.INetworkManagementEventObserver asInterface(android.os.IBinder)
android.os.Message obtain(android.os.Handler,java.lang.Runnable)
void clearForRecycle()
long getWhen()
android.os.Bundle peekData()
void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)
android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel)
void access$000(android.os.Message,android.os.Parcel)
void <init>(android.os.AsyncTask$1)
void <init>(android.os.RemoteCallback)
void <init>(android.os.RemoteCallback,android.os.Bundle)
android.os.RemoteCallback createFromParcel(android.os.Parcel)
android.os.RemoteCallback[] newArray(int)
void internalNotifyRegistrant(java.lang.Object,java.lang.Throwable)
void notifyException(java.lang.Throwable)
void access$000()
int access$100(byte[])
void onUEvent(android.os.UEventObserver$UEvent)
void addObserver(java.lang.String,android.os.UEventObserver)
void removeObserver(android.os.UEventObserver)
void <init>(java.lang.Throwable,int)
void <init>(android.os.Parcel,boolean)
int getPolicyMask()
boolean access$200()
void startHandlingViolationException(dalvik.system.BlockGuard$BlockGuardPolicyException)
void onWriteToDisk()
void onReadFromDisk()
void onNetwork()
void setPolicyMask(int)
int getPolicy()
void handleViolationWithTimingAttempt(android.os.StrictMode$ViolationInfo)
void handleViolation(android.os.StrictMode$ViolationInfo)
java.lang.ThreadLocal access$300()
void <init>(android.os.StrictMode$AndroidBlockGuardPolicy,java.util.ArrayList)
java.lang.ThreadLocal access$400()
int access$500(java.lang.String)
int getThreadPolicyMask()
void access$600(int)
void <init>(android.os.Handler,java.lang.String)
void <init>(android.os.TokenWatcher,android.os.IBinder,java.lang.String)
void sendNotificationLocked(boolean)
void acquire(android.os.IBinder,java.lang.String)
void cleanup(android.os.IBinder,boolean)
void release(android.os.IBinder)
boolean isAcquired()
java.lang.String access$200(android.os.TokenWatcher)
android.os.ParcelFileDescriptor createFromParcel(android.os.Parcel)
android.os.ParcelFileDescriptor[] newArray(int)
boolean matchPattern(java.lang.String,java.lang.String,int)
android.os.IMessenger getIMessenger()
void send(android.os.Message)
android.os.IBinder getBinder()
android.os.IMessenger asInterface(android.os.IBinder)
void <init>(android.os.MemoryFile)
android.os.Messenger createFromParcel(android.os.Parcel)
android.os.Messenger[] newArray(int)
android.os.IHardwareService asInterface(android.os.IBinder)
boolean getFlashlightEnabled()
void setFlashlightEnabled(boolean)
int init()
void observe(int)
int startWatching(int,java.lang.String,int)
void stopWatching(int,int)
void onEvent(int,int,java.lang.String)
java.io.FileDescriptor getFD()
boolean copyFile(java.io.File,java.io.File)
java.lang.String readTextFile(java.io.File,int,java.lang.String)
long getTotalTxPackets()
long getTotalRxPackets()
void <init>(android.os.Broadcaster,android.os.Broadcaster$1)
void request(int,android.os.Handler,int)
void cancelRequest(int,android.os.Handler,int)
void dumpRegistrations()
void broadcast(android.os.Message)
void <init>(android.os.StrictMode$1)
java.lang.String native_get(java.lang.String)
java.lang.String native_get(java.lang.String,java.lang.String)
int native_get_int(java.lang.String,int)
long native_get_long(java.lang.String,long)
boolean native_get_boolean(java.lang.String,boolean)
void native_set(java.lang.String,java.lang.String)
void <init>(long,long)
android.os.ParcelUuid createFromParcel(android.os.Parcel)
android.os.ParcelUuid[] newArray(int)
android.os.Bundle createFromParcel(android.os.Parcel)
android.os.Bundle[] newArray(int)
void <init>(android.os.ResultReceiver)
int getTotalPss()
int getTotalPrivateDirty()
int getTotalSharedDirty()
void <init>(android.os.Parcel,android.os.Debug$1)
android.os.Debug$MemoryInfo createFromParcel(android.os.Parcel)
android.os.Debug$MemoryInfo[] newArray(int)
void <init>(android.os.Broadcaster)
void <init>(android.os.WorkSource)
boolean diff(android.os.WorkSource)
void set(android.os.WorkSource)
boolean updateLocked(android.os.WorkSource,boolean,boolean)
android.os.WorkSource[] setReturningDiffs(android.os.WorkSource)
boolean add(android.os.WorkSource)
android.os.WorkSource addReturningNewbs(android.os.WorkSource)
boolean add(int)
android.os.WorkSource addReturningNewbs(int)
boolean remove(android.os.WorkSource)
void addLocked(int)
void <init>(android.os.PowerManager,int,java.lang.String)
android.os.Message createFromParcel(android.os.Parcel)
android.os.Message[] newArray(int)
void readFromParcelInner(android.os.Parcel,int)
void <init>(android.os.Parcel,int)
void <init>(java.lang.ClassLoader)
int dataSize()
void appendFrom(android.os.Parcel,int,int)
android.os.Bundle forPair(java.lang.String,java.lang.String)
void unparcel()
void typeWarning(java.lang.String,java.lang.Object,java.lang.String,java.lang.ClassCastException)
java.lang.String getPairValue()
void readMapInternal(java.util.Map,int,java.lang.ClassLoader)
void putAll(java.util.Map)
boolean hasFileDescriptors()
void putByte(java.lang.String,byte)
void putChar(java.lang.String,char)
void putShort(java.lang.String,short)
void putDouble(java.lang.String,double)
void putParcelableArray(java.lang.String,android.os.Parcelable[])
void putStringArrayList(java.lang.String,java.util.ArrayList)
void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)
void putBooleanArray(java.lang.String,boolean[])
void putShortArray(java.lang.String,short[])
void putCharArray(java.lang.String,char[])
void putLongArray(java.lang.String,long[])
void putFloatArray(java.lang.String,float[])
void putDoubleArray(java.lang.String,double[])
void putStringArray(java.lang.String,java.lang.String[])
void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])
void putIBinder(java.lang.String,android.os.IBinder)
void typeWarning(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.ClassCastException)
java.lang.Byte getByte(java.lang.String,byte)
char getChar(java.lang.String,char)
char getChar(java.lang.String)
java.lang.CharSequence getCharSequence(java.lang.String)
android.os.Parcelable[] getParcelableArray(java.lang.String)
java.util.ArrayList getStringArrayList(java.lang.String)
java.util.ArrayList getCharSequenceArrayList(java.lang.String)
boolean[] getBooleanArray(java.lang.String)
short[] getShortArray(java.lang.String)
char[] getCharArray(java.lang.String)
long[] getLongArray(java.lang.String)
float[] getFloatArray(java.lang.String)
double[] getDoubleArray(java.lang.String)
java.lang.String[] getStringArray(java.lang.String)
java.lang.CharSequence[] getCharSequenceArray(java.lang.String)
android.os.IBinder getIBinder(java.lang.String)
int dataPosition()
void writeMapInternal(java.util.Map)
java.util.Map unmodifiableMap(java.util.Map)
android.os.IBinder getContextObject()
android.os.IServiceManager asInterface(android.os.IBinder)
android.os.IServiceManager getIServiceManager()
android.os.IVibratorService asInterface(android.os.IBinder)
void vibrate(long,android.os.IBinder)
void vibratePattern(long[],int,android.os.IBinder)
void cancelVibrate(android.os.IBinder)
void <init>(android.os.StrictMode$ThreadPolicy)
android.os.StrictMode$ThreadPolicy$Builder enable(int)
android.os.StrictMode$ThreadPolicy$Builder detectAll()
android.os.StrictMode$ThreadPolicy$Builder disable(int)
android.os.StrictMode$ThreadPolicy$Builder permitAll()
android.os.StrictMode$ThreadPolicy$Builder detectNetwork()
android.os.StrictMode$ThreadPolicy$Builder permitNetwork()
android.os.StrictMode$ThreadPolicy$Builder detectDiskReads()
android.os.StrictMode$ThreadPolicy$Builder permitDiskReads()
android.os.StrictMode$ThreadPolicy$Builder detectDiskWrites()
android.os.StrictMode$ThreadPolicy$Builder permitDiskWrites()
android.os.StrictMode$ThreadPolicy$Builder penaltyDialog()
android.os.StrictMode$ThreadPolicy$Builder penaltyDeath()
android.os.StrictMode$ThreadPolicy$Builder penaltyLog()
android.os.StrictMode$ThreadPolicy$Builder penaltyDropBox()
android.os.StrictMode$ThreadPolicy build()
android.os.WorkSource createFromParcel(android.os.Parcel)
android.os.WorkSource[] newArray(int)
int getAndIncrement()
java.lang.Thread newThread(java.lang.Runnable)
void <init>(android.os.CountDownTimer)
void onFinish()
android.os.CountDownTimer start()
long access$000(android.os.CountDownTimer)
long access$100(android.os.CountDownTimer)
java.lang.SecurityManager getSecurityManager()
void checkRead(java.lang.String)
void checkWrite(java.lang.String)
java.io.FileDescriptor openFileDescriptor(java.lang.String,int)
java.io.FileDescriptor getFileDescriptorFromSocket(java.net.Socket)
android.os.ParcelFileDescriptor fromSocket(java.net.Socket)
int createPipeNative(java.io.FileDescriptor[])
android.os.ParcelFileDescriptor[] createPipe()
void closeFileDescriptor(java.io.FileDescriptor)
void rebootNative(java.lang.String)
long[] getArray(java.lang.String)
void sample(java.lang.String,long)
void <init>(android.os.AsyncTask)
android.os.AsyncTask$Status getStatus()
void onPreExecute()
void onPostExecute(java.lang.Object)
void onProgressUpdate(java.lang.Object[])
void onCancelled()
boolean isCancelled()
boolean cancel(boolean)
java.lang.Object get(long,java.util.concurrent.TimeUnit)
android.os.AsyncTask execute(java.lang.Object[])
void publishProgress(java.lang.Object[])
void finish(java.lang.Object)
void access$300(android.os.AsyncTask,java.lang.Object)
void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)
java.lang.String createMessage(java.lang.Throwable)
void <init>(android.os.Message,java.lang.Throwable)
android.os.PatternMatcher createFromParcel(android.os.Parcel)
android.os.PatternMatcher[] newArray(int)
java.util.ArrayList initialValue()
android.os.storage.IObbActionListener asInterface(android.os.IBinder)
void onObbResult(java.lang.String,int,int)
void onUsbMassStorageConnectionChanged(boolean)
void <init>(android.os.storage.StorageManager$ListenerDelegate,android.os.Looper,android.os.storage.StorageManager)
void onObbStateChange(java.lang.String,int)
void <init>(android.os.storage.StorageManager,int)
android.os.Message getMessage()
int access$300(android.os.storage.StorageManager)
void <init>(android.os.storage.StorageManager$ObbListenerDelegate,android.os.Looper,android.os.storage.StorageManager)
void <init>(android.os.storage.StorageManager,android.os.storage.OnObbStateChangeListener)
android.os.storage.OnObbStateChangeListener getListener()
void <init>(android.os.storage.StorageManager,java.lang.String,int)
void sendObbStateChanged(java.lang.String,int)
int access$200(android.os.storage.StorageManager$ObbListenerDelegate)
android.os.storage.IMountServiceListener asInterface(android.os.IBinder)
void registerListener(android.os.storage.IMountServiceListener)
void unregisterListener(android.os.storage.IMountServiceListener)
boolean isUsbMassStorageConnected()
void setUsbMassStorageEnabled(boolean)
boolean isUsbMassStorageEnabled()
int[] getStorageUsers(java.lang.String)
void finishMediaUpdate()
void mountObb(java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int)
void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)
boolean isObbMounted(java.lang.String)
java.lang.String getMountedObbPath(java.lang.String)
android.os.storage.IMountShutdownObserver asInterface(android.os.IBinder)
int getNextNonce()
void <init>(android.os.storage.StorageManager,android.os.storage.StorageManager$1)
void <init>(android.os.storage.StorageManager,android.os.storage.StorageEventListener)
android.os.storage.StorageEventListener getListener()
void enableUsbMassStorage()
void disableUsbMassStorage()
int addListener(android.os.storage.OnObbStateChangeListener)
boolean mountObb(java.lang.String,java.lang.String,android.os.storage.OnObbStateChangeListener)
boolean unmountObb(java.lang.String,boolean,android.os.storage.OnObbStateChangeListener)
java.util.List access$000(android.os.storage.StorageManager)
void <init>(android.os.storage.StorageManager)
void sendShareAvailabilityChanged(boolean)
void sendStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)
void <init>(android.os.storage.StorageManager,boolean)
void <init>(android.os.storage.StorageManager,java.lang.String,java.lang.String,java.lang.String)
void onStorageStateChange(java.lang.String,java.lang.String,java.lang.String)
java.lang.Object doInBackground(java.lang.Object[])
java.lang.Object call()
java.lang.String access$000(java.lang.String)
void startInstructionCounting()
void resetInstructionCount()
boolean resetAndStart()
void stopInstructionCounting()
void getInstructionCount(int[])
boolean collect()
int globalTotal()
int globalMethodInvocations()
void setMainLooper(android.os.Looper)
void setMessageLogging(android.util.Printer)
android.os.MessageQueue getQueue()
boolean pingBinder()
boolean isBinderAlive()
void dump(java.io.FileDescriptor,java.lang.String[])
void clearGatheredViolations()
android.os.Parcel obtain(int)
void writeException(java.lang.Exception)
boolean execTransact(int,int,int,int)
void <init>(android.os.PowerManager$WakeLock)
void release(int)
void setWorkSource(android.os.WorkSource)
android.os.INetStatService asInterface(android.os.IBinder)
void formatTimeRaw(java.lang.StringBuilder,long)
void formatTime(java.lang.StringBuilder,long)
void formatTimeMs(java.lang.StringBuilder,long)
java.lang.String formatRatioLocked(long,long)
java.lang.String formatBytesLocked(long)
java.lang.String printWakeLock(java.lang.StringBuilder,android.os.BatteryStats$Timer,long,java.lang.String,int,java.lang.String)
java.lang.String printWakeLockCheckin(java.lang.StringBuilder,android.os.BatteryStats$Timer,long,java.lang.String,int,java.lang.String)
void dumpLine(java.io.PrintWriter,int,java.lang.String,java.lang.String,java.lang.Object[])
void dumpCheckinLocked(java.io.PrintWriter,int,int)
void dumpLocked(java.io.PrintWriter,java.lang.String,int,int)
void printBitDescriptions(java.io.PrintWriter,int,int,android.os.BatteryStats$BitDescription[])
void dumpCheckinLocked(java.io.PrintWriter,java.lang.String[],java.util.List)
void <init>(int,int,java.lang.String,java.lang.String[])
void setThreadPolicyMask(int)
void setThreadPolicy(android.os.StrictMode$ThreadPolicy)
void setBlockGuardPolicy(int)
void setThreadStrictModePolicy(int)
void setThreadPolicy(dalvik.system.BlockGuard$Policy)
dalvik.system.BlockGuard$Policy getThreadPolicy()
android.os.StrictMode$ThreadPolicy getThreadPolicy()
android.os.StrictMode$ThreadPolicy allowThreadDiskWrites()
android.os.StrictMode$ThreadPolicy allowThreadDiskReads()
int parsePolicyFromMessage(java.lang.String)
int parseViolationFromMessage(java.lang.String)
boolean tooManyViolationsThisLoop()
boolean hasGatheredViolations()
void setVmPolicy(android.os.StrictMode$VmPolicy)
android.os.StrictMode$VmPolicy getVmPolicy()
void enableDefaults()
boolean vmSqliteObjectLeaksEnabled()
void onSqliteObjectLeaked(java.lang.String,java.lang.Throwable)
void writeGatheredViolationsToParcel(android.os.Parcel)
void readAndHandleBinderCallViolations(android.os.Parcel)
void onBinderStrictModePolicyChange(int)
android.os.AsyncTask$Status valueOf(java.lang.String)
void <init>(android.os.ConditionVariable)
void <init>(android.os.Handler,android.os.Handler$1)
void ensureThreadStarted()
void startObserving(java.lang.String)
void stopObserving()
void native_setup()
int next_event(byte[])
void internalNotifyRegistrants(java.lang.Object,java.lang.Throwable)
void handleCallback(android.os.Message)
void <init>(android.os.Looper,android.os.Handler$Callback)
android.os.Message getPostMessage(java.lang.Runnable)
android.os.Message getPostMessage(java.lang.Runnable,java.lang.Object)
boolean postAtFrontOfQueue(java.lang.Runnable)
boolean hasMessages(int,java.lang.Object)
void sendDeathNotice(android.os.IBinder$DeathRecipient)
void onTick(long)
void access$000(java.lang.String)
int startViaZygote(java.lang.String,java.lang.String,int,int,int[],int,java.lang.String[])
int start(java.lang.String,java.lang.String,int,int,int[],int,java.lang.String[])
int start(java.lang.String,int,int,int[],int,java.lang.String[])
void invokeStaticMain(java.lang.String)
void openZygoteSocketIfNeeded()
int zygoteSendArgsAndGetPid(java.util.ArrayList)
void readProcLines(java.lang.String,java.lang.String[],long[])
void sendSignal(int,int)
void sendSignalQuiet(int,int)
void killProcessQuiet(int)
void onLooperPrepared()
java.util.UUID fromString(java.lang.String)
boolean block(long)
void native_setup(java.lang.String)
void native_restat(java.lang.String)
void restat(java.lang.String)
void native_finalize()
android.os.ResultReceiver createFromParcel(android.os.Parcel)
android.os.ResultReceiver[] newArray(int)
void stop(java.lang.String)
boolean isDebuggingEnabled()
boolean isDebuggerConnected()
long lastDebuggerActivity()
void startEmulatorTracing()
void startNativeTracing()
void stopEmulatorTracing()
void stopNativeTracing()
void startMethodTracing()
int getAllocCount(int)
int getGlobalClassInitCount()
int getGlobalClassInitTime()
int getGlobalExternalAllocCount()
int getGlobalExternalAllocSize()
int getGlobalExternalFreedCount()
int getGlobalExternalFreedSize()
int getThreadAllocCount()
int getThreadAllocSize()
int getThreadExternalAllocCount()
int getThreadExternalAllocSize()
int getThreadGcInvocationCount()
void resetAllocCount(int)
void resetGlobalAllocCount()
void resetGlobalFreedCount()
void resetGlobalFreedSize()
void resetGlobalClassInitCount()
void resetGlobalClassInitTime()
void resetGlobalExternalAllocCount()
void resetGlobalExternalAllocSize()
void resetGlobalExternalFreedCount()
void resetGlobalExternalFreedSize()
void resetGlobalGcInvocationCount()
void resetThreadAllocCount()
void resetThreadAllocSize()
void resetThreadExternalAllocCount()
void resetThreadExternalAllocSize()
void resetThreadGcInvocationCount()
int setAllocationLimit(int)
int setGlobalAllocationLimit(int)
void printLoadedClasses(int)
int getLoadedClassCount()
void dumpReferenceTables()
boolean fieldTypeMatches(java.lang.reflect.Field,java.lang.Class)
void set(java.lang.Object,java.lang.Object)
void modifyFieldIfSet(java.lang.reflect.Field,com.android.internal.util.TypedProperties,java.lang.String)
void setFieldsOn(java.lang.Class,boolean)
void setFieldsOn(java.lang.Class)
boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])
java.security.cert.CertificateFactory getInstance(java.lang.String)
java.security.cert.Certificate generateCertificate(java.io.InputStream)
java.util.HashSet getTrustedCerts(java.io.File)
void onProgress(int)
void seek(long)
void readFully(byte[])
java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)
org.apache.harmony.security.pkcs7.SignedData getSignedData()
java.util.List getCertificates()
void <init>(org.apache.harmony.security.x509.Certificate)
java.util.List getSignerInfos()
java.security.PublicKey getPublicKey()
java.lang.String getdigestAlgorithm()
java.lang.String getDigestEncryptionAlgorithm()
java.lang.String getSigAlgName()
java.security.Signature getInstance(java.lang.String)
void initVerify(java.security.cert.Certificate)
boolean interrupted()
void update(byte[],int,int)
byte[] getEncryptedDigest()
boolean verify(byte[])
void verifyPackage(java.io.File,android.os.RecoverySystem$ProgressListener,java.io.File)
java.lang.String getCanonicalPath()
void bootCommand(android.content.Context,java.lang.String)
void installPackage(android.content.Context,java.io.File)
void rebootWipeUserData(android.content.Context)
void rebootToggleEFS(android.content.Context,boolean)
java.lang.String handleAftermath()
void RecoverySystem()
void <init>(android.speech.SpeechRecognizer$InternalListener)
void <init>(android.speech.SpeechRecognizer)
void onBeginningOfSpeech()
void onBufferReceived(byte[])
void onEndOfSpeech()
void onError(int)
void onReadyForSpeech(android.os.Bundle)
void onResults(android.os.Bundle)
void onPartialResults(android.os.Bundle)
void onRmsChanged(float)
void onEvent(int,android.os.Bundle)
void <init>(android.speech.SpeechRecognizer,android.speech.SpeechRecognizer$1)
android.speech.RecognitionListener access$1002(android.speech.SpeechRecognizer$InternalListener,android.speech.RecognitionListener)
android.speech.RecognitionListener access$1000(android.speech.SpeechRecognizer$InternalListener)
void <init>(android.speech.RecognitionService)
boolean access$700(android.speech.RecognitionService,android.speech.IRecognitionListener)
android.os.Handler access$600(android.speech.RecognitionService)
void <init>(android.speech.RecognitionService,android.content.Intent,android.speech.IRecognitionListener)
void startListening(android.content.Intent,android.speech.IRecognitionListener)
void stopListening(android.speech.IRecognitionListener)
void cancel(android.speech.IRecognitionListener)
void clearReference()
android.speech.IRecognitionService asInterface(android.os.IBinder)
android.speech.IRecognitionListener asInterface(android.os.IBinder)
void access$000(android.speech.SpeechRecognizer,android.content.Intent)
void access$100(android.speech.SpeechRecognizer)
void access$200(android.speech.SpeechRecognizer)
void access$300(android.speech.SpeechRecognizer,android.speech.RecognitionListener)
void <init>(android.content.Context,android.content.ComponentName)
boolean isRecognitionAvailable(android.content.Context)
android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context,android.content.ComponentName)
android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context)
void checkIsCalledFromMainThread()
void putMessage(android.os.Message)
void setRecognitionListener(android.speech.RecognitionListener)
void startListening(android.content.Intent)
boolean checkOpenConnection()
void handleStartListening(android.content.Intent)
void handleStopMessage()
void handleCancelMessage()
void handleChangeListener(android.speech.RecognitionListener)
android.speech.IRecognitionService access$502(android.speech.SpeechRecognizer,android.speech.IRecognitionService)
java.util.Queue access$600(android.speech.SpeechRecognizer)
android.os.Handler access$700(android.speech.SpeechRecognizer)
android.speech.SpeechRecognizer$Connection access$802(android.speech.SpeechRecognizer,android.speech.SpeechRecognizer$Connection)
void <init>(android.speech.RecognitionService,android.speech.IRecognitionListener,android.speech.RecognitionService$1)
void onStartListening(android.content.Intent,android.speech.RecognitionService$Callback)
void dispatchStartListening(android.content.Intent,android.speech.IRecognitionListener)
android.speech.IRecognitionListener access$500(android.speech.RecognitionService$Callback)
void onStopListening(android.speech.RecognitionService$Callback)
void dispatchStopListening(android.speech.IRecognitionListener)
void onCancel(android.speech.RecognitionService$Callback)
void dispatchCancel(android.speech.IRecognitionListener)
void dispatchClearCallback()
boolean checkPermissions(android.speech.IRecognitionListener)
void access$000(android.speech.RecognitionService,android.content.Intent,android.speech.IRecognitionListener)
void access$100(android.speech.RecognitionService,android.speech.IRecognitionListener)
void access$200(android.speech.RecognitionService,android.speech.IRecognitionListener)
void access$300(android.speech.RecognitionService)
android.speech.tts.ITtsCallback asInterface(android.os.IBinder)
void utteranceCompleted(java.lang.String)
void <init>(android.speech.tts.TextToSpeech)
android.speech.tts.ITts asInterface(android.os.IBinder)
int setSpeechRate(java.lang.String,int)
int setPitch(java.lang.String,int)
int speak(java.lang.String,java.lang.String,int,java.lang.String[])
boolean isSpeaking()
int stop(java.lang.String)
void addSpeech(java.lang.String,java.lang.String,java.lang.String,int)
void addSpeechFile(java.lang.String,java.lang.String,java.lang.String)
java.lang.String[] getLanguage()
int isLanguageAvailable(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
int setLanguage(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
boolean synthesizeToFile(java.lang.String,java.lang.String,java.lang.String[],java.lang.String)
int playEarcon(java.lang.String,java.lang.String,int,java.lang.String[])
void addEarcon(java.lang.String,java.lang.String,java.lang.String,int)
void addEarconFile(java.lang.String,java.lang.String,java.lang.String)
int registerCallback(java.lang.String,android.speech.tts.ITtsCallback)
int unregisterCallback(java.lang.String,android.speech.tts.ITtsCallback)
int playSilence(java.lang.String,long,int,java.lang.String[])
int setEngineByPackageName(java.lang.String)
java.lang.String getDefaultEngine()
boolean areDefaultsEnforced()
void <init>(android.speech.tts.TextToSpeech,android.speech.tts.TextToSpeech$OnUtteranceCompletedListener)
void onUtteranceCompleted(java.lang.String)
void initTts()
void <init>(android.content.Context,android.speech.tts.TextToSpeech$OnInitListener)
void onInit(int)
int addSpeech(java.lang.String,java.lang.String,int)
int addSpeech(java.lang.String,java.lang.String)
int addEarcon(java.lang.String,java.lang.String,int)
int addEarcon(java.lang.String,java.lang.String)
int speak(java.lang.String,int,java.util.HashMap)
void resetCachedParams()
int playEarcon(java.lang.String,int,java.util.HashMap)
int playSilence(long,int,java.util.HashMap)
int stop()
int setSpeechRate(float)
int setPitch(float)
int setLanguage(java.util.Locale)
java.lang.String getISO3Language()
java.lang.String getISO3Country()
java.util.Locale getLanguage()
int isLanguageAvailable(java.util.Locale)
int synthesizeToFile(java.lang.String,java.util.HashMap,java.lang.String)
int setOnUtteranceCompletedListener(android.speech.tts.TextToSpeech$OnUtteranceCompletedListener)
java.lang.Object access$000(android.speech.tts.TextToSpeech)
android.speech.tts.ITts access$102(android.speech.tts.TextToSpeech,android.speech.tts.ITts)
boolean access$202(android.speech.tts.TextToSpeech,boolean)
android.speech.tts.TextToSpeech$OnInitListener access$300(android.speech.tts.TextToSpeech)
android.speech.tts.TextToSpeech$OnInitListener access$302(android.speech.tts.TextToSpeech,android.speech.tts.TextToSpeech$OnInitListener)
android.content.Intent getVoiceDetailsIntent(android.content.Context)
int access$000(java.lang.String)
int access$100(android.speech.srec.Recognizer)
void access$200(int,int)
void <init>(android.speech.srec.Recognizer,java.lang.String)
void access$300(int)
void resetAllSlots()
void access$400(int,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)
void addWordToSlot(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)
void access$500(int)
void compile()
int access$600(android.speech.srec.Recognizer)
void access$700(int,int)
android.speech.srec.Recognizer$Grammar access$802(android.speech.srec.Recognizer,android.speech.srec.Recognizer$Grammar)
void setupRecognizer()
void access$900(int,java.lang.String)
void save(java.lang.String)
void access$1000(int)
int access$1100(android.speech.srec.Recognizer$Grammar)
void encode(byte[],int,byte[],int,int,int)
int maxAbsPcm(byte[],int,int)
int AudioRecordNew(int,int)
int AudioRecordStart(int)
int AudioRecordRead(int,byte[],int,int)
void AudioRecordStop(int)
void AudioRecordDelete(int)
java.lang.String getConfigDir(java.util.Locale)
void PMemInit()
void SR_SessionCreate(java.lang.String)
int SR_RecognizerCreate()
void SR_RecognizerSetup(int)
int SR_VocabularyLoad()
void SR_RecognizerActivateRule(int,int,java.lang.String,int)
void SR_RecognizerStart(int)
int SR_RecognizerAdvance(int)
int advance()
int SR_RecognizerPutAudio(int,byte[],int,int,boolean)
int putAudio(byte[],int,int,boolean)
void putAudio(java.io.InputStream)
int SR_RecognizerResultGetSize(int)
int getResultCount()
java.lang.String[] SR_RecognizerResultGetKeyList(int,int)
java.lang.String[] getResultKeys(int)
java.lang.String SR_RecognizerResultGetValue(int,int,java.lang.String)
java.lang.String getResult(int,java.lang.String)
void SR_RecognizerStop(int)
void SR_RecognizerDeactivateRule(int,int,java.lang.String)
void SR_AcousticStateReset(int)
void resetAcousticState()
void SR_AcousticStateSet(int,java.lang.String)
void setAcousticState(java.lang.String)
java.lang.String SR_AcousticStateGet(int)
java.lang.String getAcousticState()
void SR_VocabularyDestroy(int)
void SR_RecognizerUnsetup(int)
void SR_RecognizerDestroy(int)
void SR_SessionDestroy()
void PMemShutdown()
java.lang.String eventToString(int)
int SR_GrammarLoad(java.lang.String)
void SR_GrammarSetupVocabulary(int,int)
void SR_GrammarResetAllSlots(int)
void SR_GrammarAddWordToSlot(int,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)
void SR_GrammarCompile(int)
void SR_GrammarSetupRecognizer(int,int)
void SR_GrammarSave(int,java.lang.String)
void SR_GrammarDestroy(int)
void <init>(short,short,int,short,int)
short getFormat()
android.speech.srec.WaveHeader setFormat(short)
short getNumChannels()
android.speech.srec.WaveHeader setNumChannels(short)
int getSampleRate()
android.speech.srec.WaveHeader setSampleRate(int)
short getBitsPerSample()
android.speech.srec.WaveHeader setBitsPerSample(short)
int getNumBytes()
android.speech.srec.WaveHeader setNumBytes(int)
void readId(java.io.InputStream,java.lang.String)
int readInt(java.io.InputStream)
short readShort(java.io.InputStream)
int read(java.io.InputStream)
void writeId(java.io.OutputStream,java.lang.String)
void writeInt(java.io.OutputStream,int)
void writeShort(java.io.OutputStream,short)
int write(java.io.OutputStream)
void <init>(android.speech.RecognitionService,android.speech.IRecognitionListener)
void beginningOfSpeech()
void bufferReceived(byte[])
void endOfSpeech()
void error(int)
void partialResults(android.os.Bundle)
void readyForSpeech(android.os.Bundle)
void results(android.os.Bundle)
void rmsChanged(float)
int setLowercaseIndexOf(org.apache.http.util.CharArrayBuffer,int)
java.lang.String substringTrimmed(int,int)
org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
void setConnectionType(org.apache.http.util.CharArrayBuffer,int)
void parseHeader(org.apache.http.util.CharArrayBuffer)
long getTransferEncoding()
int getConnectionType()
java.lang.String getContentEncoding()
java.lang.String getAcceptRanges()
java.lang.String getRefresh()
void setContentEncoding(java.lang.String)
void setWwwAuthenticate(java.lang.String)
void setProxyAuthenticate(java.lang.String)
void setAcceptRanges(java.lang.String)
void setLastModified(java.lang.String)
void setEtag(java.lang.String)
boolean containsIgnoreCaseTrimmed(org.apache.http.util.CharArrayBuffer,int,java.lang.String)
org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache usingDirectory(java.io.File)
void engineInit(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)
org.apache.harmony.xnet.provider.jsse.ClientSessionContext engineGetClientSessionContext()
void setPersistentCache(org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache)
javax.net.ssl.SSLSocketFactory engineGetSocketFactory()
void initializeEngine(java.io.File)
javax.net.ssl.SSLSocketFactory getSocketFactory()
void <init>(android.content.Context,org.apache.http.HttpHost,android.net.http.RequestFeeder)
void <init>(android.content.Context,org.apache.http.HttpHost,org.apache.http.HttpHost,android.net.http.RequestFeeder)
void setSocketBufferSize(org.apache.http.params.HttpParams,int)
void bind(java.net.Socket,org.apache.http.params.HttpParams)
java.lang.String toHostString()
org.apache.http.Header[] getAllHeaders()
void addHeader(org.apache.http.Header)
void sendRequestHeader(org.apache.http.HttpRequest)
org.apache.http.StatusLine parseResponseHeader(android.net.http.Headers)
java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)
org.apache.http.ProtocolVersion getProtocolVersion()
int getMajor()
int getMinor()
java.net.Socket createSocket()
void connect(java.net.SocketAddress)
android.net.http.CertificateChainValidator getInstance()
android.net.http.SslError doHandshakeAndValidateServerCertificates(android.net.http.HttpsConnection,javax.net.ssl.SSLSocket,java.lang.String)
android.net.http.EventHandler getEventHandler()
org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)
android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)
void restartConnection(boolean)
boolean isOpen()
void closeConnection()
void setUseClientMode(boolean)
void startHandshake()
void closeSocketThrowException(javax.net.ssl.SSLSocket,java.lang.String,java.lang.String)
javax.net.ssl.SSLSession getSession()
java.security.cert.Certificate[] getPeerCertificates()
void closeSocketThrowException(javax.net.ssl.SSLSocket,java.lang.String)
void <init>(java.security.cert.X509Certificate)
void <init>(int,java.security.cert.X509Certificate)
java.security.Principal getIssuerDN()
java.security.Principal getSubjectDN()
java.util.Date getNotAfter()
boolean after(java.util.Date)
javax.net.ssl.X509TrustManager getDefaultTrustManager()
void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)
void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
java.util.Vector getValues()
java.util.Vector getOIDs()
java.lang.Object elementAt(int)
void <init>(android.net.http.SslCertificate,java.lang.String)
java.lang.String getDName()
java.lang.String getCName()
java.lang.String getOName()
java.lang.String getUName()
boolean isLoggable()
void <init>(java.lang.String,int,android.net.http.AndroidHttpClient$1)
boolean access$400(android.net.http.AndroidHttpClient$LoggingConfiguration)
void access$600(android.net.http.AndroidHttpClient$LoggingConfiguration,java.lang.String)
char[] buffer()
char toLower(char)
void setBodyProvider(java.io.InputStream,int)
java.lang.String getHostPort()
void addHeader(java.lang.String,java.lang.String)
void addHeaders(java.util.Map)
void <init>(java.lang.String,org.apache.http.HttpHost,org.apache.http.HttpHost,java.lang.String,java.io.InputStream,int,android.net.http.EventHandler,java.util.Map)
void setLoadingPaused(boolean)
void setConnection(android.net.http.Connection)
void e(java.lang.String)
org.apache.http.protocol.HttpContext getHttpContext()
void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)
void sendRequest(android.net.http.AndroidHttpClientConnection)
boolean canResponseHaveBody(org.apache.http.HttpRequest,int)
org.apache.http.HttpEntity receiveResponseEntity(android.net.http.Headers)
org.apache.http.Header getContentEncoding()
byte[] getBuf()
void setCanPersist(org.apache.http.HttpEntity,org.apache.http.ProtocolVersion,int)
void complete()
void readResponse(android.net.http.AndroidHttpClientConnection)
java.lang.String getSchemeName()
void removeHeaders(java.lang.String)
void v(java.lang.String)
void setHeader(java.lang.String,java.lang.String)
void waitUntilComplete()
org.apache.http.RequestLine getRequestLine()
void <init>(java.io.InputStream,long)
void setEntity(org.apache.http.HttpEntity)
void error(int,int)
void <init>(android.net.http.IdleCache)
void <init>(android.net.http.IdleCache,android.net.http.IdleCache$1)
boolean cacheConnection(org.apache.http.HttpHost,android.net.http.Connection)
android.net.http.Connection getConnection(org.apache.http.HttpHost)
void clearIdle()
int access$100(android.net.http.IdleCache)
void access$200(android.net.http.IdleCache)
android.net.http.IdleCache$IdleReaper access$302(android.net.http.IdleCache,android.net.http.IdleCache$IdleReaper)
void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)
void <init>(android.net.http.AndroidHttpClient,org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)
org.apache.http.protocol.BasicHttpProcessor createHttpProcessor()
org.apache.http.HttpRequestInterceptor access$000()
void addRequestInterceptor(org.apache.http.HttpRequestInterceptor)
void <init>(android.net.http.AndroidHttpClient,android.net.http.AndroidHttpClient$1)
org.apache.http.auth.AuthSchemeRegistry getAuthSchemes()
void setAttribute(java.lang.String,java.lang.Object)
org.apache.http.cookie.CookieSpecRegistry getCookieSpecs()
org.apache.http.client.CredentialsProvider getCredentialsProvider()
org.apache.http.protocol.HttpContext createHttpContext()
void <init>(org.apache.http.entity.ContentLengthStrategy)
void assertNotOpen()
boolean getTcpNoDelay(org.apache.http.params.HttpParams)
void setTcpNoDelay(boolean)
int getSoTimeout(org.apache.http.params.HttpParams)
int getLinger(org.apache.http.params.HttpParams)
void setSoLinger(boolean,int)
int getSocketBufferSize(org.apache.http.params.HttpParams)
void <init>(java.net.Socket,int,org.apache.http.params.HttpParams)
int getIntParameter(java.lang.String,int)
void <init>(org.apache.http.io.SessionOutputBuffer,org.apache.http.message.LineFormatter,org.apache.http.params.HttpParams)
org.apache.http.io.HttpTransportMetrics getMetrics()
void <init>(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)
int getRemotePort()
void assertOpen()
java.net.InetAddress getInetAddress()
java.net.InetAddress getRemoteAddress()
void setSocketTimeout(int)
int getSoTimeout()
int getSocketTimeout()
void doFlush()
void shutdownOutput()
void shutdownInput()
void write(org.apache.http.HttpMessage)
void incrementRequestCount()
org.apache.http.HttpEntity getEntity()
void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity)
int readLine(org.apache.http.util.CharArrayBuffer)
org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)
void append(org.apache.http.util.CharArrayBuffer,int,int)
void incrementResponseCount()
long determineLength(android.net.http.Headers)
void setChunked(boolean)
void <init>(org.apache.http.io.SessionInputBuffer)
void setContent(java.io.InputStream)
void <init>(org.apache.http.io.SessionInputBuffer,long)
boolean isDataAvailable(int)
boolean isStale()
org.apache.http.HttpConnectionMetrics getMetrics()
java.security.cert.X509Certificate[] getAcceptedIssuers()
void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)
boolean addError(int)
void <init>(int,android.net.http.SslCertificate)
boolean hasError(int)
void <init>(android.net.http.AndroidHttpClient)
android.net.http.AndroidHttpClient$LoggingConfiguration access$300(android.net.http.AndroidHttpClient)
java.lang.String access$500(org.apache.http.client.methods.HttpUriRequest,boolean)
void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)
void setConnectionTimeout(org.apache.http.params.HttpParams,int)
void setSoTimeout(org.apache.http.params.HttpParams,int)
void setRedirecting(org.apache.http.params.HttpParams,boolean)
void setUserAgent(org.apache.http.params.HttpParams,java.lang.String)
org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()
void <init>(java.lang.String,org.apache.http.conn.scheme.SocketFactory,int)
org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)
org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int,android.net.SSLSessionCache)
void <init>(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry)
android.net.http.AndroidHttpClient newInstance(java.lang.String,android.content.Context)
android.net.http.AndroidHttpClient newInstance(java.lang.String)
void modifyRequestToAcceptGzipResponse(org.apache.http.HttpRequest)
java.io.InputStream getUngzippedContent(org.apache.http.HttpEntity)
org.apache.http.conn.ClientConnectionManager getConnectionManager()
org.apache.http.params.HttpParams getParams()
org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)
org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)
org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)
org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)
java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)
java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)
java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)
java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)
long getMinGzipSize(android.content.ContentResolver)
org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[],android.content.ContentResolver)
void enableCurlLogging(java.lang.String,int)
void disableCurlLogging()
java.net.URI getURI()
org.apache.http.HttpRequest getOriginal()
java.lang.String toCurl(org.apache.http.client.methods.HttpUriRequest,boolean)
void parseHeader(java.lang.String)
boolean isBasic()
java.lang.String parseScheme(java.lang.String)
void parseParameters(java.lang.String)
void parseParameter(java.lang.String)
java.lang.String trimDoubleQuotesIfAny(java.lang.String)
void parseParameter(java.lang.String,java.lang.String)
void parseStale(java.lang.String)
void <init>(android.content.Context,int,android.net.http.RequestQueue$ConnectionManager,android.net.http.RequestFeeder)
void requestStop()
long currentThreadTimeMillis()
android.net.http.Request getRequest()
android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost)
void processRequests(android.net.http.Request)
boolean getCanPersist()
boolean recycleConnection(android.net.http.Connection)
void <init>(org.apache.http.protocol.HttpContext)
org.apache.http.HttpHost getHost()
android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost,org.apache.http.HttpHost,android.net.http.RequestFeeder)
android.net.http.Request getRequest(org.apache.http.HttpHost)
boolean openHttpConnection(android.net.http.Request)
boolean httpFailure(android.net.http.Request,int,java.lang.Exception)
boolean clearPipe(java.util.LinkedList)
boolean haveRequest(org.apache.http.HttpHost)
java.lang.Object removeAttribute(java.lang.String)
java.lang.Object removeLast()
void requeueRequest(android.net.http.Request)
java.lang.Object getAttribute(java.lang.String)
boolean keepAlive(org.apache.http.HttpEntity,org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)
boolean isChunked()
boolean lessEquals(org.apache.http.ProtocolVersion)
void setCanPersist(boolean)
java.security.cert.CertPath generateCertPath(java.util.List)
byte[] getEncoded()
byte[] secureHash(java.security.cert.Certificate[])
boolean expired()
boolean has(java.lang.String,byte[])
void <init>(android.net.http.CertificateValidatorCache,java.lang.String,byte[],long)
boolean put(java.lang.String,byte[],long)
void requestSent()
void locationChanged(java.lang.String,boolean)
void <init>(android.net.http.RequestQueue)
void access$300(android.net.http.RequestQueue)
void <init>(android.net.http.RequestQueue,java.lang.String,android.net.WebAddress,java.lang.String,java.util.Map,java.io.InputStream,int,android.net.http.Request)
void <init>(android.net.http.RequestQueue,java.lang.String,android.net.WebAddress,java.lang.String,java.util.Map,java.io.InputStream,int,android.net.http.Request,android.net.http.Connection)
boolean isRedirectMax()
void createAndQueueNewRequest()
void setupAuthResponse()
java.lang.String computeDigestAuthResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
void assertNotNull(java.lang.Object)
byte[] encodeBase64(byte[])
java.lang.String computeCnonce()
java.lang.String computeDigest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
java.lang.String doubleQuote(java.lang.String)
java.lang.String H(java.lang.String)
java.lang.String KD(java.lang.String,java.lang.String)
java.lang.String bufferToHex(byte[])
android.net.http.SslCertificate$DName getIssuedTo()
android.net.http.SslCertificate$DName getIssuedBy()
java.lang.String getValidNotBefore()
java.lang.String getValidNotAfter()
java.util.Date parseDate(java.lang.String)
void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date)
java.util.Date cloneDate(java.util.Date)
java.util.Date getNotBefore()
java.util.Date getValidNotBeforeDate()
java.lang.String formatDate(java.util.Date)
java.util.Date getValidNotAfterDate()
java.util.Date parse(java.lang.String)
void mark(java.lang.String)
void <init>(android.net.http.RequestQueue,int)
void startup()
void setProxyConfig()
java.lang.String getHost(android.content.Context)
void disablePersistence()
int getPort(android.content.Context)
void queueRequest(android.net.http.Request,boolean)
int access$408(android.net.http.RequestQueue$ActivePool)
void startConnectionThread()
org.apache.http.HttpHost determineHost(org.apache.http.HttpHost)
boolean requestsPending()
android.net.http.Request removeFirst(java.util.LinkedHashMap)
android.content.Context access$000(android.net.http.RequestQueue)
org.apache.http.HttpHost access$100(android.net.http.RequestQueue)
org.apache.http.HttpHost access$200(android.net.http.RequestQueue,org.apache.http.HttpHost)
void logState()
android.net.http.ConnectionThread getThread(org.apache.http.HttpHost)
android.net.NetworkInfo$DetailedState[] values()
android.net.NetworkInfo$DetailedState valueOf(java.lang.String)
void <init>(java.lang.String,java.lang.String,android.net.Uri$1)
void <init>(android.net.LocalSocketImpl)
java.io.FileDescriptor access$000(android.net.LocalSocketImpl)
int access$100(android.net.LocalSocketImpl,java.io.FileDescriptor)
java.lang.Object access$200(android.net.LocalSocketImpl)
int access$300(android.net.LocalSocketImpl,java.io.FileDescriptor)
int access$400(android.net.LocalSocketImpl,byte[],int,int,java.io.FileDescriptor)
void interfaceLinkStatusChanged(java.lang.String,boolean)
void interfaceAdded(java.lang.String)
void interfaceRemoved(java.lang.String)
java.lang.String getMimeTypeForId(android.content.Context,long)
void deleteDownload(android.content.Context,long)
android.os.ParcelFileDescriptor openDownload(android.content.Context,long,java.lang.String)
java.io.InputStream openDownloadStream(android.content.Context,long)
int access$100(android.database.Cursor,long)
android.net.Downloads$StatusInfo getStatus(android.content.Context,long)
java.io.FileDescriptor create_native(boolean)
void create(boolean)
void close_native(java.io.FileDescriptor)
android.net.LocalSocketAddress$Namespace getNamespace()
void connectLocal(java.io.FileDescriptor,java.lang.String,int)
void connect(android.net.LocalSocketAddress,int)
void bindLocal(java.io.FileDescriptor,java.lang.String,int)
void bind(android.net.LocalSocketAddress)
void listen_native(java.io.FileDescriptor,int)
void listen(int)
java.io.FileDescriptor accept(java.io.FileDescriptor,android.net.LocalSocketImpl)
void accept(android.net.LocalSocketImpl)
void shutdown(java.io.FileDescriptor,boolean)
boolean supportsUrgentData()
void sendUrgentData(int)
int getOption_native(java.io.FileDescriptor,int)
java.lang.Object getOption(int)
void setOption_native(java.io.FileDescriptor,int,int,int)
void setOption(int,java.lang.Object)
void setFileDescriptorsForSend(java.io.FileDescriptor[])
android.net.Credentials getPeerCredentials_native(java.io.FileDescriptor)
android.net.LocalSocketAddress getSockAddress()
int available_native(java.io.FileDescriptor)
int read_native(java.io.FileDescriptor)
int readba_native(byte[],int,int,java.io.FileDescriptor)
java.lang.Object access$500(android.net.LocalSocketImpl)
void writeba_native(byte[],int,int,java.io.FileDescriptor)
void access$600(android.net.LocalSocketImpl,byte[],int,int,java.io.FileDescriptor)
void write_native(int,java.io.FileDescriptor)
void access$700(android.net.LocalSocketImpl,int,java.io.FileDescriptor)
void <init>(android.net.Uri$1)
java.lang.String access$300()
android.net.Uri readFrom(android.os.Parcel)
int findSchemeSeparator()
int findFragmentSeparator()
boolean isHierarchical()
boolean isRelative()
java.lang.String parseScheme()
java.lang.String parseSsp()
android.net.Uri$Part fromEncoded(java.lang.String)
android.net.Uri$Part getSsp()
java.lang.String getEncoded()
java.lang.String getEncodedSchemeSpecificPart()
java.lang.String getDecoded()
java.lang.String parseAuthority(java.lang.String,int)
android.net.Uri$Part getAuthorityPart()
java.lang.String getEncodedAuthority()
java.lang.String parsePath()
android.net.Uri$PathPart fromEncoded(java.lang.String)
android.net.Uri$PathPart getPathPart()
java.lang.String getEncodedPath()
android.net.Uri$PathSegments getPathSegments()
java.util.List getPathSegments()
java.lang.String parsePath(java.lang.String,int)
java.lang.String parseQuery()
android.net.Uri$Part getQueryPart()
java.lang.String getEncodedQuery()
java.lang.String getQuery()
java.lang.String parseFragment()
android.net.Uri$Part getFragmentPart()
java.lang.String getEncodedFragment()
java.lang.String getFragment()
android.net.Uri$Builder authority(android.net.Uri$Part)
android.net.Uri$Builder path(android.net.Uri$PathPart)
android.net.Uri$Builder query(android.net.Uri$Part)
android.net.Uri$Builder fragment(android.net.Uri$Part)
android.net.Uri$Builder opaquePart(android.net.Uri$Part)
void <init>(java.lang.String,android.net.Uri$1)
long getResetTime(java.lang.String)
long getPeriodStartTime(java.lang.String)
long getByteCount(java.lang.String,int,int,int)
long getCliffThreshold(java.lang.String,int)
int getCliffLevel(java.lang.String,int)
java.lang.String getHelpUri()
java.lang.String getDefaultHost()
int getDefaultPort()
void <init>(android.content.Context,android.os.Handler,int,int,java.lang.String,java.lang.String)
void <init>(android.net.wifi.WifiStateTracker)
void setTornDownByConnMgr(boolean)
void <init>(android.net.wifi.WifiStateTracker,android.os.Handler)
void setSupplicantState(android.net.wifi.SupplicantState)
void updateNetworkInfo()
void checkPollTimer()
android.net.wifi.SupplicantState getSupplicantState()
void setSupplicantState(java.lang.String)
java.lang.String[] getNameServerList(java.lang.String[])
java.lang.String[] getNameServers()
java.lang.String getInterfaceName()
java.lang.String getTcpBufferSizesPropName()
void startMonitoring()
void startEventLoop()
boolean isDriverStopped()
int getNetworkSubtype()
void setIsAvailable(boolean)
boolean isConnectionCompleted()
boolean hasIpAddress()
void notifyPasswordKeyMayBeIncorrect()
void notifySupplicantConnection()
void <init>(int,java.lang.String,android.net.wifi.SupplicantState)
void notifyStateChange(int,java.lang.String,android.net.wifi.SupplicantState)
void <init>(android.net.NetworkInfo$DetailedState,java.lang.String,int)
void notifyStateChange(android.net.NetworkInfo$DetailedState,java.lang.String,int)
boolean setScanResultHandling(int)
void notifyScanResultsAvailable()
void notifySupplicantLost()
void notifyDriverStopped()
void notifyDriverStarted()
void notifyDriverHung()
void updateBatteryWorkSourceLocked(android.os.WorkSource)
boolean reconnectCommand()
void setScanOnlyMode(boolean)
boolean setSuspendOptimizationsCommand(boolean)
void setSuspendModeOptimizations(boolean)
void setPowerMode(int)
void setHighPerfMode(boolean)
void setBluetoothScanMode(boolean)
void checkIsBluetoothPlaying()
void enableRssiPolling(boolean)
void resetSupplicantLoopState()
boolean isSupplicantLooping(android.net.wifi.SupplicantState)
java.lang.String getMacAddressCommand()
void setMacAddress(java.lang.String)
void checkUseStaticIp()
void resetNotificationTimer()
void <init>(android.net.wifi.WifiStateTracker,android.os.Looper,android.os.Handler)
android.net.wifi.WifiInfo requestConnectionInfo()
java.lang.String getBSSID()
java.lang.String getSSID()
void configureInterface()
void setDetailedState(android.net.NetworkInfo$DetailedState)
android.net.NetworkInfo$DetailedState getDetailedStateOf(android.net.wifi.SupplicantState)
boolean initializeMulticastFiltering()
boolean setNumAllowedChannels()
void closeSupplicantConnection()
void resetConnections(boolean)
boolean setWifiEnabled(boolean)
boolean scan(boolean)
boolean wifiManagerDisableNetwork(int)
void handleDisconnectedState(android.net.NetworkInfo$DetailedState,boolean)
boolean stopDriver()
void scheduleDisconnect()
void requestConnectionStatus(android.net.wifi.WifiInfo)
void setNotificationVisible(boolean,int,boolean,int)
void cancelDisconnect()
android.net.NetworkInfo getNetworkInfo()
android.net.NetworkInfo$DetailedState getDetailedState()
void setDetailedStateInternal(android.net.NetworkInfo$DetailedState)
void sendNetworkStateChangeBroadcast(java.lang.String)
void sendScanResultsAvailable()
boolean setScanMode(boolean)
void requestPolledInfo(android.net.wifi.WifiInfo,boolean)
int getMaxDhcpRetries()
boolean disableNetwork(int)
void setIpAddress(int)
boolean configureInterface(java.lang.String,android.net.DhcpInfo)
void setBSSID(java.lang.String)
int resetConnections(java.lang.String)
void setCancelCallback(boolean)
boolean stopDhcp(java.lang.String)
int disableInterface(java.lang.String)
android.net.DhcpInfo getDhcpInfo()
java.util.List getScanResultsList()
void setScanResultsList(java.util.List)
java.lang.String status()
void setNetworkId(int)
void setSSID(java.lang.String)
int getRssiApprox()
int getRssi()
void setRssi(int)
int calculateSignalLevel(int,int)
void sendRssiChangeBroadcast(int)
int getLinkSpeed()
void setLinkSpeed(int)
boolean disconnectAndStop()
boolean teardown()
boolean restart()
boolean reconnect()
boolean startDriver()
int getWifiState()
void setWifiState(int)
boolean isAnyNetworkDisabled()
boolean loadDriver()
boolean unloadDriver()
boolean startSupplicant()
boolean stopSupplicant()
boolean connectToSupplicant()
boolean ping()
boolean pingCommand()
boolean scanCommand(boolean)
boolean setScanResultHandlingCommand(int)
java.lang.String scanResultsCommand()
java.lang.String scanResults()
boolean setScanModeCommand(boolean)
boolean disconnectCommand()
int addNetwork()
int addNetworkCommand()
boolean removeNetwork(int)
boolean removeNetworkCommand(int)
boolean enableNetwork(int,boolean)
boolean enableNetworkCommand(int,boolean)
void enableAllNetworks(java.util.List)
boolean disableNetworkCommand(int)
boolean reassociate()
boolean reassociateCommand()
boolean addToBlacklist(java.lang.String)
boolean addToBlacklistCommand(java.lang.String)
boolean clearBlacklist()
boolean clearBlacklistCommand()
java.lang.String listNetworksCommand()
java.lang.String listNetworks()
java.lang.String getNetworkVariableCommand(int,java.lang.String)
java.lang.String getNetworkVariable(int,java.lang.String)
boolean setNetworkVariable(int,java.lang.String,java.lang.String)
boolean setNetworkVariableCommand(int,java.lang.String,java.lang.String)
java.lang.String statusCommand()
int getRssiApproxCommand()
int getLinkSpeedCommand()
boolean startDriverCommand()
boolean stopDriverCommand()
boolean startPacketFiltering()
boolean stopPacketFiltering()
int getPowerMode()
int getPowerModeCommand()
boolean setPowerModeCommand(int)
boolean setNumAllowedChannels(int)
boolean setNumAllowedChannelsCommand(int)
int getNumAllowedChannels()
int getNumAllowedChannelsCommand()
boolean setBluetoothCoexistenceMode(int)
boolean setBluetoothCoexistenceModeCommand(int)
boolean setBluetoothCoexistenceScanModeCommand(boolean)
boolean saveConfig()
boolean saveConfigCommand()
boolean reloadConfig()
boolean reloadConfigCommand()
int startUsingNetworkFeature(java.lang.String,int,int)
int stopUsingNetworkFeature(java.lang.String,int,int)
void interpretScanResultsAvailable()
java.lang.CharSequence getQuantityText(int,int)
java.lang.StringBuffer append(int)
java.lang.StringBuffer append(java.lang.Object)
java.lang.StringBuffer append(boolean)
int stringToIpAddr(java.lang.String)
android.net.wifi.WifiStateTracker$DhcpHandler access$000(android.net.wifi.WifiStateTracker)
android.os.PowerManager$WakeLock access$100(android.net.wifi.WifiStateTracker)
android.content.Context access$200(android.net.wifi.WifiStateTracker)
void access$300(android.net.wifi.WifiStateTracker,int)
java.lang.String access$400(android.net.wifi.WifiStateTracker)
android.net.DhcpInfo access$500(android.net.wifi.WifiStateTracker)
android.net.wifi.WifiInfo access$600(android.net.wifi.WifiStateTracker)
android.net.NetworkInfo access$700(android.net.wifi.WifiStateTracker)
android.os.Handler access$800(android.net.wifi.WifiStateTracker)
android.app.PendingIntent access$900(android.net.wifi.WifiStateTracker)
android.app.AlarmManager access$1000(android.net.wifi.WifiStateTracker)
android.content.Context access$1100(android.net.wifi.WifiStateTracker)
boolean access$1200(android.net.wifi.WifiStateTracker)
void access$1300(android.net.wifi.WifiStateTracker)
void access$1400(android.net.wifi.WifiStateTracker)
android.net.NetworkInfo access$1500(android.net.wifi.WifiStateTracker)
android.os.Handler access$1600(android.net.wifi.WifiStateTracker)
android.content.Context access$1700(android.net.wifi.WifiStateTracker)
boolean access$1802(android.net.wifi.WifiStateTracker,boolean)
boolean access$1800(android.net.wifi.WifiStateTracker)
void access$1900(android.net.wifi.WifiStateTracker)
android.content.Context access$2000(android.net.wifi.WifiStateTracker)
void <init>(java.lang.String,java.lang.String,java.lang.String,int,int)
android.net.wifi.ScanResult createFromParcel(android.os.Parcel)
android.net.wifi.ScanResult[] newArray(int)
android.net.wifi.SupplicantState valueOf(java.lang.String)
android.net.wifi.SupplicantState createFromParcel(android.os.Parcel)
android.net.wifi.SupplicantState[] newArray(int)
android.net.wifi.SupplicantState[] values()
boolean isValidState(android.net.wifi.SupplicantState)
java.util.List getConfiguredNetworks()
int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)
boolean pingSupplicant()
void startScan(boolean)
java.util.List getScanResults()
android.net.wifi.WifiInfo getConnectionInfo()
int getWifiEnabledState()
int[] getValidChannelCounts()
boolean saveConfiguration()
boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)
void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)
boolean releaseWifiLock(android.os.IBinder)
void initializeMulticastFiltering()
boolean isMulticastEnabled()
void acquireMulticastLock(android.os.IBinder,java.lang.String)
void releaseMulticastLock()
boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)
int getWifiApEnabledState()
android.net.wifi.WifiConfiguration getWifiApConfiguration()
void setWifiApConfiguration(android.net.wifi.WifiConfiguration)
void <init>(android.net.wifi.WifiManager,java.lang.String)
int access$000(android.net.wifi.WifiManager)
int access$008(android.net.wifi.WifiManager)
int access$010(android.net.wifi.WifiManager)
void <init>(android.net.wifi.WifiManager,java.lang.String,android.net.wifi.WifiManager$1)
void <init>(android.net.wifi.WifiConfiguration,java.lang.String,android.net.wifi.WifiConfiguration$1)
java.lang.String varName()
java.lang.String value()
java.util.BitSet readBitSet(android.os.Parcel)
int cardinality()
int nextSetBit(int)
void writeBitSet(android.os.Parcel,java.util.BitSet)
java.util.BitSet access$100(android.os.Parcel)
android.net.wifi.WifiConfiguration createFromParcel(android.os.Parcel)
android.net.wifi.WifiConfiguration[] newArray(int)
java.lang.String access$002(android.net.wifi.WifiInfo,java.lang.String)
java.lang.String access$102(android.net.wifi.WifiInfo,java.lang.String)
android.net.wifi.SupplicantState access$202(android.net.wifi.WifiInfo,android.net.wifi.SupplicantState)
android.net.wifi.WifiInfo createFromParcel(android.os.Parcel)
android.net.wifi.WifiInfo[] newArray(int)
java.lang.String getMacAddress()
int getNetworkId()
int getIpAddress()
boolean getHiddenSSID()
void setHiddenSSID(boolean)
void <init>(java.lang.Class)
java.lang.Object put(java.lang.Enum,java.lang.Object)
boolean shouldDisableCoexistenceMode()
boolean runDhcp(java.lang.String,android.net.DhcpInfo)
void setDhcpRenewalAlarm(long)
java.lang.String getDhcpError()
boolean runDhcpRenew(java.lang.String,android.net.DhcpInfo)
void <init>(android.net.wifi.WifiMonitor)
android.net.wifi.WifiStateTracker access$000(android.net.wifi.WifiMonitor)
java.lang.String waitForEvent()
void handlePasswordKeyMayBeIncorrect()
int access$100()
void handleSupplicantStateChange(java.lang.String)
void handleDriverEvent(java.lang.String)
int access$204(android.net.wifi.WifiMonitor)
void handleEvent(int,java.lang.String)
int access$202(android.net.wifi.WifiMonitor,int)
void access$400(android.net.wifi.WifiMonitor,android.net.NetworkInfo$DetailedState,java.lang.String)
android.net.NetworkStateTracker getNetworkStateTracker()
void handleNetworkStateChange(android.net.NetworkInfo$DetailedState,java.lang.String)
void nap(int)
void <init>(android.net.wifi.WifiConfiguration,java.lang.String)
int addNetwork(android.net.wifi.WifiConfiguration)
int updateNetwork(android.net.wifi.WifiConfiguration)
boolean startScan()
boolean isWifiEnabled()
int compareSignalLevel(int,int)
int getWifiApState()
boolean isWifiApEnabled()
boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)
void <init>(android.net.wifi.WifiManager,int,java.lang.String,android.net.wifi.WifiManager$1)
android.net.wifi.WifiManager$WifiLock createWifiLock(java.lang.String)
android.net.wifi.WifiManager$MulticastLock createMulticastLock(java.lang.String)
void <init>(android.net.wifi.WifiManager,int,java.lang.String)
void <init>(java.lang.String[],int)
java.lang.String get(int)
void <init>(int,android.net.SSLSessionCache,boolean)
javax.net.SocketFactory getDefault(int)
javax.net.ssl.SSLSocketFactory getDefault(int,android.net.SSLSessionCache)
javax.net.ssl.SSLSocketFactory getInsecure(int,android.net.SSLSessionCache)
void <init>(javax.net.ssl.SSLSocketFactory)
boolean isSslCheckRelaxed()
boolean verify(java.lang.String,javax.net.ssl.SSLSession)
void verifyHostname(java.net.Socket,java.lang.String)
int wtf(java.lang.String,java.lang.Throwable)
javax.net.SocketFactory getDefault()
javax.net.ssl.SSLSocketFactory makeSocketFactory(javax.net.ssl.TrustManager[])
javax.net.ssl.SSLSocketFactory getDelegate()
void setHandshakeTimeout(int)
java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)
java.net.Socket createSocket(java.net.InetAddress,int)
java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)
java.net.Socket createSocket(java.lang.String,int)
java.lang.String[] getSupportedCipherSuites()
java.lang.String[] getDefaultCipherSuites()
javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()
java.lang.String trimWhitespace(java.lang.String)
boolean characterIsLegal(char)
java.lang.String sanitize(java.lang.String)
void add(java.lang.String)
android.net.Uri$PathSegments build()
android.net.Uri createFromParcel(android.os.Parcel)
android.net.Uri[] newArray(int)
void implCreateIfNeeded()
android.net.LocalSocketAddress getLocalSocketAddress()
void setReceiveBufferSize(int)
int getReceiveBufferSize()
void setSendBufferSize(int)
int getSendBufferSize()
android.net.LocalSocketAddress getRemoteSocketAddress()
boolean isBound()
boolean isOutputShutdown()
boolean isInputShutdown()
void <init>(android.net.UrlQuerySanitizer,java.lang.String,java.lang.String)
int getThrottle(java.lang.String)
void writeTo(android.os.Parcel)
java.lang.String parseUserInfo()
android.net.Uri$Part getUserInfoPart()
java.lang.String getEncodedUserInfo()
java.lang.String getUserInfo()
java.lang.String parseHost()
int parsePort()
java.lang.String access$600()
int compareTo(android.net.Uri)
android.net.UrlQuerySanitizer$ValueSanitizer getUnregisteredParameterValueSanitizer()
void setUnregisteredParameterValueSanitizer(android.net.UrlQuerySanitizer$ValueSanitizer)
android.net.UrlQuerySanitizer$ValueSanitizer getAllIllegal()
android.net.UrlQuerySanitizer$ValueSanitizer getAllButNulLegal()
android.net.UrlQuerySanitizer$ValueSanitizer getAllButWhitespaceLegal()
android.net.UrlQuerySanitizer$ValueSanitizer getUrlLegal()
android.net.UrlQuerySanitizer$ValueSanitizer getUrlAndSpaceLegal()
android.net.UrlQuerySanitizer$ValueSanitizer getAmpLegal()
android.net.UrlQuerySanitizer$ValueSanitizer getAmpAndSpaceLegal()
android.net.UrlQuerySanitizer$ValueSanitizer getSpaceLegal()
android.net.UrlQuerySanitizer$ValueSanitizer getAllButNulAndAngleBracketsLegal()
void setAllowUnregisteredParamaters(boolean)
void parseUrl(java.lang.String)
void parseQuery(java.lang.String)
void parseEntry(java.lang.String,java.lang.String)
java.util.Set getParameterSet()
java.util.List getParameterList()
boolean hasParameter(java.lang.String)
java.lang.String getValue(java.lang.String)
void registerParameter(java.lang.String,android.net.UrlQuerySanitizer$ValueSanitizer)
void registerParameters(java.lang.String[],android.net.UrlQuerySanitizer$ValueSanitizer)
boolean getAllowUnregisteredParamaters()
void setPreferFirstRepeatedParameter(boolean)
boolean getPreferFirstRepeatedParameter()
java.lang.String unescape(java.lang.String)
android.net.UrlQuerySanitizer$ValueSanitizer getEffectiveValueSanitizer(java.lang.String)
void addSanitizedEntry(java.lang.String,java.lang.String)
android.net.UrlQuerySanitizer$ValueSanitizer getValueSanitizer(java.lang.String)
boolean isHexDigit(char)
int decodeHexDigit(char)
void setNetworkPreference(int)
int getNetworkPreference()
android.net.NetworkInfo getNetworkInfo(int)
android.net.NetworkInfo[] getAllNetworkInfo()
boolean setRadios(boolean)
boolean setRadio(int,boolean)
int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)
int stopUsingNetworkFeature(int,java.lang.String)
boolean requestRouteToHost(int,int)
boolean getBackgroundDataSetting()
void setBackgroundDataSetting(boolean)
void setMobileDataEnabled(boolean)
int tether(java.lang.String)
int untether(java.lang.String)
int getLastTetherError(java.lang.String)
boolean isTetheringSupported()
java.lang.String[] getTetherableIfaces()
java.lang.String[] getTetheredIfaces()
java.lang.String[] getTetheringErroredIfaces()
java.lang.String[] getTetherableUsbRegexs()
java.lang.String[] getTetherableWifiRegexs()
void reportInetCondition(int,int)
void putAddress(java.lang.StringBuffer,int)
android.net.Uri$Part fromDecoded(java.lang.String)
android.net.Uri$Builder opaquePart(java.lang.String)
android.net.Uri$Builder encodedOpaquePart(java.lang.String)
android.net.Uri$Builder encodedAuthority(java.lang.String)
android.net.Uri$PathPart fromDecoded(java.lang.String)
android.net.Uri$Builder path(java.lang.String)
android.net.Uri$Builder encodedPath(java.lang.String)
android.net.Uri$PathPart appendDecodedSegment(android.net.Uri$PathPart,java.lang.String)
android.net.Uri$PathPart appendEncodedSegment(android.net.Uri$PathPart,java.lang.String)
android.net.Uri$Builder encodedQuery(java.lang.String)
android.net.Uri$Builder encodedFragment(java.lang.String)
void <init>(java.lang.String,android.net.Uri$Part,android.net.Uri$Part,android.net.Uri$1)
boolean hasSchemeOrAuthority()
android.net.Uri$PathPart makeAbsolute(android.net.Uri$PathPart)
void <init>(java.lang.String,android.net.Uri$Part,android.net.Uri$PathPart,android.net.Uri$Part,android.net.Uri$Part,android.net.Uri$1)
boolean isStatusSuccess(int)
boolean isStatusCompleted(int)
int getStatusOfDownload(android.database.Cursor,long)
android.net.Uri$Part 'from'(java.lang.String,java.lang.String)
android.net.Uri$Part readFrom(android.os.Parcel)
android.net.Uri$Part nonNull(android.net.Uri$Part)
void <init>(java.lang.String,android.net.Uri$Part,android.net.Uri$Part)
java.util.List emptyList()
android.net.InterfaceConfiguration createFromParcel(android.os.Parcel)
android.net.InterfaceConfiguration[] newArray(int)
int lookupHost(java.lang.String)
int addHostRoute(java.lang.String,int)
void addPrivateDnsRoutes()
int removeHostRoutes(java.lang.String)
void removePrivateDnsRoutes()
int setDefaultRoute(java.lang.String,int)
void addDefaultRoute()
int removeDefaultRoute(java.lang.String)
void removeDefaultRoute()
void setBufferSize(java.lang.String)
void updateNetworkSettings()
void stringToFile(java.lang.String,java.lang.String)
void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)
java.lang.String getReason()
void setTeardownRequested(boolean)
boolean isTeardownRequested()
boolean isRoaming()
void setRoamingStatus(boolean)
int getSubtype()
void setSubtype(int,java.lang.String)
boolean requestRouteToHost(int)
android.net.Uri$PathPart 'from'(java.lang.String,java.lang.String)
android.net.Uri$PathPart readFrom(android.os.Parcel)
boolean isAbsolute()
java.util.List getQueryParameters(java.lang.String)
java.lang.String getQueryParameter(java.lang.String)
void writeToParcel(android.os.Parcel,android.net.Uri)
boolean isAllowed(char,java.lang.String)
java.lang.String toString(java.lang.String)
java.lang.String getNetworkTypeName()
java.lang.String networkTypeToApnType(int)
void <init>(android.content.Context,android.os.Handler,int,java.lang.String)
void <init>(android.net.MobileDataStateTracker,android.net.MobileDataStateTracker$1)
com.android.internal.telephony.Phone$DataState getMobileDataState(android.content.Intent)
boolean isApnTypeIncluded(java.lang.String)
void getPhoneService(boolean)
int setEnableApn(java.lang.String,boolean)
com.android.internal.telephony.Phone$DataState access$100(android.net.MobileDataStateTracker,android.content.Intent)
java.lang.String access$202(android.net.MobileDataStateTracker,java.lang.String)
boolean access$300(android.net.MobileDataStateTracker,java.lang.String)
boolean access$400(android.net.MobileDataStateTracker)
com.android.internal.telephony.Phone$DataState access$500(android.net.MobileDataStateTracker)
com.android.internal.telephony.Phone$DataState access$502(android.net.MobileDataStateTracker,com.android.internal.telephony.Phone$DataState)
boolean access$402(android.net.MobileDataStateTracker,boolean)
boolean access$600(android.net.MobileDataStateTracker)
java.lang.String access$700(android.net.MobileDataStateTracker)
android.net.LocalSocketAddress$Namespace[] values()
android.net.LocalSocketAddress$Namespace valueOf(java.lang.String)
boolean isNetworkTypeValid(int)
int startUsingNetworkFeature(int,java.lang.String)
android.database.Cursor getCurrentOtaDownloads(android.content.Context,java.lang.String)
android.net.Downloads$StatusInfo getStatus(android.content.Context,java.lang.String,long)
void removeAllDownloadsByPackage(android.content.Context,java.lang.String,java.lang.String)
int getProgressColumnId()
int getProgressColumnCurrentBytes()
int getProgressColumnTotalBytes()
android.database.Cursor getProgressCursor(android.content.Context,long)
void <init>(java.lang.String,android.net.Uri$Part,android.net.Uri$PathPart,android.net.Uri$Part,android.net.Uri$Part)
java.lang.String makeSchemeSpecificPart()
void appendSspTo(java.lang.StringBuilder)
java.lang.String makeUriString()
void <init>(byte[],int,java.net.InetAddress,int)
void writeTimeStamp(byte[],int,long)
void send(java.net.DatagramPacket)
void <init>(byte[],int)
void receive(java.net.DatagramPacket)
long readTimeStamp(byte[],int)
boolean requestTime(java.lang.String,int)
long getNtpTime()
long getNtpTimeReference()
long getRoundTripTime()
long read32(byte[],int)
android.net.NetworkInfo$State valueOf(java.lang.String)
android.net.NetworkInfo$State access$002(android.net.NetworkInfo,android.net.NetworkInfo$State)
android.net.NetworkInfo$DetailedState access$102(android.net.NetworkInfo,android.net.NetworkInfo$DetailedState)
boolean access$202(android.net.NetworkInfo,boolean)
boolean access$302(android.net.NetworkInfo,boolean)
boolean access$402(android.net.NetworkInfo,boolean)
java.lang.String access$502(android.net.NetworkInfo,java.lang.String)
java.lang.String access$602(android.net.NetworkInfo,java.lang.String)
android.net.NetworkInfo createFromParcel(android.os.Parcel)
android.net.NetworkInfo[] newArray(int)
int dup()
void add(int,int,java.lang.String,int,java.lang.String,int)
void add(android.net.rtp.AudioStream,android.net.rtp.AudioCodec,int)
void remove(android.net.rtp.AudioStream)
android.net.rtp.AudioCodec[] getCodecs()
android.net.rtp.AudioCodec getCodec(int,java.lang.String,java.lang.String)
int create(java.lang.String)
void <init>(java.net.InetAddress)
boolean isBusy()
void associate(java.net.InetAddress,int)
android.net.rtp.AudioGroup getGroup()
void join(android.net.rtp.AudioGroup)
android.net.rtp.AudioCodec getCodec()
void setCodec(android.net.rtp.AudioCodec)
int getDtmfType()
void setDtmfType(int)
java.lang.String getSubtypeName()
boolean isConnectedOrConnecting()
boolean isFailover()
void setFailover(boolean)
java.lang.String getExtraInfo()
boolean configureNative(java.lang.String,int,int,int,int,int)
int v4StringToInt(java.lang.String)
void <init>(android.net.sip.SipProfile$1)
java.lang.Object access$200(android.net.sip.SipProfile)
javax.sip.address.Address access$302(android.net.sip.SipProfile,javax.sip.address.Address)
void setUserPassword(java.lang.String)
int access$402(android.net.sip.SipProfile,int)
java.lang.String fix(java.lang.String)
javax.sip.address.URI createURI(java.lang.String)
java.lang.String access$502(android.net.sip.SipProfile,java.lang.String)
java.lang.String access$602(android.net.sip.SipProfile,java.lang.String)
android.net.sip.SipProfile$Builder setAuthUserName(java.lang.String)
java.lang.String access$702(android.net.sip.SipProfile,java.lang.String)
android.net.sip.SipProfile$Builder setProfileName(java.lang.String)
java.lang.String access$802(android.net.sip.SipProfile,java.lang.String)
android.net.sip.SipProfile$Builder setProtocol(java.lang.String)
android.net.sip.SipProfile$Builder setOutboundProxy(java.lang.String)
boolean access$902(android.net.sip.SipProfile,boolean)
android.net.sip.SipProfile$Builder setSendKeepAlive(boolean)
boolean access$1002(android.net.sip.SipProfile,boolean)
android.net.sip.SipProfile$Builder setAutoRegistration(boolean)
java.lang.String getUserPassword()
java.lang.String access$1102(android.net.sip.SipProfile,java.lang.String)
java.lang.String access$1202(android.net.sip.SipProfile,java.lang.String)
java.lang.String access$800(android.net.sip.SipProfile)
int access$400(android.net.sip.SipProfile)
javax.sip.address.Address createAddress(java.lang.String,javax.sip.address.URI)
android.net.sip.ISipSession asInterface(android.os.IBinder)
void onReadyToCall(android.net.sip.SipAudioCall)
void onCalling(android.net.sip.SipAudioCall)
void onRinging(android.net.sip.SipAudioCall,android.net.sip.SipProfile)
void onRingingBack(android.net.sip.SipAudioCall)
void <init>(android.net.sip.SipSession)
android.net.sip.SipSession$Listener access$000(android.net.sip.SipSession)
void onCalling(android.net.sip.SipSession)
void onRinging(android.net.sip.SipSession,android.net.sip.SipProfile,java.lang.String)
void onRingingBack(android.net.sip.SipSession)
void onCallEstablished(android.net.sip.SipSession,java.lang.String)
void onCallEnded(android.net.sip.SipSession)
void onCallBusy(android.net.sip.SipSession)
void onCallChangeFailed(android.net.sip.SipSession,int,java.lang.String)
void onError(android.net.sip.SipSession,int,java.lang.String)
void onRegistering(android.net.sip.SipSession)
void onRegistrationDone(android.net.sip.SipSession,int)
void onRegistrationFailed(android.net.sip.SipSession,int,java.lang.String)
void onRegistrationTimeout(android.net.sip.SipSession)
void <init>(android.net.sip.SipAudioCall)
android.net.sip.SipAudioCall$Listener access$100(android.net.sip.SipAudioCall)
android.net.sip.SipSession access$200(android.net.sip.SipAudioCall)
boolean access$300(android.net.sip.SipAudioCall)
android.net.sip.SimpleSessionDescription access$400(android.net.sip.SipAudioCall,java.lang.String)
java.lang.String encode()
java.lang.String access$502(android.net.sip.SipAudioCall,java.lang.String)
java.lang.String access$500(android.net.sip.SipAudioCall)
boolean access$600(android.net.sip.SipAudioCall)
void access$700(android.net.sip.SipAudioCall,boolean)
int access$802(android.net.sip.SipAudioCall,int)
java.lang.String access$902(android.net.sip.SipAudioCall,java.lang.String)
int access$800(android.net.sip.SipAudioCall)
void access$1000(android.net.sip.SipAudioCall,int,java.lang.String)
void access$000(android.net.sip.SimpleSessionDescription$Fields,java.lang.String)
void <init>(long,java.lang.String)
java.lang.String replaceAll(java.lang.String,java.lang.String)
android.net.sip.SimpleSessionDescription$Media newMedia(java.lang.String,int,int,java.lang.String)
void setFormat(java.lang.String,java.lang.String)
void <init>(java.lang.String,int,int,java.lang.String,android.net.sip.SimpleSessionDescription$1)
android.net.sip.SimpleSessionDescription$Media[] getMedia()
void access$200(android.net.sip.SimpleSessionDescription$Fields,java.lang.StringBuilder)
void access$300(android.net.sip.SimpleSessionDescription$Media,java.lang.StringBuilder)
void setAddress(java.lang.String)
java.lang.String getEncryptionMethod()
java.lang.String getEncryptionKey()
void setEncryption(java.lang.String,java.lang.String)
java.lang.String[] getBandwidthTypes()
int getBandwidth(java.lang.String)
void setBandwidth(java.lang.String,int)
java.lang.String[] getAttributeNames()
java.lang.String getAttribute(java.lang.String)
void setAttribute(java.lang.String,java.lang.String)
void <init>(android.os.Parcel,android.net.sip.SipProfile$1)
android.net.sip.SipProfile createFromParcel(android.os.Parcel)
android.net.sip.SipProfile[] newArray(int)
android.net.sip.ISipService asInterface(android.os.IBinder)
android.net.sip.ISipSessionListener asInterface(android.os.IBinder)
void <init>(android.content.Context,android.net.sip.SipProfile)
void setListener(android.net.sip.SipAudioCall$Listener,boolean)
void stopCall(boolean)
void setListener(android.net.sip.SipSession$Listener)
android.net.sip.SipSession getSipSession()
android.net.sip.SipSession$Listener createListener()
boolean isVoipSupported(android.content.Context)
void throwSipException(java.lang.Throwable)
void attachCall(android.net.sip.SipSession,java.lang.String)
android.net.sip.SimpleSessionDescription createOffer()
void makeCall(android.net.sip.SipProfile,android.net.sip.SipSession,int)
android.net.sip.SimpleSessionDescription createHoldOffer()
android.net.sip.SimpleSessionDescription createAnswer(java.lang.String)
android.net.sip.SimpleSessionDescription createContinueOffer()
void setRtpPayload(int,java.lang.String,java.lang.String)
int[] getRtpPayloadTypes()
java.lang.String getRtpmap(int)
java.lang.String getFmtp(int)
java.lang.String[] getFormats()
void grabWifiHighPerfLock()
void releaseWifiHighPerfLock()
boolean isWifiOn()
void setSpeakerphoneOn(boolean)
void setSpeakerMode(boolean)
void sendDtmf(int,android.os.Message)
android.net.rtp.AudioStream getAudioStream()
void startAudioInternal()
android.net.sip.SipProfile getPeerProfile(android.net.sip.SipSession)
java.lang.String get(java.lang.String,char)
void set(java.lang.String,char,java.lang.String)
java.lang.String[] cut(java.lang.String,char)
void write(java.lang.StringBuilder)
void parse(java.lang.String)
int find(java.lang.String,char)
java.lang.String access$400(android.net.sip.SimpleSessionDescription$Fields,java.lang.String,char)
void access$500(android.net.sip.SimpleSessionDescription$Fields,java.lang.String,char,java.lang.String)
java.lang.String getProfileName()
java.lang.Object readResolve()
android.net.sip.ISipSessionListener createListener()
void <init>(android.net.sip.ISipSession)
void <init>(android.net.sip.ISipSession,android.net.sip.SipSession$Listener)
android.net.sip.ISipSession getRealSession()
void <init>(android.net.sip.SipRegistrationListener,java.lang.String)
java.lang.String getUri(android.net.sip.ISipSession)
void onRegistering(java.lang.String)
void onRegistrationDone(java.lang.String,long)
void onRegistrationFailed(java.lang.String,int,java.lang.String)
void createSipService()
android.net.sip.ISipSessionListener createRelay(android.net.sip.SipRegistrationListener,java.lang.String)
void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)
void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)
android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)
android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)
java.lang.String getCallId(android.content.Intent)
java.lang.String getOfferSessionDescription(android.content.Intent)
android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)
boolean isIncomingCallIntent(android.content.Intent)
void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)
void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)
android.net.sip.SipSession getSessionFor(android.content.Intent)
void <init>(java.lang.String,int,int,java.lang.String)
int getPortCount()
java.lang.String getFmtp(java.lang.String)
void removeFormat(java.lang.String)
void removeRtpPayload(int)
void <init>(android.net.MobileDataStateTracker)
boolean isNetworkRoaming()
boolean connect(android.net.vpn.VpnProfile,java.lang.String,java.lang.String)
void checkStatus(android.net.vpn.VpnProfile)
android.net.vpn.VpnType[] values()
android.net.vpn.VpnType valueOf(java.lang.String)
void <init>(java.lang.String,int,java.lang.String,int,java.lang.Class)
int getDescriptionId()
java.lang.Class getProfileClass()
android.net.vpn.VpnType getType()
void setEncryptionEnabled(boolean)
boolean isEncryptionEnabled()
java.lang.String getProfilePath()
android.net.vpn.VpnType[] getSupportedVpnTypes()
android.net.vpn.VpnProfile createVpnProfile(android.net.vpn.VpnType,boolean)
android.net.vpn.VpnProfile createVpnProfile(android.net.vpn.VpnType)
void setCustomized(boolean)
void startVpnService()
void stopVpnService()
boolean bindVpnService(android.content.ServiceConnection)
void broadcastConnectivity(java.lang.String,android.net.vpn.VpnState,int)
void broadcastConnectivity(java.lang.String,android.net.vpn.VpnState)
void registerConnectivityReceiver(android.content.BroadcastReceiver)
void unregisterConnectivityReceiver(android.content.BroadcastReceiver)
void startSettingsActivity()
android.content.Intent createSettingsActivityIntent()
java.lang.Package getPackage()
void setSecretEnabled(boolean)
boolean isSecretEnabled()
void setSecretString(java.lang.String)
java.lang.String getSecretString()
void setId(java.lang.String)
void setServerName(java.lang.String)
java.lang.String getServerName()
void setDomainSuffices(java.lang.String)
java.lang.String getDomainSuffices()
void setRouteList(java.lang.String)
java.lang.String getRouteList()
void setSavedUsername(java.lang.String)
java.lang.String getSavedUsername()
void setState(android.net.vpn.VpnState)
android.net.vpn.VpnState getState()
boolean isCustomized()
void setPresharedKey(java.lang.String)
java.lang.String getPresharedKey()
android.net.vpn.VpnState[] values()
android.net.vpn.VpnState valueOf(java.lang.String)
android.net.vpn.VpnProfile createFromParcel(android.os.Parcel)
android.net.vpn.VpnProfile[] newArray(int)
android.net.vpn.IVpnService asInterface(android.os.IBinder)
void setCaCertificate(java.lang.String)
java.lang.String getCaCertificate()
void setUserCertificate(java.lang.String)
java.lang.String getUserCertificate()
android.net.NetworkInfo$State[] values()
long startDownloadByUri(android.content.Context,java.lang.String,java.lang.String,boolean,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
boolean isMailTo(java.lang.String)
java.lang.String getTo()
android.net.MailTo parse(java.lang.String)
java.lang.String getCc()
java.lang.String getSubject()
java.lang.String getBody()
boolean isComplete()
android.net.DhcpInfo createFromParcel(android.os.Parcel)
android.net.DhcpInfo[] newArray(int)
void update(byte[])
byte[] digest()
android.security.SystemKeyStore getInstance()
byte[] generateNewKey(int,java.lang.String,java.lang.String)
java.lang.String generateNewKeyHexString(int,java.lang.String,java.lang.String)
java.io.File getKeyFile(java.lang.String)
javax.crypto.KeyGenerator getInstance(java.lang.String)
void init(int,java.security.SecureRandom)
javax.crypto.SecretKey generateKey()
byte[] retrieveKey(java.lang.String)
java.lang.String retrieveKeyHexString(java.lang.String)
byte[] readFullyAndClose(java.io.InputStream)
void deleteKey(java.lang.String)
void unlock(android.content.Context)
android.content.Intent createInstallIntent()
void installFromSdCard(android.content.Context)
android.security.KeyStore getInstance()
java.util.ArrayList execute(int,byte[][])
int test()
byte[] get(byte[])
boolean put(byte[],byte[])
boolean put(java.lang.String,java.lang.String)
boolean delete(byte[])
boolean delete(java.lang.String)
boolean contains(byte[])
byte[][] saw(byte[])
java.lang.String[] saw(java.lang.String)
boolean password(byte[],byte[])
boolean password(java.lang.String,java.lang.String)
boolean password(byte[])
boolean password(java.lang.String)
boolean lock()
boolean unlock(byte[])
boolean unlock(java.lang.String)
int getLastError()
boolean hasWindow()
void setWindow(android.database.CursorWindow)
void createAndRegisterObserverProxy(android.database.IContentObserver)
void <init>(android.database.Cursor,android.database.IContentObserver,java.lang.String,boolean,android.database.CursorWindow)
int getStartPosition()
int getNumRows()
android.database.CursorWindow getWindow()
android.database.CursorWindow getWindow(int)
void onMove(int)
void maybeUnregisterObserverProxy()
int requery(android.database.IContentObserver,android.database.CursorWindow)
boolean getWantsAllOnMoveCalls()
void <init>(android.database.IContentObserver,android.os.IBinder$DeathRecipient)
boolean unlinkToDeath(android.os.IBinder$DeathRecipient)
boolean updateRows(java.util.Map)
boolean commitUpdates(java.util.Map)
boolean deleteRow(int)
android.os.Bundle respond(android.os.Bundle)
int findRowIdColumnIndex(java.lang.String[])
void set(android.database.IBulkCursor)
void set(android.database.IBulkCursor,int,int)
void <init>(android.database.AbstractCursor)
android.database.IContentObserver getContentObserver()
android.database.IContentObserver getObserver()
boolean supportsUpdates()
android.database.IBulkCursor asInterface(android.os.IBinder)
android.database.IContentObserver asInterface(android.os.IBinder)
void writeExceptionToParcel(android.os.Parcel,java.lang.Exception)
int[] buildColumnIndiciesArray(android.database.Cursor,java.lang.String[])
void <init>(android.database.Cursor,java.lang.String[],android.database.Cursor,java.lang.String[])
boolean isLast()
void incrementCursors()
void populateValues(java.lang.String[],android.database.Cursor,int[],int)
int compareStrings(java.lang.String[])
android.database.CursorJoiner$Result next()
void abortUpdates()
void copyStringToBuffer(int,android.database.CharArrayBuffer)
boolean hasUpdates()
boolean isBeforeFirst()
boolean isFirst()
boolean moveToLast()
boolean move(int)
boolean moveToPrevious()
void setNotificationUri(android.content.ContentResolver,android.net.Uri)
boolean updateDouble(int,double)
boolean updateFloat(int,float)
boolean updateInt(int,int)
boolean updateLong(int,long)
boolean updateShort(int,short)
boolean updateString(int,java.lang.String)
boolean updateBlob(int,byte[])
boolean updateToNull(int)
void native_init(boolean)
int getNumRows_native()
boolean setNumColumns_native(int)
boolean allocRow_native()
void freeLastRow_native()
boolean putBlob_native(byte[],int,int)
boolean putString_native(java.lang.String,int,int)
boolean putLong_native(long,int,int)
boolean putLong(long,int,int)
boolean putDouble_native(double,int,int)
boolean putDouble(double,int,int)
boolean putNull_native(int,int)
boolean isNull_native(int,int)
boolean isNull(int,int)
byte[] getBlob_native(int,int)
byte[] getBlob(int,int)
boolean isBlob_native(int,int)
boolean isBlob(int,int)
boolean isInteger_native(int,int)
boolean isLong(int,int)
boolean isFloat_native(int,int)
boolean isFloat(int,int)
boolean isString_native(int,int)
boolean isString(int,int)
java.lang.String getString_native(int,int)
java.lang.String getString(int,int)
char[] copyStringToBuffer_native(int,int,int,android.database.CharArrayBuffer)
void copyStringToBuffer(int,int,android.database.CharArrayBuffer)
long getLong_native(int,int)
long getLong(int,int)
double getDouble_native(int,int)
double getDouble(int,int)
short getShort(int,int)
float getFloat(int,int)
void native_clear()
void close_native()
android.database.CursorWindow newFromParcel(android.os.Parcel)
android.os.IBinder native_getBinder()
void native_init(android.os.IBinder)
void onAllReferencesReleased()
void <init>(android.os.Parcel,android.database.CursorWindow$1)
android.database.CursorJoiner$Result[] values()
android.database.CursorJoiner$Result valueOf(java.lang.String)
void <init>(android.database.ContentObserver,boolean)
void readExceptionFromParcel(android.os.Parcel)
void buildSQL()
android.database.sqlite.SQLiteStatement getStatement(boolean)
java.util.Set valueSet()
void bindObjectToProgram(android.database.sqlite.SQLiteProgram,int,java.lang.Object)
long executeInsert()
long insertInternal(android.content.ContentValues,boolean)
void bindDouble(int,double)
void bind(int,double)
void bind(int,float)
void bindLong(int,long)
void bind(int,boolean)
void bindNull(int)
void bindBlob(int,byte[])
void bind(int,byte[])
long insert(android.content.ContentValues)
void prepareForReplace()
long replace(android.content.ContentValues)
void <init>(android.database.ContentObserver)
void releaseContentObserver()
android.database.IContentObserver releaseContentObserver()
void dispatchChange(boolean)
void <init>(android.database.MatrixCursor,int,int)
java.lang.Object[] access$000(android.database.MatrixCursor)
android.database.MatrixCursor$RowBuilder add(java.lang.Object)
void checkPosition()
boolean isFieldUpdated(int)
java.lang.Object getUpdatedField(int)
boolean isBlob(int)
boolean isString(int)
boolean isLong(int)
boolean isFloat(int)
void deactivateInternal()
void unregisterAll()
boolean update(int,java.lang.Object)
void registerObserver(android.database.ContentObserver)
void notifyDataSetChange()
android.database.DataSetObservable getDataSetObservable()
void notifyChange(android.net.Uri,android.database.ContentObserver)
void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,int,java.lang.String[])
void logTimeStat(java.lang.String,long,java.lang.String)
int native_fill_window(android.database.CursorWindow,int,int,int,int)
void logTimeStat(java.lang.String,long)
int fillWindow(android.database.CursorWindow,int,int)
void onCorruption()
int native_column_count()
int columnCountLocked()
java.lang.String native_column_name(int)
java.lang.String columnNameLocked(int)
void requery()
android.database.sqlite.SQLiteDatabase$ActiveDatabases getInstance()
java.util.HashSet access$000(android.database.sqlite.SQLiteDatabase$ActiveDatabases)
void addSQLiteClosable(android.database.sqlite.SQLiteClosable)
android.database.sqlite.SQLiteCompiledSql getCompiledStatementForSql(java.lang.String)
boolean acquire()
void addToCompiledQueries(java.lang.String,android.database.sqlite.SQLiteCompiledSql)
void releaseCompiledSqlIfNotInCache()
void removeSQLiteClosable(android.database.sqlite.SQLiteClosable)
void onAllReferencesReleasedFromContainer()
boolean containsValue(java.lang.Object)
void releaseSqlStatement()
int getUniqueId()
java.lang.String getSqlString()
void compile(java.lang.String,boolean)
void native_bind_null(int)
void native_bind_long(int,long)
void native_bind_double(int,double)
void native_bind_string(int,java.lang.String)
void native_bind_blob(int,byte[])
void native_clear_bindings()
java.lang.String getTime()
void dbclose()
int getHoldCount()
void lockForced()
void checkLockHoldTime()
void unlockForced()
void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)
void onBegin()
boolean isHeldByCurrentThread()
void onCommit()
void onRollback()
boolean inTransaction()
boolean isDbLockedByCurrentThread()
boolean isLocked()
boolean isDbLockedByOtherThreads()
boolean yieldIfContendedHelper(boolean,long)
boolean yieldIfContended()
boolean yieldIfContendedSafely()
boolean yieldIfContendedSafely(long)
int getQueueLength()
java.util.Map getSyncedTables()
void <init>(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)
void enableSqlTracing(java.lang.String)
void enableSqlProfiling(java.lang.String)
android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)
android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)
android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)
void closeClosable()
void deallocCachedSqlStatements()
long simpleQueryForLong()
long getPageSize()
long getMaximumSize()
long setMaximumSize(long)
void setPageSize(long)
void markTableSyncable(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
void markTableSyncable(java.lang.String,java.lang.String)
void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)
void native_execSQL(java.lang.String)
void rowUpdated(java.lang.String,long)
java.lang.String findEditTable(java.lang.String)
android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)
android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)
java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)
void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)
android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String[])
java.lang.String join(java.lang.CharSequence,java.lang.Object[])
void setLoadStyle(int,int)
android.database.Cursor rawQuery(java.lang.String,java.lang.String[],int,int)
long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)
long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)
long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)
long lastInsertRow()
int lastChangeCount()
int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)
void dbopen(java.lang.String,int)
void setLocale(java.util.Locale)
java.lang.String format(java.lang.Object)
boolean isReadOnly()
boolean needUpgrade(int)
java.lang.String getPathForLogs()
java.lang.String replaceAll(java.lang.String)
void native_setLocale(java.lang.String,int)
boolean isInCompiledSqlCache(java.lang.String)
void purgeFromCompiledSqlCache(java.lang.String)
void resetCompiledSqlCache()
int getMaxSqlCacheSize()
void setMaxSqlCacheSize(int)
int native_getDbLookaside()
int lastIndexOf(java.lang.String)
java.util.ArrayList getAttachedDbs(android.database.sqlite.SQLiteDatabase)
long getPragmaVal(android.database.sqlite.SQLiteDatabase,java.lang.String)
void <init>(java.lang.String,long,long,int)
java.util.ArrayList getDbStats()
void <init>(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)
android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)
void cursorClosed()
void setBindArguments(java.lang.String[])
void cursorDeactivated()
void cursorRequeried(android.database.Cursor)
void getPagerStats(android.database.sqlite.SQLiteDebug$PagerStats)
int getNumActiveCursorsFinalized()
void notifyActiveCursorFinalized()
android.os.MemoryFile simpleQueryForBlobMemoryFile(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])
android.content.res.AssetFileDescriptor fromMemoryFile(android.os.MemoryFile)
android.content.res.AssetFileDescriptor getBlobColumnAsAssetFile(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])
void <init>(android.database.sqlite.SQLiteCursor)
void access$700(android.database.sqlite.SQLiteCursor)
java.lang.String getObjInfo()
void releaseReferenceFromContainer()
void <init>(android.database.sqlite.SQLiteCursor,int)
boolean access$002(android.database.sqlite.SQLiteCursor,boolean)
void sendMessage()
android.database.CursorWindow access$100(android.database.sqlite.SQLiteCursor)
java.util.concurrent.locks.ReentrantLock access$200(android.database.sqlite.SQLiteCursor)
int access$300(android.database.sqlite.SQLiteCursor)
android.database.sqlite.SQLiteQuery access$600(android.database.sqlite.SQLiteCursor)
int access$400(android.database.sqlite.SQLiteCursor)
int access$500(android.database.sqlite.SQLiteCursor)
int access$512(android.database.sqlite.SQLiteCursor,int)
int access$502(android.database.sqlite.SQLiteCursor,int)
void queryThreadLock()
void queryThreadUnlock()
android.database.sqlite.SQLiteDatabase getDatabase()
void fillWindow(int)
void deactivateCommon()
void setSelectionArguments(java.lang.String[])
void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)
void onCreate(android.database.sqlite.SQLiteDatabase)
void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)
void onOpen(android.database.sqlite.SQLiteDatabase)
android.database.sqlite.SQLiteDatabase getWritableDatabase()
android.database.sqlite.SQLiteDatabase getReadableDatabase()
void setDistinct(boolean)
java.lang.String getTables()
void setTables(java.lang.String)
void appendWhere(java.lang.CharSequence)
void appendWhereEscapeString(java.lang.String)
void setProjectionMap(java.util.Map)
void setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)
void setStrictProjectionMap(boolean)
void appendColumns(java.lang.StringBuilder,java.lang.String[])
void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)
void appendClauseEscapeClause(java.lang.StringBuilder,java.lang.String,java.lang.String)
android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)
android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)
java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)
java.lang.String[] computeProjection(java.lang.String[])
java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.lang.String)
java.lang.String buildUnionQuery(java.lang.String[],java.lang.String,java.lang.String)
void native_compile(java.lang.String)
void native_execute()
long native_1x1_long()
java.lang.String native_1x1_string()
java.lang.String simpleQueryForString()
void <init>(android.database.MergeCursor)
void <init>(android.database.Cursor[])
int readExceptionCode()
void readExceptionFromParcel(android.os.Parcel,java.lang.String,int)
void readExceptionWithFileNotFoundExceptionFromParcel(android.os.Parcel)
void readExceptionWithOperationApplicationExceptionFromParcel(android.os.Parcel)
void readException(int,java.lang.String)
java.lang.String sqlEscapeString(java.lang.String)
void appendValueToSql(java.lang.StringBuilder,java.lang.Object)
java.lang.String concatenateWhere(java.lang.String,java.lang.String)
byte[] getCollationKeyInBytes(java.lang.String)
int getKeyLen(byte[])
java.lang.String getCollationKey(java.lang.String)
char[] encodeHex(byte[])
java.lang.String getHexCollationKey(java.lang.String)
java.text.CollationKey getCollationKey(java.lang.String)
void dumpCursor(android.database.Cursor,java.io.PrintStream)
void dumpCursor(android.database.Cursor)
void dumpCurrentRow(android.database.Cursor,java.io.PrintStream)
void dumpCurrentRow(android.database.Cursor,java.lang.StringBuilder)
void dumpCursor(android.database.Cursor,java.lang.StringBuilder)
java.lang.String dumpCursorToString(android.database.Cursor)
void dumpCurrentRow(android.database.Cursor)
java.lang.String dumpCurrentRowToString(android.database.Cursor)
void cursorStringToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)
void cursorStringToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)
void cursorStringToInsertHelper(android.database.Cursor,java.lang.String,android.database.DatabaseUtils$InsertHelper,int)
void cursorIntToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)
void cursorIntToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)
void cursorLongToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)
void cursorLongToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues)
void cursorDoubleToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)
void cursorDoubleToCursorValues(android.database.Cursor,java.lang.String,android.content.ContentValues)
void put(java.lang.String,java.lang.Double)
void put(java.lang.String,byte[])
void cursorRowToContentValues(android.database.Cursor,android.content.ContentValues)
long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String)
long longForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])
java.lang.String stringForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])
java.lang.String stringForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])
void cursorStringToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)
void cursorLongToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)
void put(java.lang.String,java.lang.Short)
void cursorShortToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)
void cursorIntToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)
void put(java.lang.String,java.lang.Float)
void cursorFloatToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)
void cursorDoubleToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)
java.lang.String[] split(java.lang.String,java.lang.String)
void createDbFromSqlStatements(android.content.Context,java.lang.String,int,java.lang.String)
void notifyChange(boolean)
void ensureCapacity(int)
android.database.MatrixCursor$RowBuilder newRow()
void addRow(java.lang.Object[])
void addRow(java.util.ArrayList,int)
void addRow(java.lang.Iterable)
short parseShort(java.lang.String)
android.database.CursorWindow createFromParcel(android.os.Parcel)
android.database.CursorWindow[] newArray(int)
void <init>(java.lang.String,android.pim.ICalendar$Component)
android.pim.ICalendar$Component getParent()
java.util.LinkedList getOrCreateChildren()
void addChild(android.pim.ICalendar$Component)
java.util.List getComponents()
void addProperty(android.pim.ICalendar$Property)
java.util.Set getPropertyNames()
java.util.List getProperties(java.lang.String)
android.pim.ICalendar$Property getFirstProperty(java.lang.String)
void toString(java.lang.StringBuilder)
void <init>(android.pim.ContactsAsyncHelper$1)
boolean isDifferentImageRequest(com.android.internal.telephony.CallerInfo)
boolean isDifferentImageRequest(com.android.internal.telephony.Connection)
void setPhotoRequest(com.android.internal.telephony.CallerInfo)
android.net.Uri getPhotoUri()
void setPhotoState(int)
int getPhotoState()
java.lang.String normalizeText(java.lang.String)
void <init>(android.pim.ICalendar$1)
android.pim.ICalendar$Component parseLine(java.lang.String,android.pim.ICalendar$ParserState,android.pim.ICalendar$Component)
android.pim.ICalendar$Component parseComponentImpl(android.pim.ICalendar$Component,java.lang.String)
java.lang.String extractValue(android.pim.ICalendar$ParserState)
android.pim.ICalendar$Parameter extractParameter(android.pim.ICalendar$ParserState)
void addParameter(android.pim.ICalendar$Parameter)
android.pim.ICalendar$Component parseComponent(android.pim.ICalendar$Component,java.lang.String)
android.pim.ICalendar$Component parseCalendar(java.lang.String)
android.pim.ICalendar$Component parseEvent(java.lang.String)
android.pim.ICalendar$Component parseComponent(java.lang.String)
void setStartDate(android.text.format.Time)
int calendarDay2Day(int)
int timeDay2Day(int)
int day2TimeDay(int)
int day2CalendarDay(int)
java.lang.String day2String(int)
void appendNumbers(java.lang.StringBuilder,java.lang.String,int,int[])
void appendByDay(java.lang.StringBuilder,int)
boolean repeatsOnEveryWeekDay()
boolean repeatsMonthlyOnDayCount()
void <init>(android.pim.ContactsAsyncHelper,android.os.Looper)
void updateImageViewWithContactPhotoAsync(com.android.internal.telephony.CallerInfo,int,android.pim.ContactsAsyncHelper$OnImageLoadCompleteListener,java.lang.Object,android.content.Context,android.widget.ImageView,android.net.Uri,int)
void updateImageViewWithContactPhotoAsync(android.content.Context,android.widget.ImageView,android.net.Uri,int)
void updateImageViewWithContactPhotoAsync(com.android.internal.telephony.CallerInfo,android.content.Context,android.widget.ImageView,android.net.Uri,int)
void onImageLoadComplete(int,java.lang.Object,android.widget.ImageView,boolean)
java.io.InputStream openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)
java.lang.String getVersionString()
java.lang.String getLine()
java.lang.String getNonEmptyLine()
boolean readBeginVCard(boolean)
void readEndVCard(boolean,boolean)
void handleParams(java.lang.String)
void handleAnyParam(java.lang.String,java.lang.String)
void propertyParamType(java.lang.String)
void splitAndPutParamValue(java.lang.String)
void handleType(java.lang.String)
void handleParamWithoutName(java.lang.String)
void propertyParamValue(java.lang.String)
void handleAgent(java.lang.String)
java.lang.String getBase64(java.lang.String)
java.lang.String unescapeText(java.lang.String)
java.lang.String maybeUnescapeText(java.lang.String)
java.lang.String unescapeCharacter(char)
java.lang.String maybeUnescapeCharacter(char)
java.util.Set getKnownPropertyNameSet()
void <init>(android.content.Context,int,java.lang.String,boolean)
void <init>(android.content.Context,int,java.lang.String)
void <init>(android.content.Context,int,boolean)
boolean isDoCoMo(int)
boolean isVersion30(int)
void addHandler(android.pim.vcard.VCardComposer$OneEntryHandler)
boolean init(java.lang.String,java.lang.String[])
boolean init()
boolean init(android.net.Uri,java.lang.String,java.lang.String[],java.lang.String)
boolean onInit(android.content.Context)
boolean createOneEntry(java.lang.reflect.Method)
boolean createOneEntry()
java.lang.String createOneEntryInternal(java.lang.String,java.lang.reflect.Method)
boolean onEntryCreated(java.lang.String)
android.content.EntityIterator newEntityIterator(android.database.Cursor)
java.util.ArrayList getSubValues()
java.lang.String buildVCard(java.util.Map)
android.pim.vcard.VCardBuilder appendNameProperties(java.util.List)
android.pim.vcard.VCardBuilder appendNickNames(java.util.List)
android.pim.vcard.VCardBuilder appendPhones(java.util.List)
android.pim.vcard.VCardBuilder appendEmails(java.util.List)
android.pim.vcard.VCardBuilder appendPostals(java.util.List)
android.pim.vcard.VCardBuilder appendOrganizations(java.util.List)
android.pim.vcard.VCardBuilder appendWebsites(java.util.List)
android.pim.vcard.VCardBuilder appendPhotos(java.util.List)
android.pim.vcard.VCardBuilder appendNotes(java.util.List)
android.pim.vcard.VCardBuilder appendEvents(java.util.List)
android.pim.vcard.VCardBuilder appendIms(java.util.List)
android.pim.vcard.VCardBuilder appendRelation(java.util.List)
java.lang.String getErrorReason()
java.lang.String access$000(android.pim.vcard.VCardComposer)
java.lang.String access$102(android.pim.vcard.VCardComposer,java.lang.String)
boolean access$200(android.pim.vcard.VCardComposer)
java.lang.String access$300(android.pim.vcard.VCardComposer,java.lang.String,java.lang.reflect.Method)
void setPropertyName(java.lang.String)
void addParameter(java.lang.String,java.lang.String)
void addToPropertyValueList(java.lang.String)
void setPropertyBytes(byte[])
java.util.Collection getParameters(java.lang.String)
java.util.List getPropertyValueList()
java.lang.String access$000(android.pim.vcard.VCardEntry$Property)
java.util.Map access$100(android.pim.vcard.VCardEntry$Property)
java.util.List access$200(android.pim.vcard.VCardEntry$Property)
byte[] access$300(android.pim.vcard.VCardEntry$Property)
java.lang.String tryGetHalfWidthText(char)
void parse(java.io.InputStream,android.pim.vcard.VCardInterpreter)
void <init>(int,java.lang.String,byte[],boolean)
boolean parseOneVCard(boolean)
void parseVCardFile()
boolean isValidPropertyName(java.lang.String)
java.lang.String peekLine()
void startEntry()
void parseItems()
void endEntry()
void startProperty()
boolean parseItem()
void endProperty()
java.lang.String[] separateLineAndHandleGroup(java.lang.String)
void handleMultiplePropertyValue(java.lang.String,java.lang.String)
void handlePropertyValue(java.lang.String,java.lang.String)
void propertyName(java.lang.String)
void propertyGroup(java.lang.String)
void handleValue(java.lang.String)
void handleEncoding(java.lang.String)
void handleCharset(java.lang.String)
void handleLanguage(java.lang.String)
java.util.Set getKnownTypeSet()
java.util.Set getKnownValueSet()
java.util.Set getAvailableEncodingSet()
boolean isAsciiLetter(char)
java.lang.String getQuotedPrintable(java.lang.String)
void propertyValues(java.util.List)
java.util.List constructListFromValue(java.lang.String,int)
long getTotalmillisecond()
void showPerformanceInfo()
java.lang.String getDefaultEncoding()
void <init>(java.io.InputStream,java.lang.String)
void <init>(android.pim.vcard.VCardParserImpl_V21$1)
boolean showPerformanceLog()
void <init>(int,android.accounts.Account)
boolean refrainPhoneNumberFormatting(int)
int getPhoneNumberFormat(int)
java.lang.String formatNumber(java.lang.String,int)
void <init>(int,java.lang.String,java.lang.String,boolean)
void addPhone(int,java.lang.String,java.lang.String,boolean)
void addNickName(java.lang.String)
void addEmail(int,java.lang.String,java.lang.String,boolean)
void <init>(int,java.util.List,java.lang.String,boolean)
void addPostal(int,java.util.List,java.lang.String,boolean)
void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
void addNewOrganization(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
java.lang.String toString(java.lang.Object[])
java.lang.String buildSinglePhoneticNameFromSortAsParam(java.util.Map)
void handleOrgValue(int,java.util.List,java.util.Map,boolean)
void handleTitleValue(java.lang.String)
void <init>(int,java.lang.String,int,java.lang.String,boolean)
void addIm(int,java.lang.String,int,java.lang.String,boolean)
void addNote(java.lang.String)
void addPhotoBytes(java.lang.String,byte[],boolean)
void tryHandleSortAsName(java.util.Map)
void handleNProperty(java.util.List,java.util.Map)
void handlePhoneticNameFromSound(java.util.List)
java.lang.String listToString(java.util.List)
java.lang.Object getPhoneTypeFromStrings(java.util.Collection,java.lang.String)
void handleAndroidCustomProperty(java.util.List)
void addProperty(android.pim.vcard.VCardEntry$Property)
java.lang.String constructNameFromElements(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
java.lang.String constructNameFromElements(int,java.lang.String,java.lang.String,java.lang.String)
java.lang.String getFormattedAddress(int)
java.lang.String getFormattedString()
void constructDisplayName()
void consolidateFields()
android.content.ContentProviderOperation$Builder newInsert(android.net.Uri)
android.content.ContentProviderOperation$Builder withValue(java.lang.String,java.lang.Object)
android.content.ContentProviderOperation build()
boolean nameFieldsAreEmpty()
android.content.ContentProviderOperation$Builder withValueBackReference(java.lang.String,int)
void insertStructuredPostalDataUsingContactsStruct(int,android.content.ContentProviderOperation$Builder,android.pim.vcard.VCardEntry$PostalData)
java.util.List subList(int,int)
android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)
android.net.Uri pushIntoContentResolver(android.content.ContentResolver)
android.pim.vcard.VCardEntry buildFromResolver(android.content.ContentResolver,android.net.Uri)
android.pim.vcard.VCardEntry buildFromResolver(android.content.ContentResolver)
boolean isIgnorable()
java.lang.String getFamilyName()
java.lang.String getGivenName()
java.lang.String getMiddleName()
java.lang.String getPrefix()
java.lang.String getSuffix()
java.lang.String getFullName()
java.lang.String getPhoneticFamilyName()
java.lang.String getPhoneticGivenName()
java.lang.String getPhoneticMiddleName()
java.lang.String getPhoneticFullName()
java.util.List getNickNameList()
java.lang.String getBirthday()
java.util.List getNotes()
java.util.List getPhoneList()
java.util.List getEmailList()
java.util.List getPostalList()
java.util.List getOrganizationList()
java.util.List getImList()
java.util.List getPhotoList()
java.util.List getWebsiteList()
void <init>(int,android.accounts.Account,java.lang.String,boolean)
void <init>(int,android.accounts.Account,java.lang.String)
void addEntryHandler(android.pim.vcard.VCardEntryHandler)
void onEnd()
void onEntryCreated(android.pim.vcard.VCardEntry)
boolean containsOnlyAlphaDigitHyphen(java.lang.String[])
java.lang.String convertStringCharset(java.lang.String,java.lang.String,java.lang.String)
java.lang.String parseQuotedPrintable(java.lang.String,boolean,java.lang.String,java.lang.String)
java.lang.String handleOneValue(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
void <init>(android.pim.vcard.VCardComposer,java.io.OutputStream)
void closeOutputStream()
boolean isJapaneseDevice(int)
java.lang.String getPhoneTypeString(java.lang.Integer)
boolean isMobilePhoneLabel(java.lang.String)
boolean isValidInV21ButUnknownToContactsPhoteType(java.lang.String)
java.lang.String getPropertyNameForIm(int)
int getNameOrderType(int)
boolean containsOnlyPrintableAscii(java.lang.String[])
java.lang.String[] sortNameElements(int,java.lang.String,java.lang.String,java.lang.String)
boolean isVersion40(int)
boolean isVersion21(int)
boolean containsOnlyPrintableAscii(java.util.Collection)
boolean isPrintableAsciiOnly(java.lang.CharSequence)
boolean containsOnlyNonCrLfPrintableAscii(java.lang.String[])
boolean containsOnlyNonCrLfPrintableAscii(java.util.Collection)
boolean containsOnlyAlphaDigitHyphen(java.util.Collection)
boolean containsOnlyWhiteSpaces(java.lang.String[])
boolean containsOnlyWhiteSpaces(java.util.Collection)
boolean isWhitespace(int)
boolean isV21Word(java.lang.String)
java.lang.String toStringAsParamValue(java.lang.String,int[])
java.lang.String toStringAsV30ParamValue(java.lang.String)
java.lang.String toStringAsV40ParamValue(java.lang.String)
java.lang.StringBuilder appendCodePoint(int)
java.lang.String toHalfWidthString(java.lang.String)
java.lang.String guessImageType(byte[])
boolean areAllEmpty(java.lang.String[])
android.pim.vcard.VCardParser getAppropriateParser(int)
java.nio.ByteBuffer encode(java.lang.String)
java.nio.ByteBuffer get(byte[])
boolean shouldUseQuotedPrintable(int)
boolean needsToConvertPhoneticString(int)
boolean onlyOneNoteFieldIsAvailable(int)
boolean usesAndroidSpecificProperty(int)
boolean usesDefactProperty(int)
boolean shouldRefrainQPToNameProperties(int)
boolean appendTypeParamName(int)
void appendLine(java.lang.String,java.lang.String)
boolean containsNonEmptyName(android.content.ContentValues)
java.lang.Integer getAsInteger(java.lang.String)
android.content.ContentValues getPrimaryContentValue(java.util.List)
java.lang.String escapeCharacters(java.lang.String)
void appendPhoneticNameFields(android.content.ContentValues)
android.pim.vcard.VCardBuilder appendNamePropertiesV40(java.util.List)
boolean shouldAppendCharsetParam(java.lang.String[])
java.lang.String encodeQuotedPrintable(java.lang.String)
void appendAndroidSpecificProperty(java.lang.String,android.content.ContentValues)
void appendLineWithCharsetAndQPDetection(java.lang.String,java.lang.String)
void appendTelLine(java.lang.Integer,java.lang.String,java.lang.String,boolean)
java.util.List splitAndTrimPhoneNumbers(java.lang.String)
void appendEmailLine(int,java.lang.String,java.lang.String,boolean)
void appendPostalsForDoCoMo(java.util.List)
void appendPostalsForGeneric(java.util.List)
void appendPostalLine(int,java.lang.String,android.content.ContentValues,boolean,boolean)
void <init>(boolean,boolean,java.lang.String)
android.pim.vcard.VCardBuilder$PostalStruct tryConstructPostalStruct(android.content.ContentValues)
void appendLineWithCharsetAndQPDetection(java.lang.String,java.util.List,java.lang.String)
void appendLine(java.lang.String,java.lang.String,boolean,boolean)
byte[] getAsByteArray(java.lang.String)
void appendPhotoLine(java.lang.String,java.lang.String)
void appendTypeParameters(java.util.List)
void appendUncommonPhoneType(java.lang.StringBuilder,java.lang.Integer)
void appendTypeParameter(java.lang.String)
void appendTypeParameter(java.lang.StringBuilder,java.lang.String)
void appendLineWithCharsetAndQPDetection(java.lang.String,java.util.List,java.util.List)
void appendLineWithCharsetAndQPDetection(java.lang.String,java.util.List)
void appendLine(java.lang.String,java.util.List,java.lang.String,boolean,boolean)
void appendLine(java.lang.String,java.util.List,java.util.List,boolean,boolean)
void appendLine(java.lang.String,java.util.List,boolean,boolean)
void appendLine(java.lang.String,java.util.List)
void appendLine(java.lang.String,java.util.List,java.lang.String)
int getEstimatedType()
java.lang.String getEstimatedCharset()
java.util.Collection getCollection()
int getVCardTypeFromString(java.lang.String)
java.util.ArrayList getCreatedUris()
void init(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
void <init>(android.content.ContentValues)
long[] parseRecurrenceDates(java.lang.String)
boolean hasRecurrence()
boolean parse(java.lang.String)
android.pim.ICalendar$Parameter getFirstParameter(java.lang.String)
java.lang.String computeDuration(android.text.format.Time,android.pim.ICalendar$Component)
java.lang.String flattenProperties(android.pim.ICalendar$Component,java.lang.String)
java.lang.String extractDates(android.pim.ICalendar$Property)
boolean populateContentValues(android.pim.ICalendar$Component,android.content.ContentValues)
boolean populateComponent(android.database.Cursor,android.pim.ICalendar$Component)
java.lang.String format2445()
void addPropertiesForRuleStr(android.pim.ICalendar$Component,java.lang.String,java.lang.String)
void addPropertyForDateStr(android.pim.ICalendar$Component,java.lang.String,java.lang.String)
java.lang.Long getAsLong(java.lang.String)
boolean populateComponent(android.content.ContentValues,android.pim.ICalendar$Component)
java.lang.String[] getRuleStrings(java.lang.String)
java.lang.String unfold(java.lang.String)
java.lang.String fold(java.lang.String)
java.util.Set getParameterNames()
java.util.List getParameters(java.lang.String)
android.accessibilityservice.IEventListener asInterface(android.os.IBinder)
android.accessibilityservice.IAccessibilityServiceConnection asInterface(android.os.IBinder)
void setConnection(android.accessibilityservice.IAccessibilityServiceConnection)
void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
void onInterrupt()
void <init>(android.accessibilityservice.AccessibilityService,android.accessibilityservice.AccessibilityService)
void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
void sendServiceInfo()
android.accessibilityservice.AccessibilityServiceInfo createFromParcel(android.os.Parcel)
android.accessibilityservice.AccessibilityServiceInfo[] newArray(int)
int indexOf(java.lang.CharSequence,char,int)
int indexOf(java.lang.CharSequence,char)
int indexOf(java.lang.CharSequence,char,int,int)
char[] obtain(int)
void recycle(char[])
int lastIndexOf(java.lang.CharSequence,char,int)
int lastIndexOf(java.lang.CharSequence,char)
int lastIndexOf(int,int)
int lastIndexOf(java.lang.CharSequence,char,int,int)
int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)
int indexOf(java.lang.CharSequence,java.lang.CharSequence)
int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)
boolean regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)
java.lang.String join(java.lang.CharSequence,java.lang.Iterable)
java.lang.String[] split(java.lang.CharSequence,int)
java.lang.String[] split(java.lang.String,java.util.regex.Pattern)
void <init>(java.lang.CharSequence,int,int)
java.lang.CharSequence getReverse(java.lang.CharSequence,int,int)
android.text.style.CharacterStyle getUnderlying()
int getSpanTypeId()
void writeWhere(android.os.Parcel,android.text.Spanned,java.lang.Object)
void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)
android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)
android.text.SpannableStringBuilder delete(int,int)
int getNumericValue(char)
java.lang.CharSequence expandTemplate(java.lang.CharSequence,java.lang.CharSequence[])
int getOffsetBefore(java.lang.CharSequence,int)
int getOffsetAfter(java.lang.CharSequence,int)
void readSpan(android.os.Parcel,android.text.Spannable,java.lang.Object)
java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)
java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt)
float measureText(java.lang.CharSequence,int,int)
void ellipsized(int,int)
int breakText(java.lang.CharSequence,int,int,boolean,float,float[])
java.lang.String blank(java.lang.CharSequence,int,int)
int getTextWidths(android.text.TextPaint,android.text.TextPaint,android.text.Spanned,int,int,float[],android.graphics.Paint$FontMetricsInt)
android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)
int getTextWidths(java.lang.CharSequence,int,int,float[])
java.lang.CharSequence commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String)
java.lang.String htmlEncode(java.lang.String)
java.lang.CharSequence concat(java.lang.CharSequence[])
boolean isGraphic(java.lang.CharSequence)
boolean isGraphic(char)
boolean isDigitsOnly(java.lang.CharSequence)
boolean isPrintableAscii(char)
boolean delimitedStringContains(java.lang.String,char,java.lang.String)
void access$000(android.os.Parcel,android.text.Spannable,java.lang.Object)
void <init>(java.lang.CharSequence,char[],int,int,android.text.AlteredCharSequence$1)
void <init>(java.lang.CharSequence,char[],int,int)
void init(android.content.res.Resources)
void <init>(android.content.res.Resources)
android.text.AutoText getInstance(android.view.View)
java.lang.String lookup(java.lang.CharSequence,int,int)
java.lang.String get(java.lang.CharSequence,int,int,android.view.View)
int getSize(android.view.View)
void add(java.lang.String,char)
void flushLayoutCache()
char newTrieNode()
void <init>(android.text.method.TextKeyListener)
java.lang.ref.WeakReference access$000(android.text.method.TextKeyListener)
boolean access$102(android.text.method.TextKeyListener,boolean)
void access$200(android.text.method.TextKeyListener,android.content.ContentResolver)
int getMetaState(java.lang.CharSequence)
int lookup(android.view.KeyEvent,android.text.Spannable)
boolean ok(char[],char)
char[] getOriginal()
char[] getReplacement()
void <init>(android.text.Spanned,char[],char[])
void <init>(java.lang.CharSequence,char[],char[])
void <init>(android.text.Spannable,android.text.method.PasswordTransformationMethod)
android.text.method.PasswordTransformationMethod access$000(android.text.method.PasswordTransformationMethod$Visible)
boolean action(int,android.widget.TextView,android.text.Spannable)
void removeSelection(android.text.Spannable)
android.text.method.TextKeyListener$Capitalize[] values()
android.text.method.TextKeyListener$Capitalize valueOf(java.lang.String)
void <init>(android.text.method.TextKeyListener$Capitalize,boolean)
android.text.method.MultiTapKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)
int makeTextContentType(android.text.method.TextKeyListener$Capitalize,boolean)
int getPrefs(android.content.Context)
void removeTimeouts(android.text.Spannable)
void <init>(android.text.method.MultiTapKeyListener,android.text.Editable)
boolean isUpperCase(char)
android.text.Editable replace(int,int,java.lang.CharSequence,int,int)
boolean shouldCap(android.text.method.TextKeyListener$Capitalize,java.lang.CharSequence,int)
android.text.Editable access$002(android.text.method.MultiTapKeyListener$Timeout,android.text.Editable)
boolean altBackspace(android.view.View,android.text.Editable,int,android.view.KeyEvent)
void adjustMetaAfterKeypress(android.text.Spannable)
boolean backspace(android.view.View,android.text.Editable,int,android.view.KeyEvent)
void scrollTo(android.widget.TextView,android.text.Layout,int,int)
void <init>(float,float,int,int)
boolean isCap(android.text.Spannable)
boolean isAlt(android.text.Spannable)
boolean extendUp(android.text.Spannable,android.text.Layout)
boolean moveUp(android.text.Spannable,android.text.Layout)
boolean extendDown(android.text.Spannable,android.text.Layout)
boolean moveDown(android.text.Spannable,android.text.Layout)
boolean extendToLeftEdge(android.text.Spannable,android.text.Layout)
boolean extendLeft(android.text.Spannable,android.text.Layout)
boolean moveToLeftEdge(android.text.Spannable,android.text.Layout)
boolean moveLeft(android.text.Spannable,android.text.Layout)
boolean extendToRightEdge(android.text.Spannable,android.text.Layout)
boolean extendRight(android.text.Spannable,android.text.Layout)
boolean moveToRightEdge(android.text.Spannable,android.text.Layout)
boolean moveRight(android.text.Spannable,android.text.Layout)
void resetLockedMeta(android.text.Spannable)
void <init>(android.content.Context,android.view.View,android.text.Editable,java.lang.String,boolean)
void <init>(android.text.method.CharacterPickerDialog,android.content.Context)
void replaceCharacterAndClose(java.lang.CharSequence)
android.view.LayoutInflater access$000(android.text.method.CharacterPickerDialog)
java.lang.String access$100(android.text.method.CharacterPickerDialog)
int getActive(java.lang.CharSequence,java.lang.Object,int,int)
void adjust(android.text.Spannable,java.lang.Object)
void resetLock(android.text.Spannable,java.lang.Object)
void press(android.text.Editable,java.lang.Object)
void release(android.text.Editable,java.lang.Object)
long resetLock(long,int,long)
long resetLockedMeta(long)
int getActive(long,int,int,int)
int getMetaState(long)
int getMetaState(long,int)
long adjust(long,int,long)
long adjustMetaAfterKeypress(long)
long press(long,int,long)
long handleKeyDown(long,int,android.view.KeyEvent)
long release(long,int,long)
long handleKeyUp(long,int,android.view.KeyEvent)
long clearMetaKeyState(long,int)
void <init>(boolean,boolean)
android.text.method.DigitsKeyListener getInstance()
char[] access$000(android.text.method.QwertyKeyListener$Replaced)
android.text.method.QwertyKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)
boolean showCharacterPicker(android.view.View,android.text.Editable,char,boolean,int)
boolean isLowerCase(int)
java.lang.String getReplacement(java.lang.CharSequence,int,int,android.view.View)
java.lang.String toTitleCase(java.lang.String)
float getFontSpacing()
android.text.method.TextKeyListener$NullKeyListener getInstance()
android.text.method.HideReturnsTransformationMethod getInstance()
android.text.method.KeyListener getKeyListener(android.view.KeyEvent)
void clear(android.text.Editable)
void updatePrefs(android.content.ContentResolver)
void initPrefs(android.content.Context)
void removeVisibleSpans(android.text.Spannable)
char access$100()
void <init>(android.text.DynamicLayout)
void access$000(android.text.DynamicLayout,java.lang.CharSequence,int,int,int)
void reflow(java.lang.CharSequence,int,int,int)
void <init>(android.text.HtmlToSpannedConverter$1)
int chooseHorizontal(android.text.Layout,int,int,int)
int findEdge(android.text.Spannable,android.text.Layout,int)
void <init>(android.text.Selection$1)
void <init>(short[])
short[] access$000(android.text.Layout$Directions)
java.lang.CharSequence createFromParcel(android.os.Parcel)
java.lang.CharSequence[] newArray(int)
android.text.SpannableString valueOf(java.lang.CharSequence)
java.lang.CharSequence getClipboardText()
boolean hasClipboardText()
boolean isAllowed(char)
java.lang.Object getValue(int,int)
void setValue(int,int,java.lang.Object)
void moveRowGapTo(int)
void growBuffer()
void insertAt(int,java.lang.Object[])
void deleteAt(int,int)
float getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)
float measureText(android.text.TextPaint,android.text.TextPaint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt,boolean,java.lang.Object[])
void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)
void replaceWith(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)
void drawBackground(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,int)
int getLineVisibleEnd(int,int,int)
android.text.Layout$Alignment getAlignment()
void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)
int getLeadingMargin(boolean)
int getLeadingMarginLineCount()
float getLineMax(int,java.lang.Object[],boolean)
android.text.Layout$Directions getLineDirections(int)
boolean getLineContainsTab(int)
void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)
void drawText(android.graphics.Canvas,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,float,int,int,int,android.text.TextPaint,android.text.TextPaint,boolean,java.lang.Object[])
float getSpacingMultiplier()
float getSpacingAdd()
float getHorizontal(int,boolean,boolean)
float getSecondaryHorizontal(int)
float getHorizontal(int,boolean,boolean,int)
int getLineVisibleEnd(int)
float measureText(android.text.TextPaint,android.text.TextPaint,java.lang.CharSequence,int,int,int,int,android.text.Layout$Directions,boolean,boolean,boolean,java.lang.Object[])
int getParagraphLeft(int)
int getParagraphRight(int)
float getLineMax(int)
int getOffsetAtStartOf(int)
int getLineAscent(int)
void addRect(float,float,float,float,android.graphics.Path$Direction)
void addSelection(int,int,int,int,int,android.graphics.Path)
float drawText(android.graphics.Canvas,java.lang.CharSequence,int,int,int,boolean,float,int,int,int,android.text.TextPaint,android.text.TextPaint,boolean)
float nextTab(java.lang.CharSequence,int,int,float,java.lang.Object[])
int codePointAt(char[],int)
void set(android.text.TextPaint)
float measureText(android.text.TextPaint,android.text.TextPaint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt)
float ascent()
void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)
int getTabStop()
boolean isSpanned()
int getEllipsisStart(int)
void ellipsize(int,int,int,char[],int)
void access$100(android.text.Layout,int,int,int,char[],int)
android.emoji.EmojiFactory newAvailableInstance()
void <init>(android.graphics.Paint)
void set(android.graphics.Paint)
android.text.Layout$Alignment valueOf(java.lang.String)
android.text.SpannableStringBuilder valueOf(java.lang.CharSequence)
void resizeFor(int)
void moveGapTo(int)
android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)
android.text.SpannableStringBuilder insert(int,java.lang.CharSequence)
void sendSpanRemoved(java.lang.Object,int,int)
android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)
android.text.SpannableStringBuilder append(char)
int change(boolean,int,int,java.lang.CharSequence,int,int)
int change(int,int,java.lang.CharSequence,int,int)
void checkRange(java.lang.String,int,int)
android.text.TextWatcher[] sendTextWillChange(int,int,int)
void setSpan(boolean,java.lang.Object,int,int,int)
void sendTextChange(android.text.TextWatcher[],int,int,int)
void sendTextHasChanged(android.text.TextWatcher[])
void sendSpanChanged(java.lang.Object,int,int,int,int)
void sendSpanAdded(java.lang.Object,int,int)
java.lang.String region(int,int)
boolean isprint(char)
android.text.Editable append(char)
android.text.Editable insert(int,java.lang.CharSequence,int,int)
void setString(java.lang.String)
java.lang.String next()
int getValue(int,int)
void setValue(int,int,int)
void setValueInternal(int,int,int)
void moveValueGapTo(int,int)
void adjustValuesBelow(int,int,int)
void insertAt(int,int[])
java.lang.String transformUrl(java.util.regex.Matcher,java.lang.String)
void gatherLinks(java.util.ArrayList,android.text.Spannable,java.util.regex.Pattern,java.lang.String[],android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)
void gatherMapLinks(java.util.ArrayList,android.text.Spannable)
void pruneOverlaps(java.util.ArrayList)
void applyLink(java.lang.String,int,int,android.text.Spannable)
boolean addLinks(android.widget.TextView,int)
void addLinkMovementMethod(android.widget.TextView)
void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)
void addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String)
boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)
boolean addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String)
int start()
int end()
boolean acceptMatch(java.lang.CharSequence,int,int)
java.lang.String makeUrl(java.lang.String,java.lang.String[],java.util.regex.Matcher,android.text.util.Linkify$TransformFilter)
int compare(android.text.util.LinkSpec,android.text.util.LinkSpec)
java.lang.String getComment()
void setComment(java.lang.String)
java.lang.String quoteNameIfNecessary(java.lang.String)
java.lang.String quoteComment(java.lang.String)
java.lang.String quoteName(java.lang.String)
boolean stringEquals(java.lang.String,java.lang.String)
void crunch(java.lang.StringBuilder)
void tokenize(java.lang.CharSequence,java.util.Collection)
android.text.util.Rfc822Token[] tokenize(java.lang.CharSequence)
void setCharAt(int,char)
void <init>(java.lang.String,android.text.Html$ImageGetter,android.text.Html$TagHandler,org.ccil.cowan.tagsoup.Parser)
android.text.Spanned convert()
void handleP(android.text.SpannableStringBuilder)
void start(android.text.SpannableStringBuilder,java.lang.Object)
void startFont(android.text.SpannableStringBuilder,org.xml.sax.Attributes)
void startA(android.text.SpannableStringBuilder,org.xml.sax.Attributes)
void startImg(android.text.SpannableStringBuilder,org.xml.sax.Attributes,android.text.Html$ImageGetter)
void handleTag(boolean,java.lang.String,android.text.Editable,org.xml.sax.XMLReader)
void handleStartTag(java.lang.String,org.xml.sax.Attributes)
void handleBr(android.text.SpannableStringBuilder)
void end(android.text.SpannableStringBuilder,java.lang.Class,java.lang.Object)
void endFont(android.text.SpannableStringBuilder)
void endA(android.text.SpannableStringBuilder)
void endHeader(android.text.SpannableStringBuilder)
void handleEndTag(java.lang.String)
java.lang.Object getLast(android.text.Spanned,java.lang.Class)
java.lang.String getValue(java.lang.String,java.lang.String)
void <init>(android.graphics.drawable.Drawable,java.lang.String)
int getHtmlColor(java.lang.String)
int access$900(android.text.HtmlToSpannedConverter$Header)
void startDocument()
void startPrefixMapping(java.lang.String,java.lang.String)
void endPrefixMapping(java.lang.String)
void ignorableWhitespace(char[],int,int)
void processingInstruction(java.lang.String,java.lang.String)
void skippedEntity(java.lang.String)
java.util.HashMap buildColorMap()
void <init>(java.lang.CharSequence,java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean)
android.graphics.Paint$FontMetricsInt getFontMetricsInt()
void generate(java.lang.CharSequence,int,int,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean,boolean,boolean,float,android.text.TextUtils$TruncateAt)
int getTopPadding()
void dump(boolean)
android.text.AlteredCharSequence make(java.lang.CharSequence,char[],int,int)
void update(char[],int,int)
java.lang.String valueOf(char[])
void updateDrawState(android.text.TextPaint)
int getColor()
android.graphics.Paint$Style getStyle()
int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt)
void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint)
float drawUniformRun(android.graphics.Canvas,android.text.Spanned,int,int,int,boolean,float,int,int,int,android.graphics.Paint$FontMetricsInt,android.text.TextPaint,android.text.TextPaint,boolean)
void updateMeasureState(android.text.TextPaint)
float drawDirectionalRun(android.graphics.Canvas,java.lang.CharSequence,int,int,int,boolean,float,int,int,int,android.graphics.Paint$FontMetricsInt,android.text.TextPaint,android.text.TextPaint,boolean)
float drawText(android.graphics.Canvas,java.lang.CharSequence,int,int,int,float,int,int,int,android.text.TextPaint,android.text.TextPaint,boolean)
android.text.SpannedString valueOf(java.lang.CharSequence)
int runBidi(int,char[],byte[],int,boolean)
int bidi(int,char[],byte[],int,boolean)
java.lang.String formatFileSize(android.content.Context,long,boolean)
java.lang.String formatFileSize(android.content.Context,long)
java.lang.String formatShortFileSize(android.content.Context,long)
java.lang.String formatIpAddress(int)
void set(android.text.format.Time)
void <init>(android.text.format.Time)
java.lang.String format1(java.lang.String)
java.lang.String format(java.lang.String)
boolean nativeParse(java.lang.String)
boolean nativeParse3339(java.lang.String)
boolean parse3339(java.lang.String)
int compare(android.text.format.Time,android.text.format.Time)
boolean before(android.text.format.Time)
boolean after(android.text.format.Time)
int getWeekNumber()
java.lang.String format3339(boolean)
int getJulianDay(long,long)
boolean isEpoch(android.text.format.Time)
long setJulianDay(int)
java.lang.String getDayOfWeekString(int,int)
java.lang.String getAMPMString(int)
java.lang.String getStandaloneMonthString(int,int)
java.lang.CharSequence getRelativeTimeSpanString(long,long,long)
java.lang.CharSequence getRelativeTimeSpanString(long)
java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long,boolean)
java.lang.CharSequence getRelativeDateTimeString(android.content.Context,long,long,long,int)
java.lang.String getRelativeDayString(android.content.res.Resources,long,long)
boolean equals(android.content.res.Configuration)
java.text.DateFormat getTimeInstance(int)
void initFormatStrings()
java.lang.CharSequence timeString(long)
java.lang.String formatElapsedTime(long)
java.lang.String formatElapsedTime(java.lang.StringBuilder,java.lang.String,long,long,long)
java.lang.String formatElapsedTime(java.lang.StringBuilder,java.lang.String,long,long)
char toDigitChar(long)
java.lang.CharSequence formatSameDayTime(long,long,int,int)
java.util.Calendar newCalendar(boolean)
boolean isToday(long)
boolean isUTC(java.lang.String)
void <init>(java.util.TimeZone)
java.lang.String writeDateTime(java.util.Calendar,boolean)
java.lang.String writeDateTime(java.util.Calendar)
java.lang.String writeDateTime(java.util.Calendar,java.lang.StringBuilder)
void assign(java.util.Calendar,java.util.Calendar)
java.util.Formatter formatDateRange(android.content.Context,java.util.Formatter,long,long,int)
java.lang.String formatDateTime(android.content.Context,long,int)
java.lang.CharSequence getRelativeTimeSpanString(android.content.Context,long)
java.text.DateFormat getTimeInstance(int,java.util.Locale)
java.text.DateFormat getDateFormatForSetting(android.content.Context,java.lang.String)
java.lang.String getDateFormatStringForSetting(android.content.Context,java.lang.String)
java.text.DateFormat getLongDateFormat(android.content.Context)
java.lang.String getDateFormatString(android.content.Context)
java.lang.CharSequence format(java.lang.CharSequence,java.util.Date)
java.lang.CharSequence format(java.lang.CharSequence,long)
void setTime(java.util.Date)
int appendQuotedText(android.text.SpannableStringBuilder,int,int)
java.lang.String zeroPad(int,int)
java.lang.String getMonthString(java.util.Calendar,int)
java.lang.String getTimeZoneString(java.util.Calendar,int)
java.lang.String getYearString(java.util.Calendar,int)
java.util.TimeZone getTimeZone()
java.lang.String formatZoneOffset(int,int)
java.lang.String getDisplayName(boolean,int)
java.lang.StringBuilder insert(int,java.lang.String)
void <init>(android.graphics.Rasterizer)
android.graphics.Rasterizer getRasterizer()
android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer)
float getSizeChange()
void <init>(android.content.Context,android.graphics.Bitmap,int)
void <init>(android.graphics.Bitmap,int)
void <init>(android.content.Context,android.graphics.Bitmap)
void <init>(android.graphics.drawable.Drawable,int)
void <init>(android.graphics.drawable.Drawable,java.lang.String,int)
void <init>(android.content.Context,android.net.Uri,int)
int getVerticalAlignment()
android.graphics.drawable.Drawable getCachedDrawable()
void chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint$FontMetricsInt)
float getScaleX()
java.lang.String getFamily()
void apply(android.graphics.Paint,java.lang.String)
android.graphics.Typeface create(java.lang.String,int)
void <init>(android.graphics.MaskFilter)
android.graphics.MaskFilter getMaskFilter()
android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)
android.content.res.ColorStateList getTextColor()
android.content.res.ColorStateList getLinkTextColor()
int getTextSize()
int getTextStyle()
void apply(android.graphics.Paint,int)
void setStrikeThruText(boolean)
void <init>(android.text.style.MetricAffectingSpan)
android.text.style.MetricAffectingSpan getUnderlying()
void <init>(int,boolean)
boolean getDip()
void <init>(android.text.style.CharacterStyle)
android.text.style.CharacterStyle wrap(android.text.style.CharacterStyle)
void drawCircle(float,float,float,android.graphics.Paint)
void setUnderlineText(boolean)
char getMirror(char)
boolean mirror(char[],int,int)
android.text.Spanned fromHtml(java.lang.String)
org.ccil.cowan.tagsoup.HTMLSchema access$000()
void withinHtml(java.lang.StringBuilder,android.text.Spanned)
void withinDiv(java.lang.StringBuilder,android.text.Spanned,int,int)
void withinBlockquote(java.lang.StringBuilder,android.text.Spanned,int,int)
void withinParagraph(java.lang.StringBuilder,android.text.Spanned,int,int,int,boolean)
void withinStyle(java.lang.StringBuilder,android.text.Spanned,int,int)
android.text.TextUtils$TruncateAt[] values()
android.text.TextUtils$TruncateAt valueOf(java.lang.String)
void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean)
void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)
void init(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,boolean)
android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint)
void onInvalidCharacter(char)
android.text.IClipboard getService()
void <init>(java.lang.CharSequence,int,int,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean)
boolean isIdeographic(char,boolean)
int out(java.lang.CharSequence,int,int,int,int,int,int,int,float,float,android.text.style.LineHeightSpan[],int[],android.graphics.Paint$FontMetricsInt,boolean,boolean,int,byte[],int,boolean,boolean,boolean,boolean,float[],int,int,android.text.TextUtils$TruncateAt,float,float,android.text.TextPaint)
void getDirectionalities(char[],byte[],int)
int getFit(android.text.TextPaint,android.text.TextPaint,java.lang.CharSequence,int,int,float)
void chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint$FontMetricsInt,android.text.TextPaint)
void calculateEllipsis(int,int,float[],int,int,float,android.text.TextUtils$TruncateAt,int,float,android.text.TextPaint)
void requestScanFile(java.lang.String,java.lang.String,android.media.IMediaScannerListener)
void scanFile(java.lang.String,java.lang.String)
android.media.DecoderCapabilities$AudioDecoder[] values()
android.media.DecoderCapabilities$AudioDecoder valueOf(java.lang.String)
int native_get_num_file_formats()
int native_get_file_format(int)
int[] getOutputFileFormats()
int native_get_num_video_encoders()
android.media.EncoderCapabilities$VideoEncoderCap native_get_video_encoder_cap(int)
java.util.List getVideoEncoders()
int native_get_num_audio_encoders()
android.media.EncoderCapabilities$AudioEncoderCap native_get_audio_encoder_cap(int)
java.util.List getAudioEncoders()
void native_init()
void adjustVolume(int,int)
void adjustSuggestedStreamVolume(int,int,int)
void adjustStreamVolume(int,int,int)
void setStreamVolume(int,int,int)
void setStreamSolo(int,boolean,android.os.IBinder)
void setStreamMute(int,boolean,android.os.IBinder)
void setRingerMode(int)
void setVibrateSetting(int,int)
int getVibrateSetting(int)
void setMode(int,android.os.IBinder)
void playSoundEffectVolume(int,float)
boolean loadSoundEffects()
void unloadSoundEffects()
void reloadAudioSettings()
void setBluetoothScoOn(boolean)
boolean isBluetoothScoOn()
int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String)
int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)
void unregisterAudioFocusClient(java.lang.String)
void registerMediaButtonEventReceiver(android.content.ComponentName)
void unregisterMediaButtonEventReceiver(android.content.ComponentName)
void startBluetoothSco(android.os.IBinder)
void stopBluetoothSco(android.os.IBinder)
void setVolumeIndexSettingName(java.lang.String)
android.content.ContentResolver access$1700(android.media.AudioService)
int[] access$1800(android.media.AudioService)
int initStreamVolume(int,int,int)
int getValidIndex(int)
void access$1900(android.media.AudioService,int,int)
void <init>(android.media.AudioService,java.lang.String,int)
boolean setIndex(int,boolean)
boolean adjustIndex(int)
int[] access$2000(android.media.AudioService)
android.media.AudioService$VolumeStreamState[] access$2200(android.media.AudioService)
int access$2100(android.media.AudioService,int,int,int)
void setLastAudibleIndex(int)
void adjustLastAudibleIndex(int)
int getMaxIndex()
android.media.AudioService$VolumeStreamState$VolumeDeathHandler getDeathHandler(android.os.IBinder,boolean)
void mute(boolean)
void mute(android.os.IBinder,boolean)
int access$1300(android.media.AudioService$VolumeStreamState$VolumeDeathHandler)
int muteCount()
android.os.IBinder access$2500(android.media.AudioService$VolumeStreamState$VolumeDeathHandler)
void <init>(android.media.AudioService$VolumeStreamState,android.os.IBinder)
void <init>(android.media.AudioService,java.lang.String,int,android.media.AudioService$1)
int access$600(android.media.AudioService$VolumeStreamState)
int access$602(android.media.AudioService$VolumeStreamState,int)
int access$700(android.media.AudioService$VolumeStreamState,int)
int access$800(android.media.AudioService$VolumeStreamState)
int access$802(android.media.AudioService$VolumeStreamState,int)
int access$900(android.media.AudioService$VolumeStreamState)
java.util.ArrayList access$1200(android.media.AudioService$VolumeStreamState)
int access$2300(android.media.AudioService$VolumeStreamState)
java.lang.String access$2700(android.media.AudioService$VolumeStreamState)
java.lang.String access$2800(android.media.AudioService$VolumeStreamState)
int access$3800(android.media.AudioService$VolumeStreamState)
void <init>(android.media.MediaRecorder,android.media.MediaRecorder,android.os.Looper)
int access$000(android.media.MediaRecorder)
android.media.MediaRecorder$OnErrorListener access$100(android.media.MediaRecorder)
void onError(android.media.MediaRecorder,int,int)
android.media.MediaRecorder$OnInfoListener access$200(android.media.MediaRecorder)
void onInfo(android.media.MediaRecorder,int,int)
void <init>(android.media.ThumbnailUtils$1)
void native_setup(java.lang.Object)
int getAudioSourceMax()
void setOutputFormat(int)
void setVideoFrameRate(int)
void setVideoSize(int,int)
void setVideoEncodingBitRate(int)
void setAudioEncodingBitRate(int)
void setAudioChannels(int)
void setAudioSamplingRate(int)
void setVideoEncoder(int)
void setAudioEncoder(int)
void setProfile(android.media.CamcorderProfile)
void setParameter(java.lang.String)
void setOrientationHint(int)
void setOutputFile(java.io.FileDescriptor)
void setOutputFile(java.lang.String)
void _setOutputFile(java.io.FileDescriptor,long,long)
void _prepare()
void native_reset()
void setOnErrorListener(android.media.MediaRecorder$OnErrorListener)
void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)
void openMediaPlayer()
void setStreamType(int)
int getStreamType()
java.lang.String getTitle(android.content.Context,android.net.Uri,boolean)
java.lang.String getTitle(android.content.Context)
int getDefaultType(android.net.Uri)
void setDataSource(android.content.Context,android.net.Uri)
void setDataSource(java.io.FileDescriptor)
long getDeclaredLength()
void setDataSource(java.io.FileDescriptor,long,long)
void open(java.io.FileDescriptor)
void open(android.content.res.AssetFileDescriptor)
void open(android.net.Uri)
void <init>(android.media.MediaScannerConnection)
android.media.MediaScannerConnection$MediaScannerConnectionClient access$000(android.media.MediaScannerConnection)
void onScanCompleted(java.lang.String,android.net.Uri)
void scanCompleted(java.lang.String,android.net.Uri)
void <init>(android.media.AudioService)
boolean access$000(android.media.AudioService)
android.media.AudioService$AudioHandler access$100(android.media.AudioService)
void access$200(android.os.Handler,int,int,int,int,int,java.lang.Object,int)
boolean access$002(android.media.AudioService,boolean)
void <init>(android.media.AudioTrack$NativeEventHandlerDelegate,android.os.Looper,android.media.AudioTrack)
android.media.AudioTrack access$100(android.media.AudioTrack$NativeEventHandlerDelegate)
java.lang.Object access$200(android.media.AudioTrack)
android.media.AudioTrack$OnPlaybackPositionUpdateListener access$300(android.media.AudioTrack)
void onMarkerReached(android.media.AudioTrack)
void onPeriodicNotification(android.media.AudioTrack)
void <init>(android.media.MediaScanner)
android.media.MediaFile$MediaFileType getFileType(java.lang.String)
boolean access$100(android.media.MediaScanner)
java.util.HashMap access$200(android.media.MediaScanner)
void <init>(android.net.Uri,long,java.lang.String,long)
boolean access$300(android.media.MediaScanner)
boolean isPlayListFileType(int)
java.util.ArrayList access$400(android.media.MediaScanner)
android.media.MediaScanner$FileCacheEntry beginFile(java.lang.String,java.lang.String,long,long)
android.net.Uri doScanFile(java.lang.String,java.lang.String,long,long,boolean)
void scanFile(java.lang.String,long,long)
void scanFile(java.lang.String,java.lang.String,long,long)
boolean isImageFileType(int)
void access$500(android.media.MediaScanner,java.lang.String,java.lang.String,android.media.MediaScannerClient)
android.net.Uri endFile(android.media.MediaScanner$FileCacheEntry,boolean,boolean,boolean,boolean,boolean)
int parseSubstring(java.lang.String,int,int)
java.lang.String[] access$600()
void handleStringTag(java.lang.String,java.lang.String)
void setMimeType(java.lang.String)
boolean isVideoFileType(int)
boolean isAudioFileType(int)
android.content.ContentValues toValues()
android.net.Uri access$700(android.media.MediaScanner)
android.net.Uri access$800(android.media.MediaScanner)
android.net.Uri access$900(android.media.MediaScanner)
boolean getLatLong(float[])
long getGpsDateTime()
int getAttributeInt(java.lang.String,int)
android.content.IContentProvider access$1000(android.media.MediaScanner)
boolean access$1100(android.media.MediaScanner)
java.util.HashMap access$1200(android.media.MediaScanner)
android.net.Uri access$1300(android.media.MediaScanner)
java.lang.String[] access$1400()
boolean access$1500(android.media.MediaScanner)
java.lang.String access$1600(android.media.MediaScanner)
boolean doesPathHaveFilename(java.lang.String,java.lang.String)
void setSettingIfNotSet(java.lang.String,android.net.Uri,long)
boolean access$1502(android.media.MediaScanner,boolean)
boolean access$1700(android.media.MediaScanner)
java.lang.String access$1800(android.media.MediaScanner)
boolean access$1702(android.media.MediaScanner,boolean)
boolean access$1900(android.media.MediaScanner)
java.lang.String access$2000(android.media.MediaScanner)
boolean access$1902(android.media.MediaScanner,boolean)
android.content.Context access$2100(android.media.MediaScanner)
boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)
void addNoMediaFolder(java.lang.String)
void <init>(android.media.MediaScanner,android.media.MediaScanner$1)
void <init>(android.media.AsyncPlayer$1)
void native_setup(int,int)
boolean startTone(int,int)
void dispatchAudioFocusChange(int,java.lang.String)
void setLooping(boolean)
void startSound(android.media.AsyncPlayer$Command)
void enqueueLocked(android.media.AsyncPlayer$Command)
void play(android.content.Context,android.net.Uri,boolean,int)
void <init>(android.media.AsyncPlayer)
void setUsesWakeLock(android.content.Context)
java.lang.String access$000(android.media.AsyncPlayer)
java.util.LinkedList access$100(android.media.AsyncPlayer)
void access$200(android.media.AsyncPlayer,android.media.AsyncPlayer$Command)
android.media.MediaPlayer access$300(android.media.AsyncPlayer)
android.media.MediaPlayer access$302(android.media.AsyncPlayer,android.media.MediaPlayer)
android.media.AsyncPlayer$Thread access$402(android.media.AsyncPlayer,android.media.AsyncPlayer$Thread)
void access$500(android.media.AsyncPlayer)
void <init>(android.media.MediaRecorder)
void <init>(android.media.JetPlayer,android.media.JetPlayer,android.os.Looper)
java.lang.Object access$000(android.media.JetPlayer)
android.media.JetPlayer$OnJetEventListener access$100(android.media.JetPlayer)
void onJetEvent(android.media.JetPlayer,short,byte,byte,byte,byte)
void onJetUserIdUpdate(android.media.JetPlayer,int,int)
void onJetNumQueuedSegmentUpdate(android.media.JetPlayer,int)
void onJetPauseUpdate(android.media.JetPlayer,int)
void access$200(java.lang.String)
void <init>(android.media.AudioService$AudioHandler)
void access$3400(android.media.AudioService$AudioHandler,android.media.MediaPlayer)
android.media.MiniThumbFile instance(android.net.Uri)
java.lang.String randomAccessFilePath(int)
void removeOldFile()
java.nio.channels.FileChannel getChannel()
java.io.RandomAccessFile miniThumbDataFile()
java.nio.ByteBuffer allocateDirect(int)
java.nio.channels.FileLock lock(long,long,boolean)
int read(java.nio.ByteBuffer,long)
long getMagic(long)
java.nio.ByteBuffer putLong(long)
java.nio.ByteBuffer put(byte[])
int write(java.nio.ByteBuffer,long)
void saveMiniThumbToFile(byte[],long,long)
java.nio.ByteBuffer get(byte[],int,int)
byte[] getMiniThumbFromFile(long,byte[])
void addFileType(java.lang.String,int,java.lang.String)
java.util.List getAudioDecoders()
boolean isWMAEnabled()
java.util.List getVideoDecoders()
boolean isWMVEnabled()
void <init>(java.io.InputStream,int,int)
void fir21(byte[],int,byte[],int,int)
android.media.DecoderCapabilities$VideoDecoder[] values()
android.media.DecoderCapabilities$VideoDecoder valueOf(java.lang.String)
android.media.IAudioService asInterface(android.os.IBinder)
android.media.IAudioFocusDispatcher asInterface(android.os.IBinder)
int access$2400(android.media.AudioService)
int access$1302(android.media.AudioService$VolumeStreamState$VolumeDeathHandler,int)
int setMode(int)
int setRouting(int,int,int)
int getRouting(int)
void setErrorCallback(android.media.AudioSystem$ErrorCallback)
void errorCallbackFromNative(int)
void createThumbnailFromEXIF(java.lang.String,int,int,android.media.ThumbnailUtils$SizedThumbnailBitmap)
int computeSampleSize(android.graphics.BitmapFactory$Options,int,int)
android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap,int,int,int)
android.graphics.Bitmap createImageThumbnail(java.lang.String,int)
android.graphics.Bitmap getFrameAtTime(long)
android.graphics.Bitmap createVideoThumbnail(java.lang.String,int)
android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap,int,int)
android.graphics.Bitmap transform(android.graphics.Matrix,android.graphics.Bitmap,int,int,int)
int computeInitialSampleSize(android.graphics.BitmapFactory$Options,int,int)
double min(double,double)
android.os.ParcelFileDescriptor makeInputStream(android.net.Uri,android.content.ContentResolver)
void closeSilently(android.os.ParcelFileDescriptor)
android.graphics.Bitmap makeBitmap(int,int,android.net.Uri,android.content.ContentResolver,android.os.ParcelFileDescriptor,android.graphics.BitmapFactory$Options)
android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)
android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)
byte[] getThumbnail()
android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)
void <init>(android.media.SoundPool,android.media.SoundPool,android.os.Looper)
java.lang.Object access$000(android.media.SoundPool)
android.media.SoundPool$OnLoadCompleteListener access$100(android.media.SoundPool)
void onLoadComplete(android.media.SoundPool,int,int)
void <init>(android.media.AudioService,android.os.IBinder)
java.lang.Object access$5200()
void access$5300(android.media.AudioService,android.os.IBinder)
java.lang.Object access$5000()
boolean access$5100(android.media.AudioService)
java.util.Stack access$5400(android.media.AudioService)
boolean empty()
void abortBroadcast()
void <init>(android.media.AudioService,android.media.AudioService$1)
java.util.ArrayList access$1400(android.media.AudioService)
void clearCount(boolean)
void requestScoState(int)
void incCount()
void decCount()
int totalCount()
boolean access$1500(android.media.AudioService)
int access$1100(android.media.AudioService)
android.bluetooth.BluetoothHeadset access$1600(android.media.AudioService)
void <init>(android.media.AudioManager$FocusEventHandlerDelegate,android.os.Looper,android.media.AudioManager)
java.lang.Object access$000(android.media.AudioManager)
android.media.AudioManager$OnAudioFocusChangeListener access$100(android.media.AudioManager,java.lang.String)
void onAudioFocusChange(int)
void <init>(java.lang.String[],java.lang.String[],android.media.MediaScannerConnection$OnScanCompletedListener)
void scanNextPath()
void onMediaScannerConnected()
void <init>(int,int,int,int,int,int,int,int,int)
android.media.CamcorderProfile get(int,int)
android.media.CamcorderProfile get(int)
android.media.CamcorderProfile native_get_camcorder_profile(int,int)
void <init>(int,int,int,int,int,int,int,int,int,int,int,int)
int native_setup(java.lang.Object,int,int[])
boolean native_getEnabled()
int native_setEnabled(boolean)
int setEnabled(boolean)
boolean getEnabled()
int native_setCaptureSize(int)
int setCaptureSize(int)
int native_getCaptureSize()
int getCaptureSize()
int native_getSamplingRate()
int getSamplingRate()
int native_getWaveForm(byte[])
int getWaveForm(byte[])
int native_getFft(byte[])
int getFft(byte[])
int native_setPeriodicCapture(int,boolean,boolean)
void <init>(android.media.audiofx.Visualizer,android.media.audiofx.Visualizer,android.os.Looper)
int setDataCaptureListener(android.media.audiofx.Visualizer$OnDataCaptureListener,int,boolean,boolean)
java.lang.Object access$000(android.media.audiofx.Visualizer)
android.media.audiofx.Visualizer$OnDataCaptureListener access$100(android.media.audiofx.Visualizer)
void <init>(java.util.UUID,java.util.UUID,int,int)
byte[] shortToByteArray(short)
int setParameter(int,byte[])
void checkStatus(int)
void setRoomLevel(short)
int getParameter(int,byte[])
short byteArrayToShort(byte[])
short getRoomLevel()
void setRoomHFLevel(short)
short getRoomHFLevel()
byte[] intToByteArray(int)
void setDecayTime(int)
int byteArrayToInt(byte[])
int getDecayTime()
void setDecayHFRatio(short)
short getDecayHFRatio()
void setReflectionsLevel(short)
short getReflectionsLevel()
void setReflectionsDelay(int)
int getReflectionsDelay()
void setReverbLevel(short)
short getReverbLevel()
void setReverbDelay(int)
int getReverbDelay()
void setDiffusion(short)
short getDiffusion()
void setDensity(short)
short getDensity()
void <init>(android.media.audiofx.EnvironmentalReverb,android.media.audiofx.EnvironmentalReverb$1)
void setParameterListener(android.media.audiofx.AudioEffect$OnParameterChangeListener)
void setParameterListener(android.media.audiofx.EnvironmentalReverb$OnParameterChangeListener)
short byteArrayToShort(byte[],int)
int byteArrayToInt(byte[],int)
android.media.audiofx.EnvironmentalReverb$Settings getProperties()
byte[] concatArrays(byte[][])
void setProperties(android.media.audiofx.EnvironmentalReverb$Settings)
java.lang.Object access$000(android.media.audiofx.EnvironmentalReverb)
android.media.audiofx.EnvironmentalReverb$OnParameterChangeListener access$100(android.media.audiofx.EnvironmentalReverb)
java.lang.String toString(short)
int setParameter(int,short)
void setPreset(short)
int getParameter(int,short[])
short getPreset()
void <init>(android.media.audiofx.PresetReverb,android.media.audiofx.PresetReverb$1)
void setParameterListener(android.media.audiofx.PresetReverb$OnParameterChangeListener)
android.media.audiofx.PresetReverb$Settings getProperties()
void setProperties(android.media.audiofx.PresetReverb$Settings)
java.lang.Object access$000(android.media.audiofx.PresetReverb)
android.media.audiofx.PresetReverb$OnParameterChangeListener access$100(android.media.audiofx.PresetReverb)
void <init>(android.media.audiofx.PresetReverb)
void onParameterChange(android.media.audiofx.PresetReverb,int,int,short)
void onParameterChange(android.media.audiofx.AudioEffect,int,byte[],byte[])
void <init>(android.media.audiofx.BassBoost)
java.lang.Object access$000(android.media.audiofx.BassBoost)
android.media.audiofx.BassBoost$OnParameterChangeListener access$100(android.media.audiofx.BassBoost)
void onParameterChange(android.media.audiofx.BassBoost,int,int,short)
void <init>(android.media.audiofx.BassBoost,android.media.audiofx.BassBoost$1)
int getParameter(int,int[])
boolean getStrengthSupported()
void setStrength(short)
short getRoundedStrength()
void <init>(android.media.audiofx.Virtualizer,android.media.audiofx.Virtualizer$1)
void setParameterListener(android.media.audiofx.Virtualizer$OnParameterChangeListener)
android.media.audiofx.Virtualizer$Settings getProperties()
void setProperties(android.media.audiofx.Virtualizer$Settings)
java.lang.Object access$000(android.media.audiofx.Virtualizer)
android.media.audiofx.Virtualizer$OnParameterChangeListener access$100(android.media.audiofx.Virtualizer)
void <init>(android.media.audiofx.AudioEffect,android.media.audiofx.AudioEffect,android.os.Looper)
android.media.audiofx.AudioEffect$OnEnableStatusChangeListener access$000(android.media.audiofx.AudioEffect)
void onEnableStatusChange(android.media.audiofx.AudioEffect,boolean)
android.media.audiofx.AudioEffect$OnControlStatusChangeListener access$100(android.media.audiofx.AudioEffect)
void onControlStatusChange(android.media.audiofx.AudioEffect,boolean)
android.media.audiofx.AudioEffect$OnParameterChangeListener access$200(android.media.audiofx.AudioEffect)
void <init>(android.media.audiofx.EnvironmentalReverb)
void onParameterChange(android.media.audiofx.EnvironmentalReverb,int,int,int)
void onWaveFormDataCapture(android.media.audiofx.Visualizer,byte[],int)
void onFftDataCapture(android.media.audiofx.Visualizer,byte[],int)
int native_setup(java.lang.Object,java.lang.String,java.lang.String,int,int,int[],java.lang.Object[])
void checkState(java.lang.String)
android.media.audiofx.AudioEffect$Descriptor getDescriptor()
java.lang.Object[] native_query_effects()
android.media.audiofx.AudioEffect$Descriptor[] queryEffects()
int native_setParameter(int,byte[],int,byte[])
int setParameter(byte[],byte[])
int setParameter(int,int)
int setParameter(int[],int[])
int setParameter(int[],short[])
int setParameter(int[],byte[])
int native_getParameter(int,byte[],int[],byte[])
int getParameter(byte[],byte[])
int getParameter(int[],int[])
int getParameter(int[],short[])
int getParameter(int[],byte[])
int native_command(int,int,byte[],int[],byte[])
int command(int,byte[],byte[])
boolean native_hasControl()
boolean hasControl()
void createNativeEventHandler()
void setEnableStatusListener(android.media.audiofx.AudioEffect$OnEnableStatusChangeListener)
void setControlStatusListener(android.media.audiofx.AudioEffect$OnControlStatusChangeListener)
java.nio.ByteBuffer putShort(short)
void <init>(android.media.audiofx.Equalizer)
java.lang.Object access$000(android.media.audiofx.Equalizer)
android.media.audiofx.Equalizer$OnParameterChangeListener access$100(android.media.audiofx.Equalizer)
void onParameterChange(android.media.audiofx.Equalizer,int,int,int,int)
void <init>(android.media.audiofx.Equalizer,android.media.audiofx.Equalizer$1)
void setParameterListener(android.media.audiofx.BassBoost$OnParameterChangeListener)
android.media.audiofx.BassBoost$Settings getProperties()
void setProperties(android.media.audiofx.BassBoost$Settings)
short getNumberOfBands()
short getNumberOfPresets()
short[] getBandLevelRange()
void setBandLevel(short,short)
short getBandLevel(short)
int getCenterFreq(short)
int[] getBandFreqRange(short)
short getBand(int)
short getCurrentPreset()
void usePreset(short)
java.lang.String getPresetName(short)
void setParameterListener(android.media.audiofx.Equalizer$OnParameterChangeListener)
android.media.audiofx.Equalizer$Settings getProperties()
void setProperties(android.media.audiofx.Equalizer$Settings)
java.lang.String concat(java.lang.String)
void <init>(android.media.audiofx.Virtualizer)
void onParameterChange(android.media.audiofx.Virtualizer,int,int,short)
void setSystemVolume(android.media.AudioService$VolumeStreamState)
void persistVolume(android.media.AudioService$VolumeStreamState,boolean,boolean)
void persistRingerMode()
int access$2900(android.media.AudioService)
void persistVibrateSetting()
java.lang.Object access$3000(android.media.AudioService)
android.media.SoundPool access$3100(android.media.AudioService)
int[][] access$3200(android.media.AudioService)
int play(int,float,float,int,int,float)
java.lang.String[] access$3300()
void setVolume(float,float)
void playSoundEffect(int,int)
void cleanupPlayer(android.media.MediaPlayer)
int access$3500(int)
boolean isStreamActive(int)
int setParameters(java.lang.String)
java.util.HashMap access$3600(android.media.AudioService)
int setDeviceConnectionState(int,int,java.lang.String)
int setPhoneState(int)
int access$3700(android.media.AudioService)
int setForceUse(int,int)
void access$3900(android.media.AudioService,int,boolean)
void access$4000(android.media.AudioService,java.lang.String)
boolean access$5102(android.media.AudioService,boolean)
void <init>(android.media.AudioRecord,android.media.AudioRecord,android.os.Looper)
java.lang.Object access$000(android.media.AudioRecord)
android.media.AudioRecord$OnRecordPositionUpdateListener access$100(android.media.AudioRecord)
void onMarkerReached(android.media.AudioRecord)
void onPeriodicNotification(android.media.AudioRecord)
void <init>(android.content.Context,android.media.MediaScannerConnection$MediaScannerConnectionClient)
void scanFile(android.content.Context,java.lang.String[],java.lang.String[],android.media.MediaScannerConnection$OnScanCompletedListener)
android.media.IMediaScannerService asInterface(android.os.IBinder)
float confidence()
void set(float,float)
void getMidPoint(android.graphics.PointF)
float eyesDistance()
float pose(int)
void <init>(android.media.FaceDetector)
void <init>(android.media.FaceDetector,android.media.FaceDetector$1)
void <init>(android.media.Metadata,java.util.Date,int,java.lang.String)
void loadAttributes()
double getAttributeDouble(java.lang.String,double)
java.lang.String getAttributesNative(java.lang.String)
void saveAttributesNative(java.lang.String,java.lang.String)
void commitChangesNative(java.lang.String)
void saveAttributes()
boolean hasThumbnail()
byte[] getThumbnailNative(java.lang.String)
float convertRationalLatLonToFloat(java.lang.String,java.lang.String)
double getAltitude(double)
long getDateTime()
java.util.Date parse(java.lang.String,java.text.ParsePosition)
void setTimeZone(java.util.TimeZone)
android.os.Looper access$000(android.media.AudioTrack)
void <init>(android.media.AudioTrack,android.media.AudioTrack,android.os.Handler)
void <init>(android.content.ComponentName)
void access$4400(android.media.AudioService,java.lang.String)
void access$4500(android.media.AudioService)
java.lang.String access$4602(android.media.AudioService,java.lang.String)
boolean access$4700(android.media.AudioService)
java.lang.String access$4600(android.media.AudioService)
void access$4800(android.media.AudioService,java.lang.String)
boolean access$1502(android.media.AudioService,boolean)
void clearAllScoClients()
android.content.Context access$4900(android.media.AudioService)
java.lang.Object access$4100(android.media.AudioService)
int access$4200(android.media.AudioService)
int access$4202(android.media.AudioService,int)
int access$4300(android.media.AudioService)
int access$4302(android.media.AudioService,int)
android.media.IMediaScannerListener asInterface(android.os.IBinder)
void audioParamCheck(int,int,int,int)
void audioBuffSizeCheck(int)
int native_setup(java.lang.Object,int,int,int,int,int)
int getAudioSource()
int getAudioFormat()
int getChannelConfiguration()
int getChannelCount()
int getRecordingState()
int native_get_marker_pos()
int getNotificationMarkerPosition()
int native_get_pos_update_period()
int getPositionNotificationPeriod()
int getMinBufferSize(int,int,int)
int native_get_min_buff_size(int,int,int)
int native_start()
void startRecording()
void native_stop()
int native_read_in_byte_array(byte[],int,int)
int read(short[],int,int)
int native_read_in_short_array(short[],int,int)
int read(java.nio.ByteBuffer,int)
int native_read_in_direct_buffer(java.lang.Object,int)
void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener,android.os.Handler)
void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener)
int native_set_marker_pos(int)
int setNotificationMarkerPosition(int)
int native_set_pos_update_period(int)
int setPositionNotificationPeriod(int)
int native_get_num_video_decoders()
int native_get_video_decoder_type(int)
int native_get_num_audio_decoders()
int native_get_audio_decoder_type(int)
void audioParamCheck(int,int,int,int,int)
int native_setup(java.lang.Object,int,int,int,int,int,int,int[])
float getMinVolume()
float getMaxVolume()
int native_get_playback_rate()
int getPlaybackRate()
int getPlayState()
int native_get_native_frame_count()
int getNativeFrameCount()
int native_get_position()
int getPlaybackHeadPosition()
int native_get_output_sample_rate(int)
int getNativeOutputSampleRate(int)
int getAudioSessionId()
void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener,android.os.Handler)
void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener)
int setStereoVolume(float,float)
void native_setVolume(float,float)
int setPlaybackRate(int)
int native_set_playback_rate(int)
int native_set_position(int)
int setPlaybackHeadPosition(int)
int setLoopPoints(int,int,int)
int native_set_loop(int,int,int)
void native_start()
void native_pause()
void native_flush()
int native_write_byte(byte[],int,int,int)
int write(short[],int,int)
int native_write_short(short[],int,int,int)
int reloadStaticData()
int native_reload_static()
int attachAuxEffect(int)
int native_attachAuxEffect(int)
int setAuxEffectSendLevel(float)
void native_setAuxEffectSendLevel(float)
android.media.JetPlayer getJetPlayer()
int getMaxTracks()
boolean native_setup(java.lang.Object,int,int)
boolean native_loadJetFromFile(java.lang.String)
boolean loadJetFile(java.lang.String)
boolean native_loadJetFromFileD(java.io.FileDescriptor,long,long)
boolean loadJetFile(android.content.res.AssetFileDescriptor)
boolean native_closeJetFile()
boolean closeJetFile()
boolean native_playJet()
boolean play()
boolean native_pauseJet()
boolean pause()
boolean native_queueJetSegment(int,int,int,int,int,byte)
boolean queueJetSegment(int,int,int,int,int,byte)
boolean queueJetSegmentMuteArray(int,int,int,int,boolean[],byte)
boolean native_queueJetSegmentMuteArray(int,int,int,int,boolean[],byte)
boolean native_setMuteFlags(int,boolean)
boolean setMuteFlags(int,boolean)
boolean setMuteArray(boolean[],boolean)
boolean native_setMuteArray(boolean[],boolean)
boolean native_setMuteFlag(int,boolean,boolean)
boolean setMuteFlag(int,boolean,boolean)
boolean native_triggerClip(int)
boolean triggerClip(int)
boolean native_clearQueue()
boolean clearQueue()
void setEventListener(android.media.JetPlayer$OnJetEventListener,android.os.Handler)
void setEventListener(android.media.JetPlayer$OnJetEventListener)
void postEventFromNative(java.lang.Object,int,int,int)
int getJpegEncodingQualityParameter(int,int)
int getJpegEncodingQualityParameter(int)
int[] getImageEncodingQualityLevels(int)
int native_get_num_image_encoding_quality_levels(int)
int native_get_image_encoding_quality_level(int,int)
void sort(int[])
void <init>(android.media.AudioManager)
void <init>(android.media.MediaPlayer,android.media.MediaPlayer,android.os.Looper)
int access$000(android.media.MediaPlayer)
android.media.MediaPlayer$OnPreparedListener access$100(android.media.MediaPlayer)
android.media.MediaPlayer$OnCompletionListener access$200(android.media.MediaPlayer)
void access$300(android.media.MediaPlayer,boolean)
android.media.MediaPlayer$OnBufferingUpdateListener access$400(android.media.MediaPlayer)
android.media.MediaPlayer$OnSeekCompleteListener access$500(android.media.MediaPlayer)
android.media.MediaPlayer$OnVideoSizeChangedListener access$600(android.media.MediaPlayer)
android.media.MediaPlayer$OnErrorListener access$700(android.media.MediaPlayer)
android.media.MediaPlayer$OnInfoListener access$800(android.media.MediaPlayer)
boolean onInfo(android.media.MediaPlayer,int,int)
android.media.IAudioService getService()
void setStreamSolo(int,boolean)
void setStreamMute(int,boolean)
boolean isBluetoothScoAvailableOffCall()
void startBluetoothSco()
void stopBluetoothSco()
void setBluetoothA2dpOn(boolean)
int getDeviceConnectionState(int,java.lang.String)
void setWiredHeadsetOn(boolean)
boolean isWiredHeadsetOn()
int muteMicrophone(boolean)
void setMicrophoneMute(boolean)
boolean isMicrophoneMuted()
boolean isMicrophoneMute()
void setRouting(int,int,int)
boolean isMusicActive()
void setParameter(java.lang.String,java.lang.String)
java.lang.String getParameters(java.lang.String)
boolean querySoundEffectsEnabled()
void playSoundEffect(int,float)
void loadSoundEffects()
android.media.AudioManager$OnAudioFocusChangeListener findFocusListener(java.lang.String)
java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)
void registerAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)
void unregisterAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)
int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,int,int)
int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener)
android.media.AudioManager$FocusEventHandlerDelegate access$200(android.media.AudioManager)
android.media.AudioService$AudioHandler access$102(android.media.AudioService,android.media.AudioService$AudioHandler)
void <init>(android.media.MediaScanner,java.lang.String,android.net.Uri)
boolean access$2200(android.media.MediaScanner,java.lang.String,java.lang.String,android.net.Uri,android.content.ContentValues,int)
int native_setup(java.lang.Object,int,int,int)
int _load(java.lang.String,int)
int load(java.lang.String,int)
int _load(java.io.FileDescriptor,long,long,int)
android.content.res.AssetFileDescriptor openRawResourceFd(int)
int load(android.content.Context,int,int)
int load(android.content.res.AssetFileDescriptor,int)
int load(java.io.FileDescriptor,long,long,int)
void setOnLoadCompleteListener(android.media.SoundPool$OnLoadCompleteListener)
void createAudioSystemThread()
void readPersistedSettings()
void createStreamStates()
void setRingerModeInt(int,boolean)
void listen(android.telephony.PhoneStateListener,int)
void waitForAudioHandlerCreation()
int rescaleIndex(int,int,int)
void setStreamVolumeIndex(int,int)
void broadcastRingerMode()
void broadcastVibrateSetting(int)
int setStreamVolumeIndex(int,int)
int getActiveStreamType(int)
void ensureValidDirection(int)
void ensureValidStreamType(int)
boolean checkForRingerModeChange(int,int)
void sendMsg(android.os.Handler,int,int,int,int,int,java.lang.Object,int)
void sendVolumeUpdate(int,int,int)
void setStreamVolumeInt(int,int,boolean,boolean)
boolean isStreamAffectedByMute(int)
boolean isStreamMutedByRingerMode(int)
int getValueForVibrateSetting(int,int,int)
boolean checkAudioSettingsPermission(java.lang.String)
boolean unload(int)
android.media.AudioService$ScoClient getScoClient(android.os.IBinder)
int getForceUse(int)
int getMsg(int,int)
int getMsgBase(int)
void makeA2dpDeviceAvailable(java.lang.String)
void makeA2dpDeviceUnavailableNow(java.lang.String)
void makeA2dpDeviceUnavailableLater(java.lang.String)
void cancelA2dpDeviceTimeout()
boolean hasScheduledA2dpDockTimeout()
boolean canReassignAudioFocus()
void notifyTopOfAudioFocusStack()
void dumpFocusStack(java.io.PrintWriter)
java.lang.Object pop()
void removeFocusStackEntry(java.lang.String,boolean)
void removeFocusStackEntryForClient(android.os.IBinder)
void <init>(int,int,boolean,android.media.IAudioFocusDispatcher,android.os.IBinder,java.lang.String)
java.lang.Object push(java.lang.Object)
void dumpRCStack(java.io.PrintWriter)
void pushMediaButtonReceiver(android.content.ComponentName)
void removeMediaButtonReceiver(android.content.ComponentName)
java.util.ArrayList access$1000(android.media.AudioService)
int access$1102(android.media.AudioService,int)
void setFilterColumnsList(int)
void setStopPreviousRingtone(boolean)
boolean getStopPreviousRingtone()
boolean getIncludeDrm()
android.database.Cursor getInternalRingtones()
android.database.Cursor getDrmRingtones()
android.database.Cursor getMediaRingtones()
android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int)
android.net.Uri getUriFromCursor(android.database.Cursor)
android.net.Uri getValidRingtoneUriFromCursorAndClose(android.content.Context,android.database.Cursor)
android.net.Uri getValidRingtoneUri(android.content.Context)
java.lang.String constructBooleanTrueWhereClause(java.util.List)
java.lang.String getSettingForType(int)
void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)
android.net.Uri getDefaultUri(int)
android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)
android.graphics.Bitmap _getFrameAtTime(long,int)
android.graphics.Bitmap getFrameAtTime(long,int)
android.graphics.Bitmap getFrameAtTime()
byte[] getEmbeddedPicture(int)
byte[] getEmbeddedPicture()
boolean checkMetadataId(int)
boolean scanAllRecords(android.os.Parcel,int)
boolean parse(android.os.Parcel)
void checkType(int,int)
byte[] getByteArray(int)
java.util.Date getDate(int)
android.media.Metadata$TimedText getTimedText(int)
int lastSytemId()
int firstCustomId()
int lastType()
java.util.Set singleton(java.lang.Object)
android.os.Parcel newRequest()
int native_invoke(android.os.Parcel,android.os.Parcel)
int invoke(android.os.Parcel,android.os.Parcel)
void _setVideoSurface()
void updateSurfaceScreenOn()
android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)
android.media.MediaPlayer create(android.content.Context,android.net.Uri)
android.media.MediaPlayer create(android.content.Context,int)
void setDataSource(java.lang.String,java.util.Map)
void stayAwake(boolean)
void _start()
void _stop()
void _pause()
void setWakeMode(android.content.Context,int)
boolean native_getMetadata(boolean,boolean,android.os.Parcel)
int dataCapacity()
void setDataCapacity(int)
int native_setMetadataFilter(android.os.Parcel)
int setMetadataFilter(java.util.Set,java.util.Set)
void _release()
void _reset()
int native_suspend_resume(boolean)
void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)
void setDefaultRingtoneFileNames()
void prescan(java.lang.String)
boolean inScanDirectory(java.lang.String,java.lang.String[])
void pruneDeadThumbnailFiles()
void processPlayLists()
android.net.Uri getContentUri(java.lang.String)
void postscan(java.lang.String[])
android.content.IContentProvider acquireProvider(java.lang.String)
void initialize(java.lang.String)
void processDirectory(java.lang.String,java.lang.String,android.media.MediaScannerClient)
void scanDirectories(java.lang.String[],java.lang.String)
long lastModified()
android.net.Uri scanSingleFile(java.lang.String,java.lang.String,java.lang.String)
int matchPaths(java.lang.String,java.lang.String)
boolean addPlayListEntry(java.lang.String,java.lang.String,android.net.Uri,android.content.ContentValues,int)
void processM3uPlayList(java.lang.String,java.lang.String,android.net.Uri,android.content.ContentValues)
void processPlsPlayList(java.lang.String,java.lang.String,android.net.Uri,android.content.ContentValues)
void processWplPlayList(java.lang.String,java.lang.String,android.net.Uri)
void processFile(java.lang.String,java.lang.String,android.media.MediaScannerClient)
int GsmAmrEncoderNew()
void GsmAmrEncoderInitialize(int)
int GsmAmrEncoderEncode(int,byte[],int,byte[],int)
void GsmAmrEncoderCleanup(int)
void GsmAmrEncoderDelete(int)
int fft_initialize(int,int,int)
int findFaces(android.graphics.Bitmap,android.media.FaceDetector$Face[])
int fft_detect(android.graphics.Bitmap)
void fft_get_face(android.media.FaceDetector$Face,int)
void fft_destroy()
boolean save()
void load(java.io.InputStream,boolean)
boolean load()
android.gesture.Gesture deserialize(java.io.DataInputStream)
void closeStream(java.io.Closeable)
long access$002(android.gesture.Gesture,long)
android.gesture.Gesture createFromParcel(android.os.Parcel)
android.gesture.Gesture[] newArray(int)
void addInstance(android.gesture.Instance)
java.util.ArrayList getInstances()
void removeInstance(long)
void removeInstances(java.lang.String)
void <init>(android.gesture.GestureOverlayView)
boolean access$100(android.gesture.GestureOverlayView)
long access$200(android.gesture.GestureOverlayView)
long access$300(android.gesture.GestureOverlayView)
void access$400(android.gesture.GestureOverlayView)
boolean access$502(android.gesture.GestureOverlayView,boolean)
boolean access$102(android.gesture.GestureOverlayView,boolean)
boolean access$602(android.gesture.GestureOverlayView,boolean)
android.graphics.Path access$700(android.gesture.GestureOverlayView)
android.gesture.Gesture access$802(android.gesture.GestureOverlayView,android.gesture.Gesture)
void access$900(android.gesture.GestureOverlayView,int)
android.view.animation.AccelerateDecelerateInterpolator access$1100(android.gesture.GestureOverlayView)
float access$1002(android.gesture.GestureOverlayView,float)
float access$1000(android.gesture.GestureOverlayView)
boolean access$1202(android.gesture.GestureOverlayView,boolean)
void <init>(android.gesture.GestureOverlayView,android.gesture.GestureOverlayView$1)
android.gesture.GestureLibrary fromFile(java.io.File)
android.gesture.GestureLibrary fromFile(java.lang.String)
android.gesture.GestureLibrary fromPrivateFile(android.content.Context,java.lang.String)
android.gesture.GestureLibrary fromRawResource(android.content.Context,int)
void <init>(float,float,float,float,float)
android.graphics.Path toPath()
android.gesture.Learner getLearner()
void setOrientationStyle(int)
int getOrientationStyle()
void setSequenceType(int)
int getSequenceType()
java.util.Set getGestureEntries()
java.util.ArrayList recognize(android.gesture.Gesture)
void addGesture(java.lang.String,android.gesture.Gesture)
void removeGesture(java.lang.String,android.gesture.Gesture)
void removeEntry(java.lang.String)
java.util.ArrayList getGestures(java.lang.String)
void <init>(float,float,long)
android.gesture.GesturePoint deserialize(java.io.DataInputStream)
void <init>(java.lang.String,double)
void <init>(long,float[],java.lang.String)
void normalize()
float[] temporalSampler(int,android.gesture.Gesture)
long getID()
float[] spatialSampler(android.gesture.Gesture)
android.gesture.Instance createInstance(int,int,android.gesture.Gesture,java.lang.String)
float[] spatialSampling(android.gesture.Gesture,int,boolean)
java.util.ArrayList getStrokes()
float[] temporalSampling(android.gesture.GestureStroke,int)
float[] computeCentroid(float[])
float[] translate(float[],float,float)
float[] rotate(float[],float)
int getStrokesCount()
void addStroke(android.gesture.GestureStroke)
float getLength()
android.graphics.RectF getBoundingBox()
android.graphics.Path toPath(android.graphics.Path)
android.graphics.Path getPath()
void addPath(android.graphics.Path)
android.graphics.Path toPath(android.graphics.Path,int,int,int,int)
android.graphics.Path toPath(int,int,int,int)
android.graphics.Path toPath(float,float,int)
void setID(long)
android.graphics.Bitmap toBitmap(int,int,int,int,int)
android.graphics.Bitmap toBitmap(int,int,int,int)
void serialize(java.io.DataOutputStream)
android.gesture.GestureStroke deserialize(java.io.DataInputStream)
void setPaintAlpha(int)
java.util.ArrayList getCurrentStroke()
void setGestureColor(int)
void setUncertainGestureColor(int)
int getUncertainGestureColor()
int getGestureColor()
float getGestureStrokeWidth()
void setGestureStrokeWidth(float)
int getGestureStrokeType()
void setGestureStrokeType(int)
float getGestureStrokeLengthThreshold()
void setGestureStrokeLengthThreshold(float)
float getGestureStrokeSquarenessTreshold()
void setGestureStrokeSquarenessTreshold(float)
float getGestureStrokeAngleThreshold()
void setGestureStrokeAngleThreshold(float)
boolean isEventsInterceptionEnabled()
void setEventsInterceptionEnabled(boolean)
boolean isFadeEnabled()
void setFadeEnabled(boolean)
android.gesture.Gesture getGesture()
void clear(boolean)
void setCurrentColor(int)
void addPath(android.graphics.Path,float,float)
void setGesture(android.gesture.Gesture)
android.graphics.Path getGesturePath()
void set(android.graphics.Path)
android.graphics.Path getGesturePath(android.graphics.Path)
boolean isGestureVisible()
void setGestureVisible(boolean)
long getFadeOffset()
void setFadeOffset(long)
void addOnGestureListener(android.gesture.GestureOverlayView$OnGestureListener)
void removeOnGestureListener(android.gesture.GestureOverlayView$OnGestureListener)
void removeAllOnGestureListeners()
void addOnGesturePerformedListener(android.gesture.GestureOverlayView$OnGesturePerformedListener)
void removeOnGesturePerformedListener(android.gesture.GestureOverlayView$OnGesturePerformedListener)
void removeAllOnGesturePerformedListeners()
void addOnGesturingListener(android.gesture.GestureOverlayView$OnGesturingListener)
void removeOnGesturingListener(android.gesture.GestureOverlayView$OnGesturingListener)
void removeAllOnGesturingListeners()
boolean isGesturing()
android.graphics.Paint getGesturePaint()
void clear(boolean,boolean,boolean)
void cancelClearAnimation()
void onGestureCancelled(android.gesture.GestureOverlayView,android.view.MotionEvent)
void onGesturingEnded(android.gesture.GestureOverlayView)
void cancelGesture()
boolean processEvent(android.view.MotionEvent)
void touchDown(android.view.MotionEvent)
android.graphics.Rect touchMove(android.view.MotionEvent)
void touchUp(android.view.MotionEvent,boolean)
void onGestureStarted(android.gesture.GestureOverlayView,android.view.MotionEvent)
void quadTo(float,float,float,float)
android.gesture.OrientedBoundingBox computeOrientedBoundingBox(java.util.ArrayList)
void onGesturingStarted(android.gesture.GestureOverlayView)
void onGesture(android.gesture.GestureOverlayView,android.view.MotionEvent)
void onGestureEnded(android.gesture.GestureOverlayView,android.view.MotionEvent)
void cancelGesture(android.view.MotionEvent)
void onGesturePerformed(android.gesture.GestureOverlayView,android.gesture.Gesture)
void fireOnGesturePerformed()
float[] spatialSampling(android.gesture.Gesture,int)
void fill(float[],float)
float centerX()
float centerY()
void plot(float,float,float[],int)
float[][] computeCoVariance(float[])
float computeTotalLength(float[])
float computeStraightness(float[])
float computeStraightness(float[],float)
float squaredEuclideanDistance(float[],float[])
float cosineDistance(float[],float[])
float minimumCosineDistance(float[],float[],int)
android.gesture.OrientedBoundingBox computeOrientedBoundingBox(float[],float[])
android.gesture.OrientedBoundingBox computeOrientedBoundingBox(float[])
float[] computeOrientation(float[][])
float[] scale(float[],float,float)
java.util.ArrayList classify(int,int,float[])
boolean hasChanged()
void save(java.io.OutputStream,boolean)
void save(java.io.OutputStream)
void writeShort(int)
void load(java.io.InputStream)
short readShort()
void readFormatV1(java.io.DataInputStream)
java.lang.String readUTF()
int compare(android.gesture.Prediction,android.gesture.Prediction)
boolean canWrite()
void union(float,float)
void <init>(android.graphics.RectF,float,float[],long[])
void makePath()
void draw(android.graphics.Canvas,android.graphics.Paint)
void clearPath()
android.gesture.OrientedBoundingBox computeOrientedBoundingBox()
void onBindView(android.view.View)
java.lang.CharSequence getSummary()
void onClick()
void setSummaryOn(java.lang.CharSequence)
void setSummaryOn(int)
java.lang.CharSequence getSummaryOn()
void setSummaryOff(java.lang.CharSequence)
void setSummaryOff(int)
java.lang.CharSequence getSummaryOff()
boolean getDisableDependentsState()
void setDisableDependentsState(boolean)
int compareTo(android.preference.PreferenceGroupAdapter$PreferenceLayout)
void <init>(android.preference.PreferenceGroupAdapter$1)
java.lang.String access$202(android.preference.PreferenceGroupAdapter$PreferenceLayout,java.lang.String)
int access$302(android.preference.PreferenceGroupAdapter$PreferenceLayout,int)
int access$402(android.preference.PreferenceGroupAdapter$PreferenceLayout,int)
void <init>(android.app.Activity,int)
java.lang.String getDefaultSharedPreferencesName(android.content.Context)
void setSharedPreferencesName(java.lang.String)
java.util.List queryIntentActivities(android.content.Intent)
void <init>(android.content.Context,android.preference.PreferenceManager)
java.lang.Object inflate(org.xmlpull.v1.XmlPullParser,android.preference.GenericInflater$Parent,boolean)
void onAttachedToHierarchy(android.preference.PreferenceManager)
android.preference.PreferenceScreen inflateFromIntent(android.content.Intent,android.preference.PreferenceScreen)
void setNoCommit(boolean)
java.lang.Object inflate(int,android.preference.GenericInflater$Parent,boolean)
android.preference.PreferenceScreen inflateFromResource(android.content.Context,int,android.preference.PreferenceScreen)
android.preference.PreferenceScreen createPreferenceScreen(android.content.Context)
long getNextId()
java.lang.String getSharedPreferencesName()
int getSharedPreferencesMode()
void setSharedPreferencesMode(int)
android.content.SharedPreferences getSharedPreferences()
int getDefaultSharedPreferencesMode()
android.preference.PreferenceScreen getPreferenceScreen()
boolean setPreferences(android.preference.PreferenceScreen)
android.preference.Preference findPreference(java.lang.CharSequence)
void setDefaultValues(android.content.Context,java.lang.String,int,int,boolean)
void setDefaultValues(android.content.Context,int,boolean)
android.content.SharedPreferences$Editor getEditor()
boolean shouldCommit()
android.app.Activity getActivity()
void registerOnActivityResultListener(android.preference.PreferenceManager$OnActivityResultListener)
void unregisterOnActivityResultListener(android.preference.PreferenceManager$OnActivityResultListener)
boolean onActivityResult(int,int,android.content.Intent)
void dispatchActivityResult(int,int,android.content.Intent)
void registerOnActivityStopListener(android.preference.PreferenceManager$OnActivityStopListener)
void unregisterOnActivityStopListener(android.preference.PreferenceManager$OnActivityStopListener)
void onActivityStop()
void dispatchActivityStop()
void registerOnActivityDestroyListener(android.preference.PreferenceManager$OnActivityDestroyListener)
void unregisterOnActivityDestroyListener(android.preference.PreferenceManager$OnActivityDestroyListener)
void onActivityDestroy()
void dismissAllScreens()
void dispatchActivityDestroy()
int getNextRequestCode()
void addPreferencesScreen(android.content.DialogInterface)
void removePreferencesScreen(android.content.DialogInterface)
void dispatchNewIntent(android.content.Intent)
void setOnPreferenceTreeClickListener(android.preference.PreferenceManager$OnPreferenceTreeClickListener)
android.preference.PreferenceManager$OnPreferenceTreeClickListener getOnPreferenceTreeClickListener()
void <init>(android.preference.PreferenceGroupAdapter)
void access$100(android.preference.PreferenceGroupAdapter)
void init(android.preference.PreferenceManager)
void <init>(android.preference.GenericInflater,android.content.Context)
void <init>(android.preference.GenericInflater,android.preference.PreferenceManager,android.content.Context)
android.preference.GenericInflater cloneInContext(android.content.Context)
void setDefaultPackage(java.lang.String)
boolean onCreateCustomFromTag(org.xmlpull.v1.XmlPullParser,android.preference.Preference,android.util.AttributeSet)
android.preference.PreferenceGroup onMergeRoots(android.preference.PreferenceGroup,boolean,android.preference.PreferenceGroup)
android.preference.GenericInflater$Parent onMergeRoots(android.preference.GenericInflater$Parent,boolean,android.preference.GenericInflater$Parent)
boolean onCreateCustomFromTag(org.xmlpull.v1.XmlPullParser,java.lang.Object,android.util.AttributeSet)
android.widget.ListAdapter onCreateRootAdapter()
android.widget.ListAdapter getRootAdapter()
void <init>(android.preference.PreferenceGroup)
void onAttachedToActivity()
void bind(android.widget.ListView)
int getPreferenceCount()
void showDialog(android.os.Bundle)
android.preference.PreferenceManager getPreferenceManager()
android.app.Dialog getDialog()
void performClick(android.preference.PreferenceScreen)
boolean isOnSameScreenAsChildren()
android.preference.ListPreference$SavedState createFromParcel(android.os.Parcel)
android.preference.ListPreference$SavedState[] newArray(int)
android.preference.EditTextPreference$SavedState createFromParcel(android.os.Parcel)
android.preference.EditTextPreference$SavedState[] newArray(int)
void onBindDialogView(android.view.View)
void <init>(android.preference.VolumePreference,android.content.Context,android.widget.SeekBar,int)
void changeVolumeBy(int)
void revertVolume()
void stopSample()
void onSampleStarting(android.preference.VolumePreference$SeekBarVolumizer)
android.preference.VolumePreference$VolumeStore getVolumeStore()
void onSaveInstanceState(android.preference.VolumePreference$VolumeStore)
void onRestoreInstanceState(android.preference.VolumePreference$VolumeStore)
void setWidgetLayoutResource(int)
int getWidgetLayoutResource()
android.view.View onCreateView(android.view.ViewGroup)
android.view.View getView(android.view.View,android.view.ViewGroup)
void setEnabledStateOnViews(android.view.View,boolean)
void notifyHierarchyChanged()
void setSummary(java.lang.CharSequence)
void setSummary(int)
void setSelectable(boolean)
boolean isSelectable()
void setShouldDisableView(boolean)
boolean getShouldDisableView()
boolean hasKey()
void requireKey()
void setKey(java.lang.String)
boolean shouldPersist()
boolean onPreferenceChange(android.preference.Preference,java.lang.Object)
void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)
android.preference.Preference$OnPreferenceChangeListener getOnPreferenceChangeListener()
void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)
android.preference.Preference$OnPreferenceClickListener getOnPreferenceClickListener()
boolean onPreferenceClick(android.preference.Preference)
boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference)
int compareTo(android.preference.Preference)
void setOnPreferenceChangeInternalListener(android.preference.Preference$OnPreferenceChangeInternalListener)
void onPreferenceChange(android.preference.Preference)
void onPreferenceHierarchyChange(android.preference.Preference)
void dispatchSetInitialValue()
void registerDependency()
android.preference.Preference findPreferenceInHierarchy(java.lang.String)
void registerDependent(android.preference.Preference)
void unregisterDependent(android.preference.Preference)
void unregisterDependency()
void onDependencyChanged(android.preference.Preference,boolean)
void setDependency(java.lang.String)
java.lang.String getDependency()
void onPrepareForRemoval()
void setDefaultValue(java.lang.Object)
void tryCommit(android.content.SharedPreferences$Editor)
java.lang.String getPersistedString(java.lang.String)
boolean persistString(java.lang.String)
int getPersistedInt(int)
boolean persistInt(int)
float getPersistedFloat(float)
boolean persistFloat(float)
long getPersistedLong(long)
boolean persistLong(long)
boolean hasSpecifiedLayout()
java.lang.StringBuilder getFilterableStringBuilder()
void dispatchSaveInstanceState(android.os.Bundle)
void dispatchRestoreInstanceState(android.os.Bundle)
void <init>(android.preference.GenericInflater$Factory,android.preference.GenericInflater$Factory)
java.lang.Object onCreateItem(java.lang.String,android.content.Context,android.util.AttributeSet)
boolean onPrepareAddPreference(android.preference.Preference)
void setEntries(java.lang.CharSequence[])
void setEntries(int)
java.lang.CharSequence[] getEntries()
void setEntryValues(java.lang.CharSequence[])
void setEntryValues(int)
java.lang.CharSequence[] getEntryValues()
void setValueIndex(int)
java.lang.CharSequence getEntry()
int findIndexOfValue(java.lang.String)
void onPrepareDialogBuilder(android.app.AlertDialog$Builder)
void <init>(android.preference.ListPreference)
int access$002(android.preference.ListPreference,int)
void setDialogTitle(java.lang.CharSequence)
void setDialogTitle(int)
java.lang.CharSequence getDialogTitle()
void setDialogMessage(java.lang.CharSequence)
void setDialogMessage(int)
java.lang.CharSequence getDialogMessage()
void setDialogIcon(android.graphics.drawable.Drawable)
void setDialogIcon(int)
android.graphics.drawable.Drawable getDialogIcon()
void setPositiveButtonText(java.lang.CharSequence)
void setPositiveButtonText(int)
java.lang.CharSequence getPositiveButtonText()
void setNegativeButtonText(java.lang.CharSequence)
void setNegativeButtonText(int)
java.lang.CharSequence getNegativeButtonText()
void setDialogLayoutResource(int)
int getDialogLayoutResource()
android.view.View onCreateDialogView()
boolean needInputMethod()
void requestInputMethod(android.app.Dialog)
void setOrderingAsAdded(boolean)
boolean isOrderingAsAdded()
boolean addPreference(android.preference.Preference)
void addItemFromInflater(android.preference.Preference)
android.preference.Preference getPreference(int)
int binarySearch(java.util.List,java.lang.Object)
boolean removePreferenceInt(android.preference.Preference)
boolean removePreference(android.preference.Preference)
void sortPreferences()
void addItemFromInflater(java.lang.Object)
void setText(java.lang.String)
void onAddEditTextToDialogView(android.view.View,android.widget.EditText)
android.widget.EditText getEditText()
int getRingtoneType()
void setRingtoneType(int)
boolean getShowDefault()
void setShowDefault(boolean)
boolean getShowSilent()
void setShowSilent(boolean)
void onPrepareRingtonePickerIntent(android.content.Intent)
android.net.Uri onRestoreRingtone()
void onSaveRingtone(android.net.Uri)
android.widget.SeekBar getSeekBar(android.view.View)
void <init>(android.preference.PreferenceActivity)
android.preference.PreferenceManager onCreatePreferenceManager()
void postBindPreferences()
void bindPreferences()
void requirePreferenceManager()
void setPreferenceScreen(android.preference.PreferenceScreen)
void addPreferencesFromIntent(android.content.Intent)
void addPreferencesFromResource(int)
void access$000(android.preference.PreferenceActivity)
void syncMyPreferences()
void flattenPreferenceGroup(java.util.List,android.preference.PreferenceGroup)
void addPreferenceClassName(android.preference.Preference)
android.preference.PreferenceGroupAdapter$PreferenceLayout createPreferenceLayout(android.preference.Preference,android.preference.PreferenceGroupAdapter$PreferenceLayout)
android.preference.Preference getItem(int)
java.lang.String getDefaultPackage()
android.preference.GenericInflater$Factory getFactory()
void setFactory(android.preference.GenericInflater$Factory)
java.lang.Object inflate(int,android.preference.GenericInflater$Parent)
java.lang.Object inflate(org.xmlpull.v1.XmlPullParser,android.preference.GenericInflater$Parent)
java.lang.Object createItemFromTag(org.xmlpull.v1.XmlPullParser,java.lang.String,android.util.AttributeSet)
void rInflate(org.xmlpull.v1.XmlPullParser,java.lang.Object,android.util.AttributeSet)
java.lang.Object createItem(java.lang.String,java.lang.String,android.util.AttributeSet)
java.lang.Object onCreateItem(java.lang.String,android.util.AttributeSet)
void <init>(android.preference.VolumePreference$SeekBarVolumizer,android.os.Handler)
android.widget.SeekBar access$000(android.preference.VolumePreference$SeekBarVolumizer)
android.content.Context access$100(android.preference.VolumePreference$SeekBarVolumizer)
int access$200(android.preference.VolumePreference$SeekBarVolumizer)
android.preference.VolumePreference$SavedState createFromParcel(android.os.Parcel)
android.preference.VolumePreference$SavedState[] newArray(int)
void initSeekBar(android.widget.SeekBar)
void postSetVolume(int)
void sample()
android.widget.SeekBar getSeekBar()
android.preference.PreferenceScreen$SavedState createFromParcel(android.os.Parcel)
android.preference.PreferenceScreen$SavedState[] newArray(int)
android.preference.Preference$BaseSavedState createFromParcel(android.os.Parcel)
android.preference.Preference$BaseSavedState[] newArray(int)
android.preference.DialogPreference$SavedState createFromParcel(android.os.Parcel)
android.preference.DialogPreference$SavedState[] newArray(int)
android.preference.CheckBoxPreference$SavedState createFromParcel(android.os.Parcel)
android.preference.CheckBoxPreference$SavedState[] newArray(int)
void requestLocationUpdate()
android.telephony.CellLocation newFromBundle(android.os.Bundle)
android.telephony.CellLocation getEmpty()
void <init>(android.telephony.PhoneStateListener)
void onCellLocationChanged(android.telephony.CellLocation)
void onDataConnectionStateChanged(int)
com.android.internal.telephony.IPhoneSubInfo getSubscriberInfo()
java.lang.String getDeviceSoftwareVersion()
com.android.internal.telephony.ITelephony getITelephony()
int getPhoneTypeFromProperty()
int getPhoneTypeFromNetworkType()
java.lang.String getNetworkOperatorName()
java.lang.String getNetworkOperator()
java.lang.String getNetworkCountryIso()
int getSimState()
java.lang.String getSimOperator()
java.lang.String getSimOperatorName()
java.lang.String getSimCountryIso()
java.lang.String getSimSerialNumber()
int getBaseStationLatitude()
int getBaseStationLongitude()
void setCellLocationData(int,int,int)
android.telephony.SmsCbMessage createFromPdu(byte[])
long getTimestampMillis(byte[])
void parseBody(byte[])
int getGeographicalScope()
java.lang.String getLanguageCode()
int getMessageIdentifier()
int getMessageCode()
int getUpdateNumber()
int getMessageFormat()
boolean getEtwsEmergencyUserAlert()
boolean getEtwsPopup()
int getEtwsWarningType()
long getEtwsSecurityTimestamp()
byte[] getEtwsSecuritySignature()
java.lang.String unpackBody(byte[],int,int,int,boolean)
void appendToBody(java.lang.String)
void setFromNotifierBundle(android.os.Bundle)
void copyFrom(android.telephony.ServiceState)
void <init>(android.telephony.ServiceState)
boolean isEmergencyOnly()
boolean getIsManualSelection()
int getRadioTechnology()
int getCssIndicator()
void <init>(com.android.internal.telephony.SmsMessageBase$SubmitPduBase)
boolean isISODigit(char)
boolean isDialable(char)
boolean isReallyDialable(char)
boolean isNonSeparator(char)
boolean isStartsPostDial(char)
boolean isSeparator(char)
java.lang.String getNumberFromIntent(android.content.Intent,android.content.Context)
int minPositive(int,int)
int indexOfLastNetworkChar(java.lang.String)
boolean compare(java.lang.String,java.lang.String,boolean)
boolean compare(android.content.Context,java.lang.String,java.lang.String)
boolean compareStrictly(java.lang.String,java.lang.String)
boolean compareLoosely(java.lang.String,java.lang.String)
boolean matchIntlPrefix(java.lang.String,int)
boolean matchTrunkPrefix(java.lang.String,int)
boolean matchIntlPrefixAndCC(java.lang.String,int)
boolean compareStrictly(java.lang.String,java.lang.String,boolean)
android.telephony.PhoneNumberUtils$CountryCallingCodeAndNewIndex tryGetCountryCallingCodeAndNewIndex(java.lang.String,boolean)
int tryGetTrunkPrefixOmittedIndex(java.lang.String,int)
boolean checkPrefixIsIgnorable(java.lang.String,int,int)
int tryGetISODigit(char)
java.lang.String internalGetStrippedReversed(java.lang.String,int)
java.lang.String toCallerIDMinMatch(java.lang.String)
java.lang.String getStrippedReversed(java.lang.String)
void internalCalledPartyBCDFragmentToString(java.lang.StringBuilder,byte[],int,int)
char bcdToChar(byte)
int charToBCD(char)
boolean isDialable(java.lang.String)
boolean isWellFormedSmsAddress(java.lang.String)
boolean isNonSeparator(java.lang.String)
byte[] numberToCalledPartyBCDHelper(java.lang.String,boolean)
int getFormatTypeForLocale(java.util.Locale)
void formatNumber(android.text.Editable,int)
int getFormatTypeFromCountryCode(java.lang.String)
void formatNanpNumber(android.text.Editable)
void formatJapaneseNumber(android.text.Editable)
void format(android.text.Editable)
java.lang.String convertKeypadLettersToDigits(java.lang.String)
java.lang.String cdmaCheckAndProcessPlusCodeByNumberFormat(java.lang.String,int,int)
java.lang.String processPlusCodeWithinNanp(java.lang.String)
int findDialableIndexFromPostDialStr(java.lang.String)
java.lang.String appendPwCharBackToOrigDialStr(int,java.lang.String,java.lang.String)
java.lang.String getDefaultIdp()
boolean isTwoToNine(char)
boolean isNanp(java.lang.String)
boolean isOneNanp(java.lang.String)
boolean isCountryCallingCode(int)
android.telephony.SmsMessage$MessageClass[] values()
android.telephony.SmsMessage$MessageClass valueOf(java.lang.String)
java.lang.Integer valueOf(java.lang.String,int)
int getPsc()
void setCid(int)
android.telephony.ServiceState createFromParcel(android.os.Parcel)
android.telephony.ServiceState[] newArray(int)
android.telephony.NeighboringCellInfo createFromParcel(android.os.Parcel)
android.telephony.NeighboringCellInfo[] newArray(int)
com.android.internal.telephony.SmsMessageBase getSmsFacility()
void <init>(com.android.internal.telephony.SmsMessageBase)
android.telephony.SmsMessage newFromCMTI(java.lang.String)
android.telephony.SmsMessage newFromCDS(java.lang.String)
android.telephony.SmsMessage createFromEfRecord(int,byte[])
int[] calculateLength(java.lang.CharSequence,boolean)
java.util.ArrayList fragmentText(java.lang.String)
int[] calculateLength(java.lang.String,boolean)
android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[])
android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)
android.telephony.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)
int getStatusOnSim()
int getIndexOnSim()
void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)
java.util.ArrayList divideMessage(java.lang.String)
void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)
void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)
android.telephony.SmsManager getDefault()
boolean copyMessageToIcc(byte[],byte[],int)
void fill(byte[],byte)
boolean deleteMessageFromIcc(int)
boolean updateMessageOnIcc(int,int,byte[])
java.util.ArrayList createMessageListFromRawRecords(java.util.List)
java.util.ArrayList getAllMessagesFromIcc()
android.telephony.gsm.SmsMessage$MessageClass[] values()
android.telephony.gsm.SmsMessage$MessageClass valueOf(java.lang.String)
android.telephony.gsm.SmsMessage createFromPdu(byte[])
android.telephony.gsm.SmsMessage newFromCMT(java.lang.String[])
android.telephony.gsm.SmsMessage newFromCMTI(java.lang.String)
android.telephony.gsm.SmsMessage newFromCDS(java.lang.String)
android.telephony.gsm.SmsMessage newFromParcel(android.os.Parcel)
android.telephony.gsm.SmsMessage createFromEfRecord(int,byte[])
android.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[])
android.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)
android.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,short,byte[],boolean)
android.telephony.gsm.SmsMessage$MessageClass getMessageClass()
android.telephony.gsm.SmsManager getDefault()
boolean copyMessageToSim(byte[],byte[],int)
boolean deleteMessageFromSim(int)
boolean updateMessageOnSim(int,int,byte[])
java.util.ArrayList getAllMessagesFromSim()
android.telephony.SignalStrength createFromParcel(android.os.Parcel)
android.telephony.SignalStrength[] newArray(int)
void copyFrom(android.telephony.SignalStrength)
void <init>(android.telephony.SignalStrength)
int getGsmBitErrorRate()
int getCdmaEcio()
int getEvdoDbm()
int getEvdoEcio()
int getEvdoSnr()
android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[])
android.graphics.Bitmap getMiniThumbFromFile(android.database.Cursor,android.net.Uri,android.content.ContentResolver,android.graphics.BitmapFactory$Options)
void cancelThumbnailRequest(android.content.ContentResolver,long,android.net.Uri,long)
android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options,android.net.Uri,boolean)
android.database.Cursor search(android.content.ContentResolver,java.lang.String)
android.content.ComponentName uriToComponentName(android.net.Uri)
android.net.Uri componentNameToUri(java.lang.String,java.lang.String)
int getTypeResource(java.lang.Integer)
android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)
android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)
android.net.Uri lookupContact(android.content.ContentResolver,android.net.Uri)
void markAsContacted(android.content.ContentResolver,long)
android.net.Uri getContentUriForPath(java.lang.String)
java.lang.CharSequence getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)
java.lang.CharSequence getDisplayLabel(android.content.Context,int,java.lang.CharSequence,java.lang.CharSequence[])
int getTypeLabelResource(int)
void <init>(android.database.Cursor,android.content.ContentResolver)
android.content.EntityIterator newEntityIterator(android.database.Cursor,android.content.ContentResolver)
void <init>(android.database.Cursor,android.content.ContentProviderClient)
android.content.EntityIterator newEntityIterator(android.database.Cursor,android.content.ContentProviderClient)
void addSubValue(android.net.Uri,android.content.ContentValues)
android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)
long tryGetMyContactsGroupId(android.content.ContentResolver)
android.net.Uri addToGroup(android.content.ContentResolver,long,long)
android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)
android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)
android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)
android.database.Cursor queryGroups(android.content.ContentResolver,long)
void setPhotoData(android.content.ContentResolver,android.net.Uri,byte[])
android.graphics.Bitmap loadPlaceholderPhoto(int,android.content.Context,android.graphics.BitmapFactory$Options)
android.graphics.Bitmap loadContactPhoto(android.content.Context,android.net.Uri,int,android.graphics.BitmapFactory$Options)
java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)
void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)
java.lang.String getGTalkDeviceId(long)
android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)
int delete(android.content.ContentResolver,java.lang.String,java.lang.String[])
int deleteCalendarsForAccount(android.content.ContentResolver,android.accounts.Account)
void <init>(java.lang.String,android.net.Uri,java.lang.String)
android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)
long getOrCreateThreadId(android.content.Context,java.lang.String)
java.lang.String extractAddrSpec(java.lang.String)
android.net.Uri addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean)
android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)
boolean saveMessage(android.content.ContentResolver,android.net.Uri,java.lang.String)
void cancelThumbnailRequest(android.content.ContentResolver,long)
android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,int,android.graphics.BitmapFactory$Options)
android.graphics.Bitmap getThumbnail(android.content.ContentResolver,long,long,int,android.graphics.BitmapFactory$Options)
void cancelThumbnailRequest(android.content.ContentResolver,long,long)
void removeExpiredEntries(android.content.Context)
android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,long,int)
java.lang.String getLastOutgoingCall(android.content.Context)
void setPresenceIcon(android.widget.ImageView,int)
java.io.Serializable getSerializableExtra(java.lang.String)
android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)
boolean isStatusInformational(int)
boolean isStatusClientError(int)
boolean isStatusServerError(int)
void <init>(android.provider.ContactsContract$1)
void addWord(android.content.Context,java.lang.String,int,int)
android.database.Cursor query(android.content.ContentResolver,java.lang.String[])
java.lang.String extractValue(android.pim.ICalendar$Component,java.lang.String)
boolean putString(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)
android.net.Uri getUriFor(android.net.Uri,java.lang.String)
long getLong(android.content.ContentResolver,java.lang.String)
float getFloat(android.content.ContentResolver,java.lang.String,float)
float getFloat(android.content.ContentResolver,java.lang.String)
boolean putFloat(android.content.ContentResolver,java.lang.String,float)
java.lang.String getBluetoothHeadsetPriorityKey(java.lang.String)
boolean isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)
void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)
android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)
android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)
long findNextAlarmTime(android.content.ContentResolver,long)
void scheduleAlarm(android.content.Context,android.app.AlarmManager,long)
void rescheduleMissedAlarms(android.content.ContentResolver,android.content.Context,android.app.AlarmManager)
boolean alarmExists(android.content.ContentResolver,long,long,long)
int getProtocolLabelResource(int)
java.lang.CharSequence getProtocolLabel(android.content.res.Resources,int,java.lang.CharSequence)
java.lang.String encodePredefinedImProtocol(int)
java.lang.String encodeCustomImProtocol(java.lang.String)
java.lang.Object decodeImProtocol(java.lang.String)
java.lang.String lookupProviderNameFromId(int)
java.lang.CharSequence getDisplayLabel(android.content.Context,int,int,java.lang.CharSequence)
void addPostalLocation(android.content.Context,long,double,double)
android.net.Uri getContentUri(java.lang.String,long)
android.net.Uri getMediaScannerUri()
void <init>(android.content.Context,java.lang.String,int)
void truncateHistory(android.content.ContentResolver,int)
void saveRecentQuery(java.lang.String,java.lang.String)
void saveBookmark(android.content.Context,java.lang.String,java.lang.String)
void sendString(android.content.Context,java.lang.String,java.lang.String)
void sendString(android.content.Context,java.lang.String)
android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)
android.database.Cursor getAllBookmarks(android.content.ContentResolver)
android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)
void addOrUrlEquals(java.lang.StringBuilder)
android.database.Cursor getVisitedLike(android.content.ContentResolver,java.lang.String)
void truncateHistory(android.content.ContentResolver)
void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)
java.lang.String[] getVisitedHistory(android.content.ContentResolver)
boolean canClearHistory(android.content.ContentResolver)
void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)
void clearHistory(android.content.ContentResolver)
void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)
void deleteFromHistory(android.content.ContentResolver,java.lang.String)
void addSearchUrl(android.content.ContentResolver,java.lang.String)
void clearSearches(android.content.ContentResolver)
void requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)
android.database.Cursor queryMiniThumbnails(android.content.ContentResolver,android.net.Uri,int,java.lang.String[])
android.database.Cursor queryMiniThumbnail(android.content.ContentResolver,long,int,java.lang.String[])
void showQuickContact(android.content.Context,android.view.View,android.net.Uri,int,java.lang.String[])
android.content.Intent getQuickContactIntent(android.content.Context,android.graphics.Rect,android.net.Uri,int,java.lang.String[])
void showQuickContact(android.content.Context,android.graphics.Rect,android.net.Uri,int,java.lang.String[])
android.content.Intent putExtra(java.lang.String,java.lang.String[])
byte[] get(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)
byte[] get(android.content.ContentProviderClient,android.accounts.Account)
android.util.Pair getWithUri(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account)
android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)
void set(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account,byte[])
void set(android.content.ContentProviderClient,android.accounts.Account,byte[])
android.content.ContentProviderOperation newSetOperation(android.net.Uri,android.accounts.Account,byte[])
android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])
android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)
java.lang.String getMessageBoxName(int)
boolean isPhoneNumber(java.lang.String)
void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)
boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)
boolean hasInterestingConfigurationChanges(int)
boolean getShowGTalkServiceStatus(android.content.ContentResolver)
void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)
android.net.Uri insert(android.content.ContentProviderClient,android.net.Uri,android.accounts.Account,byte[])
void update(android.content.ContentProviderClient,android.net.Uri,byte[])
android.content.ContentProviderOperation$Builder withValues(android.content.ContentValues)
android.content.ContentProviderOperation$Builder newUpdate(android.net.Uri)
android.content.ContentProviderOperation newUpdateOperation(android.net.Uri,byte[])
android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)
android.database.Cursor query(android.content.ContentResolver,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)
android.graphics.Bitmap getBitmap(android.content.ContentResolver,android.net.Uri)
android.graphics.Bitmap decodeFile(java.lang.String)
java.lang.String insertImage(android.content.ContentResolver,android.graphics.Bitmap,java.lang.String,java.lang.String)
java.lang.String insertImage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)
android.graphics.Bitmap StoreThumbnail(android.content.ContentResolver,android.graphics.Bitmap,long,float,float,int)
boolean moveItem(android.content.ContentResolver,long,int,int)
android.net.Uri$Builder appendId(android.net.Uri$Builder,long)
android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)
android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String,java.lang.String)
java.lang.String keyFor(java.lang.String)
int getPresencePrecedence(int)
android.database.Cursor query(android.content.ContentResolver,int,int)
android.content.Intent getIntent(java.lang.String)
android.content.Intent getIntentForShortcut(android.content.ContentResolver,char)
android.net.Uri add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int)
java.lang.CharSequence getLabelForFolder(android.content.res.Resources,java.lang.String)
java.lang.CharSequence getTitle(android.content.Context,android.database.Cursor)
android.content.Intent addDrmFile(android.content.ContentResolver,java.io.FileInputStream,java.lang.String)
android.content.Intent addDrmFile(android.content.ContentResolver,java.io.File,java.lang.String)
void <init>(java.io.InputStream,int,java.lang.String)
android.drm.mobile1.DrmRightsManager getInstance()
android.drm.mobile1.DrmRights queryRights(android.drm.mobile1.DrmRawContent)
java.io.InputStream getContentInputStream(android.drm.mobile1.DrmRights)
void enforceAccessDrmPermission(android.content.Context)
android.net.Uri addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean,long)
android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)
boolean moveMessageToFolder(android.content.Context,android.net.Uri,int,int)
boolean isOutgoingFolder(int)
void <init>(android.renderscript.SimpleMesh$Builder)
void <init>(android.renderscript.RenderScript)
void validate()
int nProgramVertexCreate2(java.lang.String,int[])
void <init>(int,android.renderscript.RenderScript)
void initProgram(android.renderscript.Program)
android.renderscript.ProgramVertex create()
android.renderscript.ProgramFragment$Builder$EnvMode[] values()
android.renderscript.ProgramFragment$Builder$EnvMode valueOf(java.lang.String)
void setMin(android.renderscript.Sampler$Value)
void setMag(android.renderscript.Sampler$Value)
void setWrapS(android.renderscript.Sampler$Value)
void setWrapT(android.renderscript.Sampler$Value)
void setWrapR(android.renderscript.Sampler$Value)
void nSamplerBegin()
void nSamplerSet(int,int)
int nSamplerCreate()
android.renderscript.Sampler internalCreate(android.renderscript.RenderScript,android.renderscript.Sampler$Builder)
android.renderscript.Sampler create()
void nContextInitToClient()
int nContextGetMessage(int[],boolean)
void sleep(long,int)
void lightSetIsMono(boolean)
void lightSetIsLocal(boolean)
void nLightSetIsMono(boolean)
void nLightSetIsLocal(boolean)
int nLightCreate()
android.renderscript.Light internalCreate(android.renderscript.RenderScript,android.renderscript.Light$Builder)
android.renderscript.Light create()
void <init>(android.renderscript.RenderScript,android.renderscript.Element,android.renderscript.Element)
void setTextureMatrixEnable(boolean)
int nProgramVertexCreate(boolean)
void align(int)
void addI8(byte)
void addI16(short)
void addI32(int)
void addI64(long)
void addU8(short)
void addU16(int)
void addU32(long)
void addU64(long)
int floatToRawIntBits(float)
void addF32(float)
long doubleToRawLongBits(double)
void addF64(float)
void nLightSetColor(int,float,float,float)
void setColor(float,float,float)
void nLightSetPosition(int,float,float,float)
void setPosition(float,float,float)
int getID()
void nProgramRasterSetLineWidth(int,float)
void setLineWidth(float)
void nProgramRasterSetPointSize(int,float)
void setPointSize(float)
int nProgramRasterCreate(int,int,boolean,boolean,boolean)
void internalInit()
void <init>(android.renderscript.RenderScript,android.renderscript.Element)
void <init>(android.renderscript.Type$Builder)
void add(android.renderscript.Dimension,int)
void nTypeBegin(int)
void nTypeAdd(int,int)
int nTypeCreate()
android.renderscript.Type internalCreate(android.renderscript.RenderScript,android.renderscript.Type$Builder)
void calcElementCount()
android.renderscript.Type create()
android.renderscript.ProgramStore$DepthFunc[] values()
android.renderscript.ProgramStore$DepthFunc valueOf(java.lang.String)
android.renderscript.Element createUser(android.renderscript.RenderScript,android.renderscript.Element$DataType)
android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int)
void subData1D(int,int,float[])
void loadModelview(android.renderscript.Matrix4f)
void loadProjection(android.renderscript.Matrix4f)
void loadTexture(android.renderscript.Matrix4f)
void loadOrtho(float,float,float,float,float,float)
void setupOrthoWindow(int,int)
void setupOrthoNormalized(int,int)
void loadFrustum(float,float,float,float,float,float)
void loadRotate(float,float,float,float)
void loadMultiply(android.renderscript.Matrix4f,android.renderscript.Matrix4f)
void loadScale(float,float,float)
void loadTranslate(float,float,float)
void setupProjectionNormalized(int,int)
void setDepthFunc(android.renderscript.ProgramStore$DepthFunc)
void setDepthMask(boolean)
void setColorMask(boolean,boolean,boolean,boolean)
void setBlendFunc(android.renderscript.ProgramStore$BlendSrcFunc,android.renderscript.ProgramStore$BlendDstFunc)
void setDitherEnable(boolean)
void nProgramFragmentStoreBegin(int,int)
void nProgramFragmentStoreDepthFunc(int)
void nProgramFragmentStoreDepthMask(boolean)
void nProgramFragmentStoreColorMask(boolean,boolean,boolean,boolean)
void nProgramFragmentStoreBlendFunc(int,int)
void nProgramFragmentStoreDither(boolean)
int nProgramFragmentStoreCreate()
android.renderscript.ProgramStore internalCreate(android.renderscript.RenderScript,android.renderscript.ProgramStore$Builder)
android.renderscript.ProgramStore create()
void add(android.renderscript.Element,java.lang.String)
void <init>(android.renderscript.RenderScript,android.renderscript.Element[],java.lang.String[])
android.renderscript.Element create()
int addVertexType(android.renderscript.Type)
int addVertexType(android.renderscript.Element,int)
void setIndexType(android.renderscript.Type)
void setIndexType(android.renderscript.Element,int)
void setPrimitive(android.renderscript.Primitive)
android.renderscript.Type newType(android.renderscript.Element,int)
int nSimpleMeshCreate(int,int,int[],int)
android.renderscript.SimpleMesh internalCreate(android.renderscript.RenderScript,android.renderscript.SimpleMesh$Builder)
android.renderscript.SimpleMesh create()
android.renderscript.ProgramStore$BlendSrcFunc[] values()
android.renderscript.ProgramStore$BlendSrcFunc valueOf(java.lang.String)
void <init>(android.renderscript.ProgramFragment$Builder,android.renderscript.ProgramFragment$Builder$EnvMode,android.renderscript.ProgramFragment$Builder$Format)
void <init>(android.renderscript.RenderScript,int,int)
void makeSpace(int)
void latch()
void addVertex(float,float)
void addVertex(float,float,float)
void setTexture(float,float)
void setNormal(float,float,float)
void setColor(float,float,float,float)
void addTriangle(int,int,int)
android.renderscript.Element createAttrib(android.renderscript.RenderScript,android.renderscript.Element$DataType,android.renderscript.Element$DataKind,int)
android.renderscript.Element createIndex(android.renderscript.RenderScript)
android.renderscript.Allocation createVertexAllocation(int)
android.renderscript.Allocation createIndexAllocation()
void bindVertexAllocation(android.renderscript.Allocation,int)
void bindIndexAllocation(android.renderscript.Allocation)
void data(float[])
void uploadToBufferObject()
void data(short[])
void nProgramBindConstants(int,int,int)
void bindConstants(android.renderscript.Allocation,int)
void nProgramBindTexture(int,int,int)
void bindTexture(android.renderscript.Allocation,int)
void nProgramBindSampler(int,int,int)
void bindSampler(android.renderscript.Sampler,int)
android.renderscript.Sampler$Value[] values()
android.renderscript.Sampler$Value valueOf(java.lang.String)
void nSimpleMeshBindVertex(int,int,int)
void nSimpleMeshBindIndex(int,int)
android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)
android.renderscript.Type getVertexType(int)
android.renderscript.Type getIndexType()
void nAssignName(int,byte[])
void nObjDestroyOOB(int)
void nObjDestroy(int)
void setScript(java.lang.String)
void setScript(java.io.InputStream)
void setScript(android.content.res.Resources,int)
void nScriptCBegin()
void transferCreate()
void nScriptCAddDefineI32(java.lang.String,int)
void nScriptCAddDefineF(java.lang.String,float)
void nScriptCSetScript(byte[],int,int)
int nScriptCCreate()
void transferObject(android.renderscript.Script)
android.renderscript.ScriptC internalCreate(android.renderscript.ScriptC$Builder)
void addDefine(java.lang.String,int)
void addDefine(java.lang.String,float)
void addDefines(java.lang.reflect.Field[],int,java.lang.Object)
void addDefines(java.lang.Class)
void addDefines(java.lang.Object)
float getFloat(java.lang.Object)
android.renderscript.ScriptC create()
void <init>(int,android.renderscript.RenderScript,android.renderscript.Type)
android.renderscript.Type getType()
void nAllocationUploadToTexture(int,boolean,int)
void uploadToTexture(int)
void uploadToTexture(boolean,int)
void nAllocationUploadToBufferObject(int)
int getElementCount()
void subData1D(int,int,int[])
void data(int[])
void subData1D(int,int,short[])
void subData1D(int,int,byte[])
void data(byte[])
void data1DChecks(int,int,int,int)
int getSizeBytes()
void nAllocationSubData1D(int,int,int,int[],int)
void nAllocationSubData1D(int,int,int,short[],int)
void nAllocationSubData1D(int,int,int,byte[],int)
void nAllocationSubData1D(int,int,int,float[],int)
void nAllocationSubData2D(int,int,int,int,int,int[],int)
void subData2D(int,int,int,int,int[])
void nAllocationSubData2D(int,int,int,int,int,float[],int)
void subData2D(int,int,int,int,float[])
void nAllocationRead(int,int[])
void readData(int[])
void nAllocationRead(int,float[])
void readData(float[])
void nAllocationSubDataFromObject(int,android.renderscript.Type,int,java.lang.Object)
void data(java.lang.Object)
void nAllocationSubReadFromObject(int,android.renderscript.Type,int,java.lang.Object)
void read(java.lang.Object)
void subData(int,java.lang.Object)
int nAdapter1DCreate()
void nAdapter1DBindAllocation(int,int)
void <init>(android.renderscript.Allocation,int,android.renderscript.RenderScript)
android.renderscript.Allocation$Adapter1D createAdapter1D()
int nAdapter2DCreate()
void nAdapter2DBindAllocation(int,int)
android.renderscript.Allocation$Adapter2D createAdapter2D()
int nAllocationCreateTyped(int)
android.graphics.Bitmap$Config getConfig()
android.renderscript.Element A_8(android.renderscript.RenderScript)
android.renderscript.Element RGBA_4444(android.renderscript.RenderScript)
android.renderscript.Element RGBA_8888(android.renderscript.RenderScript)
android.renderscript.Element RGB_565(android.renderscript.RenderScript)
android.renderscript.Element elementFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)
android.renderscript.Type typeFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)
int nAllocationCreateFromBitmap(int,boolean,android.graphics.Bitmap)
android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Element,boolean)
int nAllocationCreateBitmapRef(int,android.graphics.Bitmap)
android.renderscript.Allocation createBitmapRef(android.renderscript.RenderScript,android.graphics.Bitmap)
int nAllocationCreateFromBitmapBoxed(int,boolean,android.graphics.Bitmap)
android.renderscript.Allocation createFromBitmapBoxed(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Element,boolean)
java.io.InputStream openRawResource(int,android.util.TypedValue)
int getAssetInt()
int nAllocationCreateFromAssetStream(int,boolean,int)
android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Element,boolean)
android.renderscript.Allocation createFromBitmapResourceBoxed(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Element,boolean)
void <init>(android.renderscript.RenderScriptGL,int)
android.renderscript.Element USER_U8(android.renderscript.RenderScript)
android.renderscript.Element USER_I8(android.renderscript.RenderScript)
android.renderscript.Element USER_U32(android.renderscript.RenderScript)
android.renderscript.Element USER_I32(android.renderscript.RenderScript)
android.renderscript.Element USER_F32(android.renderscript.RenderScript)
android.renderscript.Element createPixel(android.renderscript.RenderScript,android.renderscript.Element$DataType,android.renderscript.Element$DataKind)
android.renderscript.Element RGB_888(android.renderscript.RenderScript)
android.renderscript.Element RGBA_5551(android.renderscript.RenderScript)
android.renderscript.Element INDEX_16(android.renderscript.RenderScript)
android.renderscript.Element ATTRIB_POSITION_2(android.renderscript.RenderScript)
android.renderscript.Element ATTRIB_POSITION_3(android.renderscript.RenderScript)
android.renderscript.Element ATTRIB_TEXTURE_2(android.renderscript.RenderScript)
android.renderscript.Element ATTRIB_NORMAL_3(android.renderscript.RenderScript)
android.renderscript.Element ATTRIB_COLOR_U8_4(android.renderscript.RenderScript)
android.renderscript.Element ATTRIB_COLOR_F32_4(android.renderscript.RenderScript)
int nElementCreate2(int[],java.lang.String[])
int nElementCreate(int,int,boolean,int)
void <init>(android.renderscript.RenderScript,android.renderscript.Element$DataType,android.renderscript.Element$DataKind,boolean,int)
android.renderscript.Element createFromClass(android.renderscript.RenderScript,java.lang.Class)
android.renderscript.Element createVector(android.renderscript.RenderScript,android.renderscript.Element$DataType,int)
void nInitElements(int,int,int,int)
void initPredefined(android.renderscript.RenderScript)
void nAdapter1DSetConstraint(int,int,int)
void setConstraint(android.renderscript.Dimension,int)
void nAdapter1DData(int,int[])
void nAdapter1DData(int,float[])
void nAdapter1DSubData(int,int,int,int[])
void subData(int,int,int[])
void nAdapter1DSubData(int,int,int,float[])
void subData(int,int,float[])
void nScriptBindAllocation(int,int,int)
void bindAllocation(android.renderscript.Allocation,int)
void nScriptSetClearColor(int,float,float,float,float)
void setClearColor(float,float,float,float)
void nScriptSetClearDepth(int,float)
void setClearDepth(float)
void nScriptSetClearStencil(int,int)
void setClearStencil(int)
void nScriptSetTimeZone(int,byte[])
android.renderscript.Dimension[] values()
android.renderscript.Dimension valueOf(java.lang.String)
android.renderscript.Primitive[] values()
android.renderscript.Primitive valueOf(java.lang.String)
void nContextSetPriority(int)
void contextSetPriority(android.renderscript.RenderScript$Priority)
int nDeviceCreate()
int nContextCreate(int,int)
android.renderscript.RenderScript create()
void nContextDump(int)
void contextDump(int)
void nContextDeinitToClient()
void nContextDestroy(int)
void nDeviceDestroy(int)
int safeID(android.renderscript.BaseObj)
void _nInit()
void setPointSpriteEnable(boolean)
void setPointSmoothEnable(boolean)
void setLineSmoothEnable(boolean)
android.renderscript.ProgramRaster internalCreate(android.renderscript.RenderScript,android.renderscript.ProgramRaster$Builder)
android.renderscript.ProgramRaster create()
void loadIdentity()
float get(int,int)
void set(int,int,float)
void load(android.renderscript.Matrix4f)
void multiply(android.renderscript.Matrix4f)
void rotate(float,float,float,float)
void scale(float,float,float)
void translate(float,float,float)
void nDeviceSetConfig(int,int,int)
int nContextCreateGL(int,int,boolean)
void nContextSetSurface(int,int,android.view.Surface)
void contextSetSurface(int,int,android.view.Surface)
void nContextPause()
void nContextResume()
void nContextBindRootScript(int)
void contextBindRootScript(android.renderscript.Script)
void nContextBindProgramFragmentStore(int)
void contextBindProgramFragmentStore(android.renderscript.ProgramStore)
void nContextBindProgramFragment(int)
void contextBindProgramFragment(android.renderscript.ProgramFragment)
void nContextBindProgramRaster(int)
void contextBindProgramRaster(android.renderscript.ProgramRaster)
void nContextBindProgramVertex(int)
void contextBindProgramVertex(android.renderscript.ProgramVertex)
int nFileOpen(byte[])
android.renderscript.RenderScriptGL$File fileOpen(java.lang.String)
android.renderscript.Element getElement()
int getX()
int getY()
int getZ()
boolean getLOD()
boolean getFaces()
void nTypeFinalDestroy(android.renderscript.Type)
void nTypeSetupFields(android.renderscript.Type,int[],int[],java.lang.reflect.Field[])
android.renderscript.Type createFromClass(android.renderscript.RenderScript,java.lang.Class,int)
android.renderscript.Type createFromClass(android.renderscript.RenderScript,java.lang.Class,int,java.lang.String)
void load(android.renderscript.Matrix3f)
android.renderscript.ProgramFragment$Builder$Format[] values()
android.renderscript.ProgramFragment$Builder$Format valueOf(java.lang.String)
void load(android.renderscript.Matrix2f)
void setShader(java.lang.String)
void addInput(android.renderscript.Element)
void addOutput(android.renderscript.Element)
int addConstant(android.renderscript.Type)
void setTextureCount(int)
void bindAllocation(android.renderscript.ProgramVertex$MatrixAllocation)
android.renderscript.RenderScript$Priority[] values()
android.renderscript.RenderScript$Priority valueOf(java.lang.String)
void setTexture(android.renderscript.ProgramFragment$Builder$EnvMode,android.renderscript.ProgramFragment$Builder$Format,int)
void setPointSpriteTexCoordinateReplacement(boolean)
int nProgramFragmentCreate(int[])
android.renderscript.ProgramFragment create()
android.renderscript.Element$DataKind[] values()
android.renderscript.Element$DataKind valueOf(java.lang.String)
void queueEvent(java.lang.Runnable)
android.renderscript.RenderScriptGL createRenderScript(boolean,boolean)
android.renderscript.RenderScriptGL createRenderScript(boolean)
void destroyRenderScript()
void createRenderScript(android.renderscript.RenderScriptGL)
int nProgramFragmentCreate2(java.lang.String,int[])
android.renderscript.Element$DataType[] values()
android.renderscript.Element$DataType valueOf(java.lang.String)
void nAdapter2DSetConstraint(int,int,int)
void nAdapter2DData(int,int[])
void nAdapter2DData(int,float[])
void nAdapter2DSubData(int,int,int,int,int,int[])
void subData(int,int,int,int,int[])
void nAdapter2DSubData(int,int,int,int,int,float[])
void subData(int,int,int,int,float[])
void nScriptInvoke(int,int)
android.renderscript.ProgramStore$BlendDstFunc[] values()
android.renderscript.ProgramStore$BlendDstFunc valueOf(java.lang.String)
void setType(android.renderscript.Type,int)
void setType(android.renderscript.Type,java.lang.String,int)
android.renderscript.Script$Invokable addInvokable(java.lang.String)
void setType(boolean,int)
void nScriptSetRoot(boolean)
void nScriptSetType(int,boolean,java.lang.String,int)
void nScriptSetInvokable(java.lang.String,int)
void setRoot(boolean)
void <init>(android.test.InstrumentationTestCase,java.lang.Runnable,java.lang.Throwable[])
void <init>(android.test.InstrumentationTestCase,java.lang.reflect.Method,int,java.lang.Throwable[])
void access$000(android.test.InstrumentationTestCase,java.lang.reflect.Method,int)
void injectInstrumentation(android.app.Instrumentation)
void injectInsrumentation(android.app.Instrumentation)
android.app.Activity launchActivityWithIntent(java.lang.String,java.lang.Class,android.content.Intent)
android.app.Activity launchActivity(java.lang.String,java.lang.Class,android.os.Bundle)
void runTestOnUiThread(java.lang.Runnable)
void fail(java.lang.String)
int tolerance()
void runMethod(java.lang.reflect.Method,int)
void runTest()
java.lang.Throwable getTargetException()
void sendKeys(java.lang.String)
void sendKeys(int[])
void sendRepeatedKeys(int[])
void setUp()
void assertNotNull(java.lang.String,java.lang.Object)
void testAndroidTestCaseSetupProperly()
void setTestContext(android.content.Context)
android.content.Context getTestContext()
void assertTrue(java.lang.String,boolean)
void assertActivityRequiresPermission(java.lang.String,java.lang.String,java.lang.String)
void assertReadingContentUriRequiresPermission(android.net.Uri,java.lang.String)
void assertWritingContentUriRequiresPermission(android.net.Uri,java.lang.String)
java.lang.Class getDeclaringClass()
boolean isAssignableFrom(java.lang.Class)
void scrubClass(java.lang.Class)
void <init>(android.app.Instrumentation)
void <init>(java.lang.String,android.app.Instrumentation)
void <init>(java.lang.Class,android.app.Instrumentation)
void addTest(junit.framework.Test)
void addTestSuite(java.lang.Class)
void runTest(junit.framework.Test,junit.framework.TestResult)
android.graphics.PathDashPathEffect$Style[] values()
android.graphics.PathDashPathEffect$Style valueOf(java.lang.String)
int getDefaultDensity()
void <init>(int,boolean,byte[],int)
int getDensity()
void setNinePatchChunk(byte[])
void nativeRecycle(int)
boolean isRecycled()
void checkRecycled(java.lang.String)
void checkXYSign(int,int)
void checkWidthHeight(int,int)
int getRowBytes()
void nativeCopyPixelsToBuffer(int,java.nio.Buffer)
void copyPixelsToBuffer(java.nio.Buffer)
void nativeCopyPixelsFromBuffer(int,java.nio.Buffer)
void copyPixelsFromBuffer(java.nio.Buffer)
android.graphics.Bitmap nativeCopy(int,int,boolean)
android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)
android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)
android.graphics.Bitmap createBitmap(android.graphics.Bitmap)
boolean isMutable()
boolean hasAlpha()
boolean rectStaysRect()
boolean mapRect(android.graphics.RectF,android.graphics.RectF)
android.graphics.Bitmap nativeCreate(int[],int,int,int,int,int,boolean)
android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)
byte[] getNinePatchChunk()
boolean nativeCompress(int,int,int,java.io.OutputStream,byte[])
int nativeWidth(int)
int nativeHeight(int)
int scaleFromDensity(int,int,int)
int getScaledWidth(android.graphics.Canvas)
int getScaledHeight(android.graphics.Canvas)
int getScaledWidth(android.util.DisplayMetrics)
int getScaledHeight(android.util.DisplayMetrics)
int getScaledWidth(int)
int getScaledHeight(int)
int nativeRowBytes(int)
int nativeConfig(int)
android.graphics.Bitmap$Config nativeToConfig(int)
boolean nativeHasAlpha(int)
void nativeSetHasAlpha(int,boolean)
void nativeErase(int,int)
void checkPixelAccess(int,int)
int nativeGetPixel(int,int,int)
int getPixel(int,int)
void checkPixelsAccess(int,int,int,int,int,int,int[])
void nativeGetPixels(int,int[],int,int,int,int,int,int)
void getPixels(int[],int,int,int,int,int,int)
void nativeSetPixel(int,int,int,int)
void setPixel(int,int,int)
void nativeSetPixels(int,int[],int,int,int,int,int,int)
void setPixels(int[],int,int,int,int,int,int)
boolean nativeWriteToParcel(int,boolean,int,android.os.Parcel)
android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])
android.graphics.Bitmap extractAlpha()
android.graphics.Bitmap nativeExtractAlpha(int,int,int[])
boolean nativeSameAs(int,int)
boolean sameAs(android.graphics.Bitmap)
void nativePrepareToDraw(int)
void prepareToDraw()
int ni()
android.graphics.Bitmap nativeCreateFromParcel(android.os.Parcel)
android.graphics.Bitmap access$000(android.os.Parcel)
int nativeCreate(int,int)
void <init>(android.graphics.PathEffect,android.graphics.PathEffect)
void <init>(android.graphics.RectF)
void offsetTo(float,float)
boolean contains(float,float)
boolean contains(float,float,float,float)
boolean contains(android.graphics.RectF)
boolean intersect(float,float,float,float)
boolean intersect(android.graphics.RectF)
boolean setIntersect(android.graphics.RectF,android.graphics.RectF)
boolean intersects(float,float,float,float)
boolean intersects(android.graphics.RectF,android.graphics.RectF)
void round(android.graphics.Rect)
void roundOut(android.graphics.Rect)
void union(float,float,float,float)
void sort()
android.graphics.Paint$Join[] values()
android.graphics.Paint$Join valueOf(java.lang.String)
int nativeCreate(float)
android.graphics.Rect createFromParcel(android.os.Parcel)
android.graphics.Rect[] newArray(int)
int nativeCreate(int,int,int)
int init1()
int init2(int)
void <init>(android.graphics.Path)
void native_reset(int)
void native_rewind(int)
void native_set(int,int)
int native_getFillType(int)
android.graphics.Path$FillType getFillType()
void native_setFillType(int,int)
void setFillType(android.graphics.Path$FillType)
boolean isInverseFillType()
void toggleInverseFillType()
boolean native_isEmpty(int)
boolean native_isRect(int,android.graphics.RectF)
boolean isRect(android.graphics.RectF)
void native_computeBounds(int,android.graphics.RectF)
void native_incReserve(int,int)
void incReserve(int)
void native_moveTo(int,float,float)
void native_rMoveTo(int,float,float)
void rMoveTo(float,float)
void native_lineTo(int,float,float)
void native_rLineTo(int,float,float)
void rLineTo(float,float)
void native_quadTo(int,float,float,float,float)
void native_rQuadTo(int,float,float,float,float)
void rQuadTo(float,float,float,float)
void native_cubicTo(int,float,float,float,float,float,float)
void cubicTo(float,float,float,float,float,float)
void native_rCubicTo(int,float,float,float,float,float,float)
void rCubicTo(float,float,float,float,float,float)
void native_arcTo(int,android.graphics.RectF,float,float,boolean)
void arcTo(android.graphics.RectF,float,float,boolean)
void arcTo(android.graphics.RectF,float,float)
void native_close(int)
void native_addRect(int,android.graphics.RectF,int)
void addRect(android.graphics.RectF,android.graphics.Path$Direction)
void native_addRect(int,float,float,float,float,int)
void native_addOval(int,android.graphics.RectF,int)
void addOval(android.graphics.RectF,android.graphics.Path$Direction)
void native_addCircle(int,float,float,float,int)
void addCircle(float,float,float,android.graphics.Path$Direction)
void native_addArc(int,android.graphics.RectF,float,float)
void addArc(android.graphics.RectF,float,float)
void native_addRoundRect(int,android.graphics.RectF,float,float,int)
void addRoundRect(android.graphics.RectF,float,float,android.graphics.Path$Direction)
void native_addRoundRect(int,android.graphics.RectF,float[],int)
void addRoundRect(android.graphics.RectF,float[],android.graphics.Path$Direction)
void native_addPath(int,int,float,float)
void native_addPath(int,int)
void native_addPath(int,int,int)
void addPath(android.graphics.Path,android.graphics.Matrix)
void native_offset(int,float,float,int)
void offset(float,float,android.graphics.Path)
void native_offset(int,float,float)
void native_setLastPoint(int,float,float)
void setLastPoint(float,float)
void native_transform(int,int,int)
void transform(android.graphics.Matrix,android.graphics.Path)
void native_transform(int,int)
void transform(android.graphics.Matrix)
void finalizer(int)
int nativeCreate(float[],float)
void <init>(float[],float)
int nativeConstructor(int,int)
void draw(android.graphics.Canvas,float,float,android.graphics.Paint)
void draw(android.graphics.Canvas,float,float)
android.graphics.Movie decodeTempStream(java.io.InputStream)
android.graphics.Movie decodeFile(java.lang.String)
android.graphics.Movie decodeStream(java.io.InputStream)
android.graphics.Matrix$ScaleToFit[] values()
android.graphics.Matrix$ScaleToFit valueOf(java.lang.String)
void validateNinePatchChunk(int,byte[])
void <init>(android.graphics.Bitmap,byte[],java.lang.String)
void <init>(android.graphics.NinePatch)
void setPaint(android.graphics.Paint)
void nativeDraw(int,android.graphics.RectF,int,byte[],int,int,int)
void draw(android.graphics.Canvas,android.graphics.RectF)
void nativeDraw(int,android.graphics.Rect,int,byte[],int,int,int)
void draw(android.graphics.Canvas,android.graphics.Rect)
void draw(android.graphics.Canvas,android.graphics.Rect,android.graphics.Paint)
int nativeGetTransparentRegion(int,byte[],android.graphics.Rect)
android.graphics.Region getTransparentRegion(android.graphics.Rect)
android.graphics.Interpolator$Result[] values()
android.graphics.Interpolator$Result valueOf(java.lang.String)
android.graphics.Bitmap$CompressFormat[] values()
android.graphics.Bitmap$CompressFormat valueOf(java.lang.String)
android.graphics.Shader$TileMode[] values()
android.graphics.Shader$TileMode valueOf(java.lang.String)
int native_CreateLightingFilter(int,int)
int native_CreatePorterDuffFilter(int,int)
void <init>(float[])
void <init>(android.graphics.ColorMatrix)
float[] getArray()
void set(android.graphics.ColorMatrix)
void set(float[])
float cos(float)
float sin(float)
void setRotate(int,float)
void setConcat(android.graphics.ColorMatrix,android.graphics.ColorMatrix)
void preConcat(android.graphics.ColorMatrix)
void postConcat(android.graphics.ColorMatrix)
void setSaturation(float)
void setRGB2YUV()
void setYUV2RGB()
android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)
android.graphics.Bitmap nativeDecodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)
android.graphics.Bitmap nativeDecodeAsset(int,android.graphics.Rect,android.graphics.BitmapFactory$Options)
android.graphics.Bitmap nativeDecodeStream(java.io.InputStream,byte[],android.graphics.Rect,android.graphics.BitmapFactory$Options)
android.graphics.Bitmap finishDecode(android.graphics.Bitmap,android.graphics.Rect,android.graphics.BitmapFactory$Options)
boolean isNinePatchChunk(byte[])
byte[] nativeScaleNinePatch(byte[],float,android.graphics.Rect)
android.graphics.Bitmap nativeDecodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)
android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)
void nativeSetDefaultConfig(int)
void setDefaultConfig(android.graphics.Bitmap$Config)
int nativeConstructor(int)
void <init>(android.graphics.Picture)
int nativeBeginRecording(int,int,int)
void <init>(android.graphics.Picture,int)
android.graphics.Canvas beginRecording(int,int)
void nativeEndRecording(int)
void endRecording()
void nativeDraw(int,int)
int nativeCreateFromStream(java.io.InputStream,byte[])
boolean nativeWriteToStream(int,java.io.OutputStream,byte[])
android.graphics.BlurMaskFilter$Blur[] values()
android.graphics.BlurMaskFilter$Blur valueOf(java.lang.String)
void <init>(android.graphics.Point)
void negate()
boolean equals(int,int)
int nativeGetStyle(int)
boolean isBold()
boolean isItalic()
int nativeCreate(java.lang.String,int)
int nativeCreateFromTypeface(int,int)
int nativeCreateFromAsset(android.content.res.AssetManager,java.lang.String)
android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)
int nativeCreateFromFile(java.lang.String)
android.graphics.Typeface createFromFile(java.io.File)
void nativeUnref(int)
void <init>(android.graphics.drawable.LevelListDrawable$LevelListState,android.content.res.Resources)
void addLevel(int,int,android.graphics.drawable.Drawable)
int getLevel()
boolean onLevelChange(int)
int indexOfLevel(int)
boolean selectDrawable(int)
void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)
android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)
int[] access$000(android.graphics.drawable.LevelListDrawable$LevelListState)
int[] access$002(android.graphics.drawable.LevelListDrawable$LevelListState,int[])
int[] access$100(android.graphics.drawable.LevelListDrawable$LevelListState)
int[] access$102(android.graphics.drawable.LevelListDrawable$LevelListState,int[])
void <init>(android.graphics.drawable.LevelListDrawable$LevelListState,android.graphics.drawable.LevelListDrawable,android.content.res.Resources)
void setConstantState(android.graphics.drawable.DrawableContainer$DrawableContainerState)
void <init>(android.graphics.drawable.LevelListDrawable$LevelListState,android.content.res.Resources,android.graphics.drawable.LevelListDrawable$1)
void onResize(float,float)
android.graphics.RectF rect()
android.graphics.drawable.shapes.RectShape clone()
android.graphics.drawable.shapes.RoundRectShape clone()
android.graphics.drawable.shapes.Shape clone()
void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)
void <init>(android.graphics.Path,float,float)
android.graphics.drawable.shapes.PathShape clone()
void drawRect(android.graphics.RectF,android.graphics.Paint)
float getWidth()
float getHeight()
void resize(float,float)
void <init>(android.graphics.drawable.InsetDrawable$InsetState,android.content.res.Resources)
void <init>(android.graphics.drawable.Drawable,int,int,int,int)
void inflateWithAttributes(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.TypedArray,int)
boolean onStateChange(int[])
boolean canConstantState()
void <init>(android.graphics.drawable.InsetDrawable$InsetState,android.graphics.drawable.InsetDrawable,android.content.res.Resources)
void <init>(android.graphics.drawable.InsetDrawable$InsetState,android.content.res.Resources,android.graphics.drawable.InsetDrawable$1)
void <init>(android.graphics.drawable.ScaleDrawable$ScaleState,android.content.res.Resources)
void <init>(android.graphics.drawable.Drawable,int,float,float)
float getPercent(android.content.res.TypedArray,int)
void <init>(android.graphics.drawable.ScaleDrawable$ScaleState,android.graphics.drawable.ScaleDrawable,android.content.res.Resources)
void <init>(android.graphics.drawable.ScaleDrawable$ScaleState,android.content.res.Resources,android.graphics.drawable.ScaleDrawable$1)
void <init>(android.graphics.drawable.StateListDrawable$StateListState,android.content.res.Resources)
int addStateSet(int[],android.graphics.drawable.Drawable)
int[] getState()
int access$000(android.graphics.drawable.StateListDrawable$StateListState,int[])
void setVariablePadding(boolean)
void setConstantSize(boolean)
android.graphics.drawable.StateListDrawable$StateListState getStateListState()
int[][] access$100(android.graphics.drawable.StateListDrawable$StateListState)
android.graphics.drawable.Drawable[] getChildren()
int[][] access$102(android.graphics.drawable.StateListDrawable$StateListState,int[][])
void <init>(android.graphics.drawable.StateListDrawable$StateListState,android.graphics.drawable.StateListDrawable,android.content.res.Resources)
void <init>(android.graphics.drawable.StateListDrawable$StateListState,android.content.res.Resources,android.graphics.drawable.StateListDrawable$1)
void <init>(android.graphics.NinePatch,android.graphics.Rect)
void <init>(android.graphics.drawable.NinePatchDrawable$NinePatchState,android.content.res.Resources)
void <init>(android.graphics.Bitmap,byte[],android.graphics.Rect,java.lang.String)
void <init>(android.content.res.Resources,android.graphics.Bitmap,byte[],android.graphics.Rect,java.lang.String)
void <init>(android.content.res.Resources,android.graphics.NinePatch)
void computeBitmapSize()
void setNinePatchState(android.graphics.drawable.NinePatchDrawable$NinePatchState,android.content.res.Resources)
void setTargetDensity(int)
void setTargetDensity(android.graphics.Canvas)
void setTargetDensity(android.util.DisplayMetrics)
android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)
void <init>(android.graphics.NinePatch,android.graphics.Rect,boolean)
void <init>(android.graphics.drawable.NinePatchDrawable$NinePatchState)
void <init>(android.graphics.drawable.NinePatchDrawable$NinePatchState,android.content.res.Resources,android.graphics.drawable.NinePatchDrawable$1)
void <init>(android.graphics.drawable.RotateDrawable$RotateState,android.graphics.drawable.RotateDrawable,android.content.res.Resources)
void <init>(android.graphics.drawable.RotateDrawable$RotateState,android.content.res.Resources,android.graphics.drawable.RotateDrawable$1)
void <init>(android.graphics.drawable.DrawableContainer$DrawableContainerState,android.graphics.drawable.DrawableContainer,android.content.res.Resources)
void <init>(android.graphics.drawable.AnimationDrawable$AnimationState,android.graphics.drawable.AnimationDrawable,android.content.res.Resources)
void <init>(android.graphics.drawable.AnimationDrawable$AnimationState,android.content.res.Resources,android.graphics.drawable.AnimationDrawable$1)
int addChild(android.graphics.drawable.Drawable)
void growArray(int,int)
int[] access$000(android.graphics.drawable.AnimationDrawable$AnimationState)
boolean access$100(android.graphics.drawable.AnimationDrawable$AnimationState)
boolean access$102(android.graphics.drawable.AnimationDrawable$AnimationState,boolean)
int[] access$002(android.graphics.drawable.AnimationDrawable$AnimationState,int[])
void <init>(android.graphics.drawable.TransitionDrawable$TransitionState,android.graphics.drawable.TransitionDrawable,android.content.res.Resources)
void <init>(android.graphics.drawable.TransitionDrawable$TransitionState,android.graphics.drawable.Drawable[])
void <init>(android.graphics.drawable.TransitionDrawable$TransitionState,android.content.res.Resources)
void <init>(android.graphics.drawable.LayerDrawable$LayerState,android.content.res.Resources)
void <init>(android.graphics.drawable.Drawable[],android.graphics.drawable.LayerDrawable$LayerState)
android.graphics.drawable.LayerDrawable$LayerState createConstantState(android.graphics.drawable.LayerDrawable$LayerState,android.content.res.Resources)
void reverseTransition(int)
void setCrossFadeEnabled(boolean)
boolean isCrossFadeEnabled()
void <init>(android.graphics.drawable.TransitionDrawable$TransitionState,android.content.res.Resources,android.graphics.drawable.TransitionDrawable$1)
void <init>(android.graphics.drawable.ClipDrawable$ClipState,android.content.res.Resources)
void <init>(android.graphics.drawable.ClipDrawable$ClipState,android.graphics.drawable.ClipDrawable,android.content.res.Resources)
void <init>(android.graphics.drawable.ClipDrawable$ClipState,android.content.res.Resources,android.graphics.drawable.ClipDrawable$1)
void <init>(android.graphics.drawable.ColorDrawable$ColorState)
void <init>(android.graphics.drawable.ColorDrawable$ColorState,android.graphics.drawable.ColorDrawable$1)
void <init>(android.graphics.drawable.AnimatedRotateDrawable$AnimatedRotateState,android.graphics.drawable.AnimatedRotateDrawable,android.content.res.Resources)
void <init>(android.graphics.drawable.AnimatedRotateDrawable$AnimatedRotateState,android.content.res.Resources,android.graphics.drawable.AnimatedRotateDrawable$1)
android.graphics.drawable.GradientDrawable$Orientation[] values()
android.graphics.drawable.GradientDrawable$Orientation valueOf(java.lang.String)
android.graphics.Rect copyBounds()
void setChangingConfigurations(int)
void scheduleSelf(java.lang.Runnable,long)
void unscheduleSelf(java.lang.Runnable)
boolean equals(int[],int[])
int resolveOpacity(int,int)
android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)
android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)
android.graphics.drawable.Drawable drawableFromBitmap(android.content.res.Resources,android.graphics.Bitmap,byte[],android.graphics.Rect,java.lang.String)
android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)
void <init>(android.graphics.drawable.ShapeDrawable$ShapeState)
void <init>(android.graphics.drawable.ShapeDrawable$ShapeState,android.graphics.drawable.ShapeDrawable$1)
void <init>(android.graphics.drawable.RotateDrawable$RotateState,android.content.res.Resources)
void <init>(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources)
void <init>(android.content.res.Resources,java.lang.String)
void <init>(android.content.res.Resources,java.io.InputStream)
android.graphics.Shader$TileMode getTileModeX()
android.graphics.Shader$TileMode getTileModeY()
void setTileModeXY(android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)
void setTileModeX(android.graphics.Shader$TileMode)
void setTileModeY(android.graphics.Shader$TileMode)
android.graphics.Shader getShader()
void <init>(android.graphics.drawable.BitmapDrawable$BitmapState)
boolean isAntiAlias()
boolean isFilterBitmap()
boolean isDither()
void <init>(android.graphics.drawable.BitmapDrawable$BitmapState,android.content.res.Resources,android.graphics.drawable.BitmapDrawable$1)
android.graphics.Rect getConstantPadding()
boolean isConstantSize()
int getConstantWidth()
int getConstantHeight()
int getConstantMinimumWidth()
int getConstantMinimumHeight()
void <init>(android.graphics.drawable.LayerDrawable$LayerState,android.graphics.drawable.LayerDrawable,android.content.res.Resources)
void computeConstantSize()
void setCornerRadii(float[])
void setCornerRadius(float)
android.graphics.drawable.shapes.Shape getShape()
void setShape(android.graphics.drawable.shapes.Shape)
boolean inflateTag(java.lang.String,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)
void ensurePadding()
void addLayer(android.graphics.drawable.Drawable,int,int,int,int,int)
boolean setDrawableByLayerId(int,android.graphics.drawable.Drawable)
void setLayerInset(int,int,int,int,int)
boolean reapplyPadding(int,android.graphics.drawable.LayerDrawable$ChildDrawable)
void <init>(android.graphics.drawable.GradientDrawable$Orientation,int[])
void <init>(android.graphics.drawable.GradientDrawable$GradientState)
void <init>(android.graphics.drawable.GradientDrawable$GradientState,android.graphics.drawable.GradientDrawable$1)
void setShape(int)
void setGradientType(int)
void setGradientCenter(float,float)
void setSolidColor(int)
void setStroke(int,int)
void setStroke(int,int,float,float)
void setGradientRadius(float)
boolean access$002(android.graphics.drawable.GradientDrawable$GradientState,boolean)
boolean access$100(android.graphics.drawable.GradientDrawable$GradientState)
boolean access$000(android.graphics.drawable.GradientDrawable$GradientState)
float access$200(android.graphics.drawable.GradientDrawable$GradientState)
float access$300(android.graphics.drawable.GradientDrawable$GradientState)
float access$400(android.graphics.drawable.GradientDrawable$GradientState)
boolean access$102(android.graphics.drawable.GradientDrawable$GradientState,boolean)
float access$202(android.graphics.drawable.GradientDrawable$GradientState,float)
float access$302(android.graphics.drawable.GradientDrawable$GradientState,float)
float access$402(android.graphics.drawable.GradientDrawable$GradientState,float)
void <init>(android.graphics.drawable.AnimationDrawable$AnimationState,android.content.res.Resources)
void setFrame(int,boolean,boolean)
void nextFrame(boolean)
android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)
void setUseLevel(boolean)
int modulateAlpha(int)
boolean ensureValidRect()
void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)
android.graphics.Path buildRing(android.graphics.drawable.GradientDrawable$GradientState)
void <init>(float,float,float,float,int[],float[],android.graphics.Shader$TileMode)
void <init>(float,float,float,int[],float[],android.graphics.Shader$TileMode)
void <init>(float,float,int[],float[])
float getFloatOrFraction(android.content.res.TypedArray,int,float)
void initializeWithState(android.graphics.drawable.GradientDrawable$GradientState)
android.graphics.Picture getPicture()
void setPicture(android.graphics.Picture)
int indexOfStateSet(int[])
void updateShape()
void setShaderFactory(android.graphics.drawable.ShapeDrawable$ShaderFactory)
android.graphics.drawable.ShapeDrawable$ShaderFactory getShaderFactory()
void setPadding(android.graphics.Rect)
int modulateAlpha(int,int)
void onDraw(android.graphics.drawable.shapes.Shape,android.graphics.Canvas,android.graphics.Paint)
android.graphics.Xfermode getXfermode()
android.graphics.Shader resize(int,int)
void <init>(android.graphics.drawable.AnimatedRotateDrawable$AnimatedRotateState,android.content.res.Resources)
void nextFrame()
int initRaster(int)
void throwIfRecycled(android.graphics.Bitmap)
int initGL()
void freeGlCaches()
void native_setBitmap(int,int)
void nativeSetViewport(int,int,int)
int native_saveLayer(int,android.graphics.RectF,int,int)
int saveLayer(android.graphics.RectF,android.graphics.Paint,int)
int native_saveLayer(int,float,float,float,float,int,int)
int native_saveLayerAlpha(int,android.graphics.RectF,int,int)
int saveLayerAlpha(android.graphics.RectF,int,int)
int native_saveLayerAlpha(int,float,float,float,float,int,int)
void native_concat(int,int)
void native_setMatrix(int,int)
void native_getCTM(int,int)
boolean native_clipRect(int,float,float,float,float,int)
boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)
boolean native_clipPath(int,int,int)
boolean clipPath(android.graphics.Path,android.graphics.Region$Op)
boolean clipPath(android.graphics.Path)
boolean native_clipRegion(int,int,int)
boolean clipRegion(android.graphics.Region,android.graphics.Region$Op)
boolean clipRegion(android.graphics.Region)
android.graphics.DrawFilter getDrawFilter()
void nativeSetDrawFilter(int,int)
boolean native_quickReject(int,android.graphics.RectF,int)
boolean quickReject(android.graphics.RectF,android.graphics.Canvas$EdgeType)
boolean native_quickReject(int,int,int)
boolean quickReject(android.graphics.Path,android.graphics.Canvas$EdgeType)
boolean native_quickReject(int,float,float,float,float,int)
boolean native_getClipBounds(int,android.graphics.Rect)
android.graphics.Rect getClipBounds()
void native_drawRGB(int,int,int,int)
void drawRGB(int,int,int)
void native_drawARGB(int,int,int,int,int)
void drawARGB(int,int,int,int)
void native_drawColor(int,int)
void native_drawColor(int,int,int)
void native_drawPaint(int,int)
void drawPoints(float[],int,int,android.graphics.Paint)
void drawPoints(float[],android.graphics.Paint)
void native_drawLine(int,float,float,float,float,int)
void drawLines(float[],int,int,android.graphics.Paint)
void drawLines(float[],android.graphics.Paint)
void native_drawRect(int,android.graphics.RectF,int)
void native_drawRect(int,float,float,float,float,int)
void native_drawOval(int,android.graphics.RectF,int)
void native_drawCircle(int,float,float,float,int)
void native_drawArc(int,android.graphics.RectF,float,float,boolean,int)
void native_drawRoundRect(int,android.graphics.RectF,float,float,int)
void native_drawPath(int,int,int)
void native_drawBitmap(int,int,float,float,int,int,int,int)
void native_drawBitmap(int,int,android.graphics.Rect,android.graphics.RectF,int,int,int)
void native_drawBitmap(int,int,android.graphics.Rect,android.graphics.Rect,int,int,int)
void native_drawBitmap(int,int[],int,int,float,float,int,int,boolean,int)
void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)
void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)
void nativeDrawBitmapMatrix(int,int,int,int)
void checkRange(int,int,int)
void nativeDrawBitmapMesh(int,int,int,int,float[],int,int[],int,int)
void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)
void nativeDrawVertices(int,int,int,float[],int,float[],int,int[],int,short[],int,int,int)
void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)
void native_drawText(int,char[],int,int,float,float,int)
void native_drawText(int,java.lang.String,int,int,float,float,int)
void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)
void native_drawPosText(int,char[],int,int,float[],int)
void drawPosText(char[],int,int,float[],android.graphics.Paint)
void native_drawPosText(int,java.lang.String,float[],int)
void drawPosText(java.lang.String,float[],android.graphics.Paint)
void native_drawTextOnPath(int,char[],int,int,int,float,float,int)
void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)
void native_drawTextOnPath(int,java.lang.String,int,float,float,int)
void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)
void native_drawPicture(int,int)
void drawPicture(android.graphics.Picture,android.graphics.RectF)
void drawPicture(android.graphics.Picture,android.graphics.Rect)
void requestCancel()
void requestCancelDecode()
int getBitsPerPixel(int)
void <init>(int,int,android.graphics.AvoidXfermode$Mode)
int nativeConstructor(float,int)
void <init>(float,android.graphics.BlurMaskFilter$Blur)
android.graphics.Path$FillType[] values()
android.graphics.Path$FillType valueOf(java.lang.String)
void reset(int,int)
void nativeReset(int,int,int)
int getKeyFrameCount()
int getValueCount()
void nativeSetKeyFrame(int,int,int,float[],float[])
void nativeSetRepeatMirror(int,float,boolean)
void setRepeatMirror(float,boolean)
android.graphics.Interpolator$Result timeToValues(int,float[])
int nativeTimeToValues(int,int,float[])
android.graphics.BitmapRegionDecoder nativeNewInstance(byte[],int,int,boolean)
android.graphics.BitmapRegionDecoder newInstance(byte[],int,int,boolean)
android.graphics.BitmapRegionDecoder nativeNewInstance(java.io.FileDescriptor,boolean)
android.graphics.BitmapRegionDecoder newInstance(java.io.FileDescriptor,boolean)
android.graphics.BitmapRegionDecoder nativeNewInstance(int,boolean)
android.graphics.BitmapRegionDecoder nativeNewInstance(java.io.InputStream,byte[],boolean)
android.graphics.BitmapRegionDecoder newInstance(java.io.InputStream,boolean)
android.graphics.BitmapRegionDecoder newInstance(java.lang.String,boolean)
android.graphics.Bitmap nativeDecodeRegion(int,int,int,int,int,android.graphics.BitmapFactory$Options)
android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory$Options)
int nativeGetWidth(int)
int nativeGetHeight(int)
void nativeClean(int)
int nativeCreate1(float,float,float,int[],float[],int)
int nativeCreate2(float,float,float,int,int,int)
void <init>(float,float,float,int,int,android.graphics.Shader$TileMode)
void setCubicBoundary(float[],int,int,int)
void setTexture(android.graphics.Bitmap)
void setXfermode(android.graphics.Xfermode)
void buildCache()
void nativeComputeCubicPatch(float[],int,int,int,int,float[],short[])
int nativeCreateXfermode(int)
int access$000(android.os.Parcel)
android.graphics.Region createFromParcel(android.os.Parcel)
android.graphics.Region[] newArray(int)
void set(android.graphics.PointF)
boolean equals(float,float)
float length(float,float)
float length()
android.graphics.Canvas$VertexMode[] values()
android.graphics.Canvas$VertexMode valueOf(java.lang.String)
int nativeConstructor()
void nativeAddLayer(int,int,float,float)
void addLayer(android.graphics.Paint,float,float)
void addLayer(android.graphics.Paint)
int nativeCreate1(float,float,int[],float[])
int nativeCreate2(float,float,int,int)
int native_create(int,boolean)
void <init>(android.graphics.Path,boolean)
void native_setPath(int,int,boolean)
void setPath(android.graphics.Path,boolean)
float native_getLength(int)
boolean native_getPosTan(int,float,float[],float[])
boolean getPosTan(float,float[],float[])
boolean native_getMatrix(int,float,int,int)
boolean getMatrix(float,android.graphics.Matrix,int)
boolean native_getSegment(int,float,float,int,boolean)
boolean getSegment(float,float,android.graphics.Path,boolean)
boolean native_isClosed(int)
boolean native_nextContour(int)
boolean nextContour()
void native_destroy(int)
android.graphics.Bitmap createFromParcel(android.os.Parcel)
android.graphics.Bitmap[] newArray(int)
boolean nativeGetLocalMatrix(int,int)
boolean getLocalMatrix(android.graphics.Matrix)
void nativeSetLocalMatrix(int,int)
int nativeConstructor(float[],float,float,float)
void <init>(float[],float,float,float)
android.graphics.Paint$Cap[] values()
android.graphics.Paint$Cap valueOf(java.lang.String)
void nativeGetMatrix(int)
void nativeApplyToCanvas(int)
void applyToCanvas(android.graphics.Canvas)
void nativeDestructor()
int nativeNewTable(byte[])
int nativeNewClip(int,int)
android.graphics.TableMaskFilter CreateClipTable(int,int)
int nativeNewGamma(float)
android.graphics.TableMaskFilter CreateGammaTable(float)
android.graphics.Region$Op[] values()
android.graphics.Region$Op valueOf(java.lang.String)
android.graphics.Canvas$EdgeType[] values()
android.graphics.Canvas$EdgeType valueOf(java.lang.String)
int native_init()
int native_initWithPaint(int)
boolean isLinearText()
boolean isSubpixelText()
boolean isUnderlineText()
boolean isStrikeThruText()
boolean isFakeBoldText()
int native_getStyle(int)
void native_setStyle(int,int)
int native_getStrokeCap(int)
android.graphics.Paint$Cap getStrokeCap()
void native_setStrokeCap(int,int)
int native_getStrokeJoin(int)
android.graphics.Paint$Join getStrokeJoin()
void native_setStrokeJoin(int,int)
boolean native_getFillPath(int,int,int)
boolean getFillPath(android.graphics.Path,android.graphics.Path)
int native_setShader(int,int)
android.graphics.ColorFilter getColorFilter()
int native_setColorFilter(int,int)
int native_setXfermode(int,int)
android.graphics.PathEffect getPathEffect()
int native_setPathEffect(int,int)
int native_setMaskFilter(int,int)
int native_setTypeface(int,int)
int native_setRasterizer(int,int)
void clearShadowLayer()
int native_getTextAlign(int)
android.graphics.Paint$Align getTextAlign()
void native_setTextAlign(int,int)
float getFontMetrics(android.graphics.Paint$FontMetrics)
android.graphics.Paint$FontMetrics getFontMetrics()
float native_measureText(char[],int,int)
float native_measureText(java.lang.String,int,int)
float measureText(java.lang.String,int,int)
float native_measureText(java.lang.String)
int native_breakText(char[],int,int,float,float[])
int breakText(char[],int,int,float,float[])
int breakText(java.lang.String,boolean,float,float[])
int native_breakText(java.lang.String,boolean,float,float[])
int native_getTextWidths(int,char[],int,int,float[])
int getTextWidths(java.lang.String,int,int,float[])
int native_getTextWidths(int,java.lang.String,int,int,float[])
int getTextWidths(java.lang.String,float[])
void native_getTextPath(int,char[],int,int,float,float,int)
void getTextPath(char[],int,int,float,float,android.graphics.Path)
void native_getTextPath(int,java.lang.String,int,int,float,float,int)
void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)
void nativeGetStringBounds(int,java.lang.String,int,int,android.graphics.Rect)
void getTextBounds(java.lang.String,int,int,android.graphics.Rect)
void nativeGetCharArrayBounds(int,char[],int,int,android.graphics.Rect)
void getTextBounds(char[],int,int,android.graphics.Rect)
int nativeCreate(int,float,float,int)
void <init>(android.graphics.Path,float,float,android.graphics.PathDashPathEffect$Style)
int native_create(int)
boolean native_isIdentity(int)
boolean native_rectStaysRect(int)
boolean native_equals(int,int)
void native_setTranslate(int,float,float)
void native_setScale(int,float,float,float,float)
void native_setScale(int,float,float)
void native_setRotate(int,float,float,float)
void native_setRotate(int,float)
void native_setSinCos(int,float,float,float,float)
void setSinCos(float,float,float,float)
void native_setSinCos(int,float,float)
void setSinCos(float,float)
void native_setSkew(int,float,float,float,float)
void setSkew(float,float,float,float)
void native_setSkew(int,float,float)
void setSkew(float,float)
boolean native_setConcat(int,int,int)
boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)
boolean native_preTranslate(int,float,float)
boolean native_preScale(int,float,float,float,float)
boolean preScale(float,float,float,float)
boolean native_preScale(int,float,float)
boolean preScale(float,float)
boolean native_preRotate(int,float,float,float)
boolean native_preRotate(int,float)
boolean preRotate(float)
boolean native_preSkew(int,float,float,float,float)
boolean preSkew(float,float,float,float)
boolean native_preSkew(int,float,float)
boolean preSkew(float,float)
boolean native_preConcat(int,int)
boolean native_postTranslate(int,float,float)
boolean native_postScale(int,float,float,float,float)
boolean postScale(float,float,float,float)
boolean native_postScale(int,float,float)
boolean postScale(float,float)
boolean native_postRotate(int,float,float,float)
boolean postRotate(float,float,float)
boolean native_postRotate(int,float)
boolean native_postSkew(int,float,float,float,float)
boolean postSkew(float,float,float,float)
boolean native_postSkew(int,float,float)
boolean postSkew(float,float)
boolean native_postConcat(int,int)
boolean postConcat(android.graphics.Matrix)
boolean native_setRectToRect(int,android.graphics.RectF,android.graphics.RectF,int)
void checkPointArrays(float[],int,float[],int,int)
boolean native_setPolyToPoly(int,float[],int,float[],int,int)
boolean setPolyToPoly(float[],int,float[],int,int)
boolean native_invert(int,int)
boolean invert(android.graphics.Matrix)
void native_mapPoints(int,float[],int,float[],int,int,boolean)
void mapPoints(float[],int,float[],int,int)
void mapVectors(float[],int,float[],int,int)
void mapPoints(float[],float[])
void mapVectors(float[],float[])
void mapVectors(float[])
boolean native_mapRect(int,android.graphics.RectF,android.graphics.RectF)
float native_mapRadius(int,float)
float mapRadius(float)
void native_getValues(int,float[])
void getValues(float[])
void native_setValues(int,float[])
void setValues(float[])
int nativeColorMatrixFilter(float[])
int[] calculateStrides(int,int)
void <init>(byte[],int,int,int,int[])
void adjustRectangle(android.graphics.Rect)
int[] calculateOffsets(int,int)
boolean nativeCompressToJpeg(byte[],int,int,int,int[],int[],int,java.io.OutputStream,byte[])
boolean compressToJpeg(android.graphics.Rect,int,java.io.OutputStream)
byte[] getYuvData()
int getYuvFormat()
int[] getStrides()
android.graphics.Paint$Style[] values()
android.graphics.Paint$Style valueOf(java.lang.String)
android.graphics.AvoidXfermode$Mode[] values()
android.graphics.AvoidXfermode$Mode valueOf(java.lang.String)
android.graphics.RectF createFromParcel(android.os.Parcel)
android.graphics.RectF[] newArray(int)
int nativeCreate(int)
int nativeCreate1(float,float,float,float,int[],float[],int)
int nativeCreate2(float,float,float,float,int,int,int)
int nativeCreate1(int,int,int)
void <init>(android.graphics.Shader,android.graphics.Shader,android.graphics.Xfermode)
int nativeCreate2(int,int,int)
void <init>(android.graphics.Shader,android.graphics.Shader,android.graphics.PorterDuff$Mode)
int nativeCreate(float,float)
android.graphics.Bitmap$Config[] values()
android.graphics.Bitmap$Config valueOf(java.lang.String)
boolean nativeSetRegion(int,int)
void <init>(android.graphics.Region)
boolean nativeSetRect(int,int,int,int,int)
boolean set(android.graphics.Rect)
boolean nativeSetPath(int,int,int)
boolean setPath(android.graphics.Path,android.graphics.Region)
boolean nativeGetBounds(int,android.graphics.Rect)
boolean getBounds(android.graphics.Rect)
boolean nativeGetBoundaryPath(int,int)
android.graphics.Path getBoundaryPath()
boolean getBoundaryPath(android.graphics.Path)
boolean quickContains(int,int,int,int)
boolean quickContains(android.graphics.Rect)
boolean quickReject(int,int,int,int)
boolean quickReject(android.graphics.Rect)
void translate(int,int,android.graphics.Region)
void scale(float,android.graphics.Region)
boolean union(android.graphics.Rect)
boolean nativeOp(int,int,int,int,int,int)
boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)
boolean nativeOp(int,android.graphics.Rect,int,int)
boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)
boolean nativeOp(int,int,int,int)
boolean nativeWriteToParcel(int,android.os.Parcel)
boolean nativeEquals(int,int)
int nativeCreateFromParcel(android.os.Parcel)
android.graphics.Paint$Align[] values()
android.graphics.Paint$Align valueOf(java.lang.String)
android.graphics.PorterDuff$Mode[] values()
android.graphics.Path$Direction[] values()
android.graphics.Path$Direction valueOf(java.lang.String)
boolean nativeNext(int,android.graphics.Rect)
boolean next(android.graphics.Rect)
java.lang.String toShortString(java.lang.StringBuilder)
android.graphics.Rect unflattenFromString(java.lang.String)
int centerX()
int centerY()
float exactCenterX()
float exactCenterY()
void offsetTo(int,int)
boolean contains(int,int,int,int)
boolean setIntersect(android.graphics.Rect,android.graphics.Rect)
boolean intersects(int,int,int,int)
void union(int,int)
int alpha(int)
int red(int)
int green(int)
int blue(int)
float hue(int)
float saturation(int)
float brightness(int)
int parseColor(java.lang.String)
java.lang.String toLowerCase(java.util.Locale)
int HSBtoColor(float,float,float)
int HSBtoColor(float[])
void nativeRGBToHSV(int,int,int,float[])
void RGBToHSV(int,int,int,float[])
void colorToHSV(int,float[])
int HSVToColor(int,float[])
int HSVToColor(float[])
int nativeHSVToColor(int,float[])
void <init>(android.content.ContentResolver,android.os.ParcelFileDescriptor,android.content.IContentProvider)
android.content.Intent$ShortcutIconResource createFromParcel(android.os.Parcel)
android.content.Intent$ShortcutIconResource[] newArray(int)
void <init>(android.os.Parcel,android.content.IntentFilter$1)
android.content.IntentFilter createFromParcel(android.os.Parcel)
android.content.IntentFilter[] newArray(int)
void <init>(android.content.SyncManager)
void scheduleSync(android.accounts.Account,java.lang.String,android.os.Bundle,long,boolean)
void onServiceChanged(android.content.SyncAdapterType,boolean)
void onServiceChanged(java.lang.Object,boolean)
void <init>(android.content.SyncManager,android.content.SyncOperation,long)
void sendHeartbeat()
void access$900(android.content.SyncManager,android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)
void onFinished(android.content.SyncResult)
android.content.SyncManager$SyncHandler access$200(android.content.SyncManager)
android.content.ISyncAdapter asInterface(android.os.IBinder)
void <init>(android.content.SyncManager,android.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)
android.content.Intent setAction(java.lang.String)
android.content.Context access$1000(android.content.SyncManager)
boolean bindToSyncAdapter(android.content.pm.RegisteredServicesCache$ServiceInfo)
void <init>(android.content.AbstractThreadedSyncAdapter,java.lang.String,android.content.SyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)
android.content.Context access$700(android.content.AbstractThreadedSyncAdapter)
android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)
void onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)
boolean release()
java.lang.Object access$100(android.content.AbstractThreadedSyncAdapter)
android.content.AbstractThreadedSyncAdapter$SyncThread access$202(android.content.AbstractThreadedSyncAdapter,android.content.AbstractThreadedSyncAdapter$SyncThread)
boolean isInterrupted()
void <init>(android.content.AbstractThreadedSyncAdapter,java.lang.String,android.content.SyncContext,java.lang.String,android.accounts.Account,android.os.Bundle,android.content.AbstractThreadedSyncAdapter$1)
android.content.SyncContext access$600(android.content.AbstractThreadedSyncAdapter$SyncThread)
void <init>(android.content.SyncManager$InitializerServiceConnection)
android.content.Context access$600(android.content.SyncManager$InitializerServiceConnection)
android.content.Context access$602(android.content.SyncManager$InitializerServiceConnection,android.content.Context)
void startSync(android.content.ISyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)
void cancelSync(android.content.ISyncContext)
void initialize(android.accounts.Account,java.lang.String)
void setKeepUpdated(boolean)
void readCursorIntoCache()
void <init>(android.database.Cursor,java.lang.String,boolean,android.os.Handler)
void <init>(android.content.ContentQueryMap,android.os.Handler)
android.content.ContentValues getValues(java.lang.String)
void setChanged()
void notifyObservers()
java.util.Map getRows()
boolean access$002(android.content.ContentQueryMap,boolean)
void access$100(android.content.SyncManager)
void onStatusChanged(int)
void <init>(java.util.HashMap,android.content.ContentValues$1)
android.content.ContentValues createFromParcel(android.os.Parcel)
android.content.ContentValues[] newArray(int)
void setupSuggestions(java.lang.String,int)
android.content.ComponentName clone()
java.lang.String getShortClassName()
int compareTo(android.content.ComponentName)
void <init>(java.lang.String,android.os.Parcel)
void writeContentQuerySample(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,int)
void writeContentUpdateSample(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,int)
void writeBinderSample(java.lang.String,int,int,java.lang.String,int)
int access$000(android.content.ContentProviderOperation$Builder)
android.net.Uri access$100(android.content.ContentProviderOperation$Builder)
android.content.ContentValues access$200(android.content.ContentProviderOperation$Builder)
java.lang.String access$300(android.content.ContentProviderOperation$Builder)
java.lang.String[] access$400(android.content.ContentProviderOperation$Builder)
java.lang.Integer access$500(android.content.ContentProviderOperation$Builder)
java.util.Map access$600(android.content.ContentProviderOperation$Builder)
android.content.ContentValues access$700(android.content.ContentProviderOperation$Builder)
boolean access$800(android.content.ContentProviderOperation$Builder)
void <init>(android.content.ContentProviderOperation$Builder)
void <init>(int,android.net.Uri,android.content.ContentProviderOperation$1)
android.content.ContentProviderOperation$Builder newDelete(android.net.Uri)
android.content.ContentProviderOperation$Builder newAssertQuery(android.net.Uri)
android.net.Uri getUri()
boolean isYieldAllowed()
boolean isWriteOperation()
boolean isReadOperation()
android.content.ContentValues resolveValueBackReferences(android.content.ContentProviderResult[],int)
java.lang.String[] resolveSelectionArgsBackReferences(android.content.ContentProviderResult[],int)
android.content.ContentProviderResult apply(android.content.ContentProvider,android.content.ContentProviderResult[],int)
long backRefToValue(android.content.ContentProviderResult[],int,java.lang.Integer)
void <init>(android.os.Parcel,android.content.ContentProviderOperation$1)
void <init>(android.content.ContentProviderOperation$Builder,android.content.ContentProviderOperation$1)
void <init>(android.accounts.Account,java.lang.String,android.os.Bundle,long)
android.content.PeriodicSync createFromParcel(android.os.Parcel)
android.content.PeriodicSync[] newArray(int)
boolean access$400(android.content.SyncManager)
boolean access$402(android.content.SyncManager,boolean)
android.content.SyncStorageEngine access$500(android.content.SyncManager)
void clearAllBackoffs()
android.content.SyncManager getSyncManager()
void dump(java.io.FileDescriptor,java.io.PrintWriter)
void addObserverLocked(android.net.Uri,android.database.IContentObserver,boolean,java.lang.Object)
void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver)
boolean removeObserverLocked(android.database.IContentObserver)
void unregisterContentObserver(android.database.IContentObserver)
void collectObserversLocked(android.net.Uri,int,android.database.IContentObserver,boolean,java.util.ArrayList)
java.util.ArrayList access$000(android.content.ContentService$ObserverNode)
void scheduleLocalSync(android.accounts.Account,java.lang.String)
void notifyChange(android.net.Uri,android.database.IContentObserver,boolean,boolean)
void validateSyncExtrasBundle(android.os.Bundle)
void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)
void clearScheduledSyncOperations(android.accounts.Account,java.lang.String)
void cancelActiveSync(android.accounts.Account,java.lang.String)
void cancelSync(android.accounts.Account,java.lang.String)
android.content.SyncAdapterType[] getSyncAdapterTypes()
android.content.SyncStorageEngine getSyncStorageEngine()
boolean getSyncAutomatically(android.accounts.Account,java.lang.String)
void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)
void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)
void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)
java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)
int getIsSyncable(android.accounts.Account,java.lang.String)
void setIsSyncable(android.accounts.Account,java.lang.String,int)
boolean getMasterSyncAutomatically()
void setMasterSyncAutomatically(boolean)
boolean isSyncActive(android.accounts.Account,java.lang.String)
android.content.SyncInfo getCurrentSync()
android.content.SyncStatusInfo getStatusByAccountAndAuthority(android.accounts.Account,java.lang.String)
android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)
boolean isSyncPending(android.accounts.Account,java.lang.String)
void addStatusChangeListener(int,android.content.ISyncStatusObserver)
void removeStatusChangeListener(android.content.ISyncStatusObserver)
android.content.IContentService main(android.content.Context,boolean)
void <init>(android.content.ISyncContext)
void updateHeartbeat()
void setStatusText(java.lang.String)
android.os.IBinder getSyncContextBinder()
android.content.SyncManager$ActiveSyncContext access$1200(android.content.SyncManager)
long timeSpentSyncing()
void <init>(android.content.SyncManager,android.content.SyncManager$1)
android.content.SyncStatusInfo createFromParcel(android.os.Parcel)
android.content.SyncStatusInfo[] newArray(int)
void sendSyncFinishedOrCanceledMessage(android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)
void sendCheckAlarmsMessage()
void doDatabaseCleanup(android.accounts.Account[])
void onAccountsUpdated(android.accounts.Account[])
android.content.SyncStorageEngine getSingleton()
void <init>(android.content.SyncStorageEngine)
void <init>(android.content.SyncManager,android.os.Looper)
void setListener(android.content.pm.RegisteredServicesCacheListener,android.os.Handler)
android.accounts.AccountManager get(android.content.Context)
void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)
android.accounts.Account[] getAccounts()
long jitterize(long,long)
void ensureAlarmService()
android.content.SyncAdapterType newKey(java.lang.String,java.lang.String)
android.content.pm.RegisteredServicesCache$ServiceInfo getServiceInfo(java.lang.Object)
void removeAuthority(android.accounts.Account,java.lang.String)
void <init>(android.accounts.Account,java.lang.String,android.content.Context,android.os.Handler)
void initializeSyncAdapter(android.accounts.Account,java.lang.String)
java.util.Collection getAllServices()
boolean supportsUploading()
void <init>(android.accounts.Account,int,java.lang.String,android.os.Bundle,long)
void scheduleSyncOperation(android.content.SyncOperation)
void sendSyncAlarmMessage()
void <init>(android.content.SyncManager,android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)
void setBackoff(android.accounts.Account,java.lang.String,long,long)
void clearBackoffSetting(android.content.SyncOperation)
android.util.Pair getBackoff(android.accounts.Account,java.lang.String)
void increaseBackoffSetting(android.content.SyncOperation)
void setDelayUntilTime(android.accounts.Account,java.lang.String,long)
void setDelayUntilTime(android.content.SyncOperation,long)
void <init>(android.content.SyncOperation)
boolean add(android.content.SyncOperation)
void remove(android.accounts.Account,java.lang.String)
boolean madeSomeProgress()
boolean hasSoftError()
void maybeRescheduleSync(android.content.SyncResult,android.content.SyncOperation)
void dumpSyncState(java.io.PrintWriter,java.lang.StringBuilder)
void dumpSyncHistory(java.io.PrintWriter,java.lang.StringBuilder)
java.lang.String formatTime(long)
java.lang.Long access$1100(android.content.SyncManager$SyncHandler)
void dump(java.lang.StringBuilder)
android.content.SyncStorageEngine$AuthorityInfo getAuthority(int)
java.util.ArrayList getPendingOperations()
void extrasToStringBuilder(android.os.Bundle,java.lang.StringBuilder,boolean)
android.content.SyncStorageEngine$AuthorityInfo getOrCreateAuthority(android.accounts.Account,java.lang.String)
android.content.SyncStatusInfo getOrCreateSyncStatus(android.content.SyncStorageEngine$AuthorityInfo)
long getPeriodicSyncTime(int)
void dumpTimeSec(java.io.PrintWriter,long)
void dumpDayStatistic(java.io.PrintWriter,android.content.SyncStorageEngine$DayStats)
android.content.SyncStorageEngine$DayStats[] getDayStatistics()
java.util.ArrayList getSyncHistory()
boolean access$002(android.content.SyncManager,boolean)
android.net.ConnectivityManager access$300(android.content.SyncManager)
android.os.PowerManager$WakeLock access$700(android.content.SyncManager)
void access$800(android.content.SyncManager)
boolean access$1402(android.content.SyncManager,boolean)
android.os.PowerManager$WakeLock access$1500(android.content.SyncManager)
android.accounts.Account[] access$1600(android.content.SyncManager)
long access$1700()
boolean access$000(android.content.SyncManager)
android.accounts.Account[] access$1800()
android.content.SyncAdaptersCache access$1900(android.content.SyncManager)
android.content.SyncManager$ActiveSyncContext access$1202(android.content.SyncManager,android.content.SyncManager$ActiveSyncContext)
void access$2000(android.content.SyncManager,android.content.SyncOperation)
void access$2100(android.content.SyncManager,android.content.SyncOperation)
void access$2200(android.content.SyncManager,android.content.SyncOperation,long)
android.app.NotificationManager access$2300(android.content.SyncManager)
boolean access$2402(android.content.SyncManager,boolean)
boolean access$2502(android.content.SyncManager,boolean)
void access$2600(android.content.SyncManager)
android.app.PendingIntent access$2700(android.content.SyncManager)
android.app.AlarmManager access$2800(android.content.SyncManager)
boolean access$2400(android.content.SyncManager)
boolean access$2500(android.content.SyncManager)
java.lang.String intern()
java.lang.String access$000(android.content.IntentFilter$AuthorityEntry)
int access$100(android.content.IntentFilter$AuthorityEntry)
boolean access$200(android.content.IntentFilter$AuthorityEntry)
void <init>(android.accounts.Account)
void <init>(java.util.HashMap)
void putAll(android.content.ContentValues)
void put(java.lang.String,java.lang.Byte)
java.lang.Short valueOf(java.lang.String)
java.lang.Short getAsShort(java.lang.String)
java.lang.Byte valueOf(java.lang.String)
java.lang.Byte getAsByte(java.lang.String)
java.lang.Double getAsDouble(java.lang.String)
java.lang.Float valueOf(java.lang.String)
java.lang.Float getAsFloat(java.lang.String)
java.lang.Boolean getAsBoolean(java.lang.String)
void startInsert(int,java.lang.Object,android.net.Uri,android.content.ContentValues)
void startDelete(int,java.lang.Object,android.net.Uri,java.lang.String,java.lang.String[])
void onInsertComplete(int,java.lang.Object,android.net.Uri)
void onUpdateComplete(int,java.lang.Object,int)
void onDeleteComplete(int,java.lang.Object,int)
void <init>(android.content.IntentSender,android.content.IntentSender$OnFinished,android.os.Handler)
void onSendFinished(android.content.IntentSender,android.content.Intent,int,java.lang.String,android.os.Bundle)
boolean add(android.content.SyncOperation,android.content.SyncStorageEngine$PendingOperation)
void <init>(android.accounts.Account,int,java.lang.String,android.os.Bundle,boolean)
android.content.SyncStorageEngine$PendingOperation insertIntoPending(android.content.SyncStorageEngine$PendingOperation)
boolean deleteFromPending(android.content.SyncStorageEngine$PendingOperation)
void remove(android.content.SyncOperation)
long getOpTime(android.content.SyncOperation)
boolean getIsInitial(android.content.SyncOperation)
boolean isOpBetter(android.content.SyncOperation,long,boolean,android.content.SyncOperation,long,boolean)
android.util.Pair nextOperation()
long getDelayUntilTime(android.accounts.Account,java.lang.String)
android.util.Pair nextReadyToRun(long)
void <init>(android.content.res.CompatibilityInfo$1)
void makeDefault()
boolean needNewResources(int,int)
int compareTo(android.content.res.Configuration)
void <init>(android.os.Parcel,android.content.res.Configuration$1)
int access$002(android.content.res.StringBlock$StyleIDs,int)
int access$102(android.content.res.StringBlock$StyleIDs,int)
int access$202(android.content.res.StringBlock$StyleIDs,int)
int access$302(android.content.res.StringBlock$StyleIDs,int)
int access$402(android.content.res.StringBlock$StyleIDs,int)
int access$502(android.content.res.StringBlock$StyleIDs,int)
int access$602(android.content.res.StringBlock$StyleIDs,int)
int access$702(android.content.res.StringBlock$StyleIDs,int)
int access$802(android.content.res.StringBlock$StyleIDs,int)
int access$902(android.content.res.StringBlock$StyleIDs,int)
int access$1002(android.content.res.StringBlock$StyleIDs,int)
int access$000(android.content.res.StringBlock$StyleIDs)
int access$100(android.content.res.StringBlock$StyleIDs)
int access$200(android.content.res.StringBlock$StyleIDs)
int access$300(android.content.res.StringBlock$StyleIDs)
int access$400(android.content.res.StringBlock$StyleIDs)
int access$500(android.content.res.StringBlock$StyleIDs)
int access$700(android.content.res.StringBlock$StyleIDs)
int access$600(android.content.res.StringBlock$StyleIDs)
int access$800(android.content.res.StringBlock$StyleIDs)
int access$900(android.content.res.StringBlock$StyleIDs)
int access$1000(android.content.res.StringBlock$StyleIDs)
void <init>(android.os.Parcel,android.content.res.ObbInfo$1)
long access$100(android.content.res.AssetManager,int)
void <init>(android.content.res.AssetManager,int)
int access$200(android.content.res.AssetManager,int)
long access$300(android.content.res.AssetManager,int)
void access$400(android.content.res.AssetManager,int)
void access$500(android.content.res.AssetManager,int)
long access$600(android.content.res.AssetManager,int,long,int)
int access$700(android.content.res.AssetManager,int,byte[],int,int)
void <init>(android.content.res.AssetManager,int,android.content.res.AssetManager$1)
void <init>(android.content.res.CompatibilityInfo,float,float)
void <init>(android.content.res.CompatibilityInfo)
android.content.res.Configuration createFromParcel(android.os.Parcel)
android.content.res.Configuration[] newArray(int)
android.content.res.ColorStateList[] newArray(int)
void <init>(int[][],int[])
android.content.res.ColorStateList createFromParcel(android.os.Parcel)
android.util.LongSparseArray emptySparseArray()
void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)
void ensureStringBlocks()
java.lang.CharSequence getResourceText(int)
android.content.res.PluralRules getPluralRule()
int attrForNumber(int)
java.lang.CharSequence getResourceBagText(int,int)
int quantityForNumber(int)
java.lang.String stringForQuantity(int)
android.content.res.PluralRules ruleForLocale(java.util.Locale)
java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])
java.lang.String getQuantityString(int,int,java.lang.Object[])
java.lang.CharSequence getText(int,java.lang.CharSequence)
java.lang.CharSequence[] getResourceTextArray(int)
java.lang.String[] getResourceStringArray(int)
int[] getArrayIntResource(int)
int getArraySize(int)
android.content.res.TypedArray getCachedStyledAttributes(int)
int retrieveArray(int,int[])
float getFraction(int,int,int)
android.graphics.drawable.Drawable loadDrawable(android.util.TypedValue,int)
android.graphics.Movie getMovie(int)
int getColor(int)
android.content.res.ColorStateList loadColorStateList(android.util.TypedValue,int)
int getInteger(int)
android.content.res.XmlResourceParser loadXmlResourceParser(int,java.lang.String)
android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)
boolean getResourceValue(int,android.util.TypedValue,boolean)
void getValue(java.lang.String,android.util.TypedValue,boolean)
boolean retrieveAttributes(int,int[],int[],int[])
void setConfiguration(int,int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)
void setCompatibilityInfo(android.content.res.CompatibilityInfo)
int getResourceIdentifier(java.lang.String,java.lang.String,java.lang.String)
java.lang.String getResourcePackageName(int)
void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)
android.graphics.drawable.Drawable getCachedDrawable(long)
android.content.res.XmlResourceParser loadXmlResourceParser(java.lang.String,int,int,java.lang.String)
android.content.res.ColorStateList getCachedColorStateList(int)
android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)
android.content.res.XmlResourceParser newParser()
android.content.res.XmlBlock openXmlBlockAsset(int,java.lang.String)
void <init>(android.content.res.Resources,int[],int[],int)
android.content.res.AssetManager getSystem()
android.content.res.TypedArray access$000(android.content.res.Resources,int)
android.content.res.ObbInfo createFromParcel(android.os.Parcel)
android.content.res.ObbInfo[] newArray(int)
void ensureSystemAssets()
void makeStringBlocks(boolean)
void decRefsLocked(int)
int loadResourceValue(int,android.util.TypedValue,boolean)
java.lang.CharSequence get(int)
int loadResourceBagValue(int,int,android.util.TypedValue,boolean)
java.lang.String[] getArrayStringResource(int)
int[] getArrayStringInfo(int)
int loadThemeAttributeValue(int,int,android.util.TypedValue,boolean)
boolean getThemeValue(int,int,android.util.TypedValue,boolean)
int getStringBlockCount()
int getNativeStringBlock(int)
java.lang.CharSequence getPooledString(int,int)
java.io.InputStream open(java.lang.String,int)
int openAsset(java.lang.String,int)
void incRefsLocked(int)
android.os.ParcelFileDescriptor openAssetFd(java.lang.String,long[])
void <init>(android.os.ParcelFileDescriptor,long,long)
android.content.res.AssetFileDescriptor openFd(java.lang.String)
java.io.InputStream openNonAsset(java.lang.String,int)
java.io.InputStream openNonAsset(int,java.lang.String)
int openNonAssetNative(int,java.lang.String,int)
android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)
android.os.ParcelFileDescriptor openNonAssetFdNative(int,java.lang.String,long[])
android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)
android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)
android.content.res.XmlBlock openXmlBlockAsset(java.lang.String)
int openXmlAssetNative(int,java.lang.String)
void xmlBlockGone(int)
int newTheme()
int createTheme()
void deleteTheme(int)
void releaseTheme(int)
int[] addAssetPaths(java.lang.String[])
long getAssetLength(int)
int readAssetChar(int)
long getAssetRemainingLength(int)
void destroyAsset(int)
long seekAsset(int,long,int)
int readAsset(int,byte[],int,int)
android.content.res.AssetFileDescriptor createFromParcel(android.os.Parcel)
android.content.res.AssetFileDescriptor[] newArray(int)
long getStatSize()
boolean isMemoryFile()
void <init>(android.os.ParcelFileDescriptor,int)
void <init>(android.content.res.AssetFileDescriptor)
java.io.FileInputStream createInputStream()
java.io.FileOutputStream createOutputStream()
void <init>(android.content.res.PluralRules$1)
java.lang.CharSequence loadStringValueAt(int)
boolean getValueAt(int,android.util.TypedValue)
java.lang.CharSequence getPooledString(int)
java.lang.String getNonResourceString(int)
java.lang.String getNonConfigurationString(int,int)
int getInteger(int,int)
java.lang.String toString(int[])
long seekTo(long)
int attrForQuantity(int)
void applyThemeStyle(int,int,boolean)
void copyTheme(int,int)
boolean applyStyle(int,int,int,int,int[],int[],int[])
void dumpTheme(int,int,java.lang.String,java.lang.String)
void dump(int,java.lang.String,java.lang.String)
int nativeCreate(byte[],int,int)
int nativeGetStringBlock(int)
void decOpenCountLocked()
void nativeDestroy(int)
int nativeCreateParseState(int)
void <init>(android.content.res.XmlBlock,int,android.content.res.XmlBlock)
int access$008(android.content.res.XmlBlock)
int nativeGetText(int)
int access$100(int)
android.content.res.StringBlock access$200(android.content.res.XmlBlock)
int nativeGetLineNumber(int)
int access$300(int)
int nativeGetNamespace(int)
int access$400(int)
int nativeGetName(int)
int access$500(int)
int nativeGetAttributeNamespace(int,int)
int access$600(int,int)
int nativeGetAttributeName(int,int)
int access$700(int,int)
int nativeGetAttributeCount(int)
int access$800(int)
int nativeGetAttributeStringValue(int,int)
int access$900(int,int)
int nativeGetAttributeDataType(int,int)
int access$1000(int,int)
int nativeGetAttributeData(int,int)
int access$1100(int,int)
int nativeGetAttributeIndex(int,java.lang.String,java.lang.String)
int access$1200(int,java.lang.String,java.lang.String)
int nativeNext(int)
int access$1300(int)
int nativeGetAttributeResource(int,int)
int access$1400(int,int)
int nativeGetIdAttribute(int)
int access$1500(int)
int nativeGetClassAttribute(int)
int access$1600(int)
int nativeGetStyleAttribute(int)
int access$1700(int)
void nativeDestroyParseState(int)
void access$1800(int)
void access$1900(android.content.res.XmlBlock)
void <init>(byte[],boolean)
void <init>(byte[],int,int,boolean)
int nativeGetSize(int)
java.lang.String nativeGetString(int,int)
int[] nativeGetStyle(int,int)
int nativeIndexOfString(int,java.lang.String)
java.lang.CharSequence applyStyles(java.lang.String,int[],android.content.res.StringBlock$StyleIDs)
void addParagraphSpan(android.text.Spannable,java.lang.Object,int,int)
java.lang.String subtag(java.lang.String,java.lang.String)
void getObbInfo_native(java.lang.String,android.content.res.ObbInfo)
void <init>(int,int,int,float,float)
void updateCompatibleScreenFrame(android.util.DisplayMetrics,int,android.graphics.Rect)
android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)
android.content.res.ColorStateList withAlpha(int)
java.lang.String deepToString(java.lang.Object[])
void defineEntityReplacementText(java.lang.String,java.lang.String)
java.lang.String getNamespacePrefix(int)
java.lang.String getInputEncoding()
java.lang.String getNamespace(java.lang.String)
int getNamespaceCount(int)
java.lang.String getNamespaceUri(int)
int getColumnNumber()
boolean isWhitespace()
char[] getTextCharacters(int[])
java.lang.String getAttributeNamespace(int)
java.lang.String getAttributePrefix(int)
boolean isEmptyElementTag()
java.lang.String getAttributeType(int)
boolean isAttributeDefault(int)
void require(int,java.lang.String,java.lang.String)
void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)
java.lang.String nextText()
int nextTag()
java.lang.String getUriSegment(android.net.Uri,int)
int countUriSegments(android.net.Uri)
void addObserverLocked(android.net.Uri,int,android.database.IContentObserver,boolean,java.lang.Object)
void <init>(android.content.ContentService$ObserverNode,android.database.IContentObserver,boolean,java.lang.Object)
void <init>(android.content.ContentService$ObserverNode,android.database.IContentObserver,boolean)
void collectMyObserversLocked(boolean,android.database.IContentObserver,boolean,java.util.ArrayList)
void <init>(java.lang.String,java.lang.String,boolean,boolean)
boolean isUserVisible()
void <init>(android.content.ContentProvider)
void <init>(android.content.Context,java.lang.String,java.lang.String,android.content.pm.PathPermission[])
android.content.ContentProvider getContentProvider()
android.content.ContentProvider coerceToLocalContentProvider(android.content.IContentProvider)
void setReadPermission(java.lang.String)
java.lang.String getReadPermission()
void setWritePermission(java.lang.String)
java.lang.String getWritePermission()
void setPathPermissions(android.content.pm.PathPermission[])
android.content.pm.PathPermission[] getPathPermissions()
int bulkInsert(android.net.Uri,android.content.ContentValues[])
android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)
android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)
int modeToMode(android.net.Uri,java.lang.String)
android.os.ParcelFileDescriptor openFileHelper(android.net.Uri,java.lang.String)
boolean isTemporary()
android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)
int access$000(android.content.ContentProvider)
boolean access$100(android.content.ContentProvider)
int filterHashCode()
void <init>(int,android.accounts.Account,java.lang.String,long)
android.content.Entity next()
android.content.Intent createFromParcel(android.os.Parcel)
android.content.Intent[] newArray(int)
android.content.IContentProvider acquireExistingProvider(android.net.Uri)
android.content.IContentProvider acquireProvider(android.net.Uri)
void maybeLogQueryToEventLog(long,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)
void <init>(android.content.ContentResolver,android.database.Cursor,android.content.IContentProvider)
java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)
void maybeLogUpdateToEventLog(long,android.net.Uri,java.lang.String,java.lang.String)
void <init>(android.content.ContentResolver,android.content.IContentProvider)
android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)
android.content.IContentService getContentService()
void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)
void startSync(android.net.Uri,android.os.Bundle)
void cancelSync(android.net.Uri)
void <init>(android.content.SyncStatusObserver)
java.lang.Object addStatusChangeListener(int,android.content.SyncStatusObserver)
void removeStatusChangeListener(java.lang.Object)
int samplePercentForDuration(long)
android.content.IContentService asInterface(android.os.IBinder)
android.content.ISyncStatusObserver asInterface(android.os.IBinder)
void removeFalseExtra(java.lang.String)
java.lang.String toKey()
android.content.IntentSender createFromParcel(android.os.Parcel)
android.content.IntentSender[] newArray(int)
android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)
android.content.pm.LabeledIntent createFromParcel(android.os.Parcel)
android.content.pm.LabeledIntent[] newArray(int)
void generateServicesMap()
void <init>(android.content.pm.RegisteredServicesCache)
void <init>(android.content.Context,java.lang.String,java.lang.String,java.lang.String,android.content.pm.XmlSerializerAndParser)
android.content.pm.RegisteredServicesCacheListener getListener()
void <init>(android.content.pm.RegisteredServicesCache,android.content.pm.RegisteredServicesCacheListener,java.lang.Object,boolean)
void notifyListener(java.lang.Object,boolean)
java.util.Collection unmodifiableCollection(java.util.Collection)
java.lang.Object getAndSet(java.lang.Object)
boolean inSystemImage(int)
android.content.pm.RegisteredServicesCache$ServiceInfo parseServiceInfo(android.content.pm.ResolveInfo)
void readPersistentServicesLocked()
boolean containsTypeAndUid(java.util.ArrayList,java.lang.Object,int)
boolean containsType(java.util.ArrayList,java.lang.Object)
void writePersistentServicesLocked()
java.lang.Object parseServiceAttributes(android.content.res.Resources,java.lang.String,android.util.AttributeSet)
void <init>(java.lang.Object,android.content.ComponentName,int,android.content.pm.RegisteredServicesCache$1)
java.lang.Object createFromXml(org.xmlpull.v1.XmlPullParser)
void writeAsXml(java.lang.Object,org.xmlpull.v1.XmlSerializer)
void <init>(android.os.Parcel,android.content.pm.FeatureInfo$1)
android.content.pm.FeatureInfo createFromParcel(android.os.Parcel)
android.content.pm.FeatureInfo[] newArray(int)
void <init>(android.content.pm.PackageParser$Activity)
void packageInstalled(java.lang.String,int)
void <init>(android.os.Parcel,android.content.pm.ProviderInfo$1)
android.content.pm.ProviderInfo createFromParcel(android.os.Parcel)
android.content.pm.ProviderInfo[] newArray(int)
void <init>(android.content.pm.PackageParser$ParsePackageItemArgs,android.content.pm.PackageItemInfo)
void <init>(android.content.pm.PackageParser$ParsePackageItemArgs,android.content.pm.InstrumentationInfo)
void setPackageName(java.lang.String)
java.lang.String getComponentShortName()
void <init>(android.os.Parcel,android.content.pm.ApplicationInfo$1)
android.content.pm.ApplicationInfo createFromParcel(android.os.Parcel)
android.content.pm.ApplicationInfo[] newArray(int)
void <init>(android.os.Parcel,android.content.pm.PackageInfoLite$1)
android.content.pm.PackageInfoLite createFromParcel(android.os.Parcel)
android.content.pm.PackageInfoLite[] newArray(int)
void <init>(android.content.Intent,java.lang.String,int,int)
void <init>(android.content.Intent,java.lang.String,java.lang.CharSequence,int)
void <init>(java.lang.String,java.lang.CharSequence,int)
void <init>(android.content.pm.PackageParser$ParseComponentArgs,android.content.pm.ComponentInfo)
void <init>(android.content.pm.PackageParser$ParseComponentArgs,android.content.pm.ServiceInfo)
void <init>(android.content.pm.PackageParser$ParseComponentArgs,android.content.pm.ActivityInfo)
void packageMoved(java.lang.String,int)
void <init>(android.os.Parcel,android.content.pm.ConfigurationInfo$1)
android.content.pm.ConfigurationInfo createFromParcel(android.os.Parcel)
android.content.pm.ConfigurationInfo[] newArray(int)
void <init>(android.content.pm.PackageItemInfo)
void <init>(android.content.pm.PermissionGroupInfo)
void <init>(android.os.Parcel,android.content.pm.PermissionGroupInfo$1)
int getPackageUid(java.lang.String)
int checkUidPermission(java.lang.String,int)
boolean isProtectedBroadcast(java.lang.String)
java.util.List getPersistentApplications(int)
void readStringList(java.util.List)
void querySyncProviders(java.util.List,java.util.List)
void finishPackageInstall(int)
void systemReady()
boolean hasSystemUidErrors()
boolean performDexOpt(java.lang.String)
void updateExternalMediaStatus(boolean,boolean)
java.lang.String nextPackageToClean(java.lang.String)
boolean setInstallLocation(int)
int getInstallLocation()
void <init>(java.lang.Object,android.content.ComponentName,int)
android.content.pm.PackageParser$Package parsePackage(java.io.File,java.lang.String,android.util.DisplayMetrics,int)
android.content.pm.PackageInfo generatePackageInfo(android.content.pm.PackageParser$Package,int[],int,long,long)
android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)
void <init>(android.os.Parcel,int,boolean,android.content.pm.ParceledListSlice$1)
android.content.pm.ParceledListSlice createFromParcel(android.os.Parcel)
android.content.pm.ParceledListSlice[] newArray(int)
void <init>(android.content.pm.PackageParser$Package)
void <init>(android.content.pm.PackageParser$Package,android.content.pm.PermissionInfo)
void onRemoveCompleted(java.lang.String,boolean)
android.content.pm.PermissionGroupInfo createFromParcel(android.os.Parcel)
android.content.pm.PermissionGroupInfo[] newArray(int)
void <init>(android.content.pm.ComponentInfo)
void <init>(android.content.pm.ActivityInfo)
void dumpFront(android.util.Printer,java.lang.String)
void dumpBack(android.util.Printer,java.lang.String)
void <init>(android.os.Parcel,android.content.pm.ActivityInfo$1)
android.graphics.drawable.Drawable loadDefaultIcon(android.content.pm.PackageManager)
android.graphics.drawable.Drawable loadDefaultLogo(android.content.pm.PackageManager)
android.content.pm.IPackageDeleteObserver asInterface(android.os.IBinder)
void packageDeleted(boolean)
android.content.pm.IPackageMoveObserver asInterface(android.os.IBinder)
char[] toChars(char[],int[])
char[] toChars()
java.lang.String toCharsString()
int hashCode(byte[])
void <init>(android.os.Parcel,android.content.pm.Signature$1)
void <init>(android.content.pm.PackageParser$Package,java.lang.String[],int,int,int,int)
void <init>(android.content.pm.PackageParser$Package,java.lang.String[],int,int,int,int,java.lang.String[],int,int,int)
void <init>(android.content.pm.PackageParser$Service)
void onGetStatsCompleted(android.content.pm.PackageStats,boolean)
android.content.pm.ActivityInfo createFromParcel(android.os.Parcel)
android.content.pm.ActivityInfo[] newArray(int)
void <init>(android.os.Parcel,int,boolean)
boolean append(android.os.Parcelable)
void setLastSlice(boolean)
void <init>(android.os.Parcel,android.content.pm.InstrumentationInfo$1)
android.content.pm.InstrumentationInfo createFromParcel(android.os.Parcel)
android.content.pm.InstrumentationInfo[] newArray(int)
void <init>(java.lang.String,int,java.lang.String,java.lang.String)
void <init>(android.content.pm.InstrumentationInfo)
void <init>(android.content.pm.PackageStats)
android.content.pm.IPackageInstallObserver asInterface(android.os.IBinder)
int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)
void <init>(android.content.pm.ServiceInfo)
void <init>(android.os.Parcel,android.content.pm.ServiceInfo$1)
android.content.pm.ServiceInfo createFromParcel(android.os.Parcel)
android.content.pm.ServiceInfo[] newArray(int)
void <init>(android.content.pm.ConfigurationInfo)
java.lang.String getGlEsVersion()
android.content.pm.IPackageStatsObserver asInterface(android.os.IBinder)
void setSeparateProcesses(java.lang.String[])
boolean isPackageFilename(java.lang.String)
android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.PackageParser$Package,int)
android.content.pm.ActivityInfo generateActivityInfo(android.content.pm.PackageParser$Activity,int)
android.content.pm.ServiceInfo generateServiceInfo(android.content.pm.PackageParser$Service,int)
android.content.pm.ProviderInfo generateProviderInfo(android.content.pm.PackageParser$Provider,int)
android.content.pm.InstrumentationInfo generateInstrumentationInfo(android.content.pm.PackageParser$Instrumentation,int)
android.content.pm.PermissionInfo generatePermissionInfo(android.content.pm.PackageParser$Permission,int)
java.security.cert.Certificate[] getCertificates()
java.security.cert.Certificate[] loadCertificates(java.util.jar.JarFile,java.util.jar.JarEntry,byte[])
int getParseError()
android.content.pm.PackageParser$Package parsePackage(android.content.res.Resources,android.content.res.XmlResourceParser,int,java.lang.String[])
java.util.jar.JarEntry getJarEntry(java.lang.String)
boolean collectCertificates(android.content.pm.PackageParser$Package,int)
android.content.pm.PackageParser$PackageLite parsePackageLite(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])
android.content.pm.PackageParser$PackageLite parsePackageLite(java.lang.String,int)
java.lang.String validateName(java.lang.String,boolean)
java.lang.String parsePackageName(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])
android.content.pm.Signature stringToSignature(java.lang.String)
boolean parseApplication(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])
android.content.pm.PackageParser$PermissionGroup parsePermissionGroup(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,java.lang.String[])
android.content.pm.PackageParser$Permission parsePermission(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,java.lang.String[])
android.content.pm.PackageParser$Permission parsePermissionTree(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,java.lang.String[])
android.content.pm.PackageParser$Instrumentation parseInstrumentation(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,java.lang.String[])
java.lang.String buildClassName(java.lang.String,java.lang.CharSequence,java.lang.String[])
java.lang.String buildCompoundName(java.lang.String,java.lang.CharSequence,java.lang.String,java.lang.String[])
java.lang.String buildProcessName(java.lang.String,java.lang.String,java.lang.CharSequence,int,java.lang.String[],java.lang.String[])
java.lang.String buildTaskAffinityName(java.lang.String,java.lang.String,java.lang.CharSequence,java.lang.String[])
boolean parsePackageItemInfo(android.content.pm.PackageParser$Package,android.content.pm.PackageItemInfo,java.lang.String[],java.lang.String,android.content.res.TypedArray,int,int,int,int)
boolean parseAllMetaData(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,java.lang.String,android.content.pm.PackageParser$Component,java.lang.String[])
android.content.pm.PackageParser$Activity parseActivity(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[],boolean)
android.content.pm.PackageParser$Service parseService(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])
android.content.pm.PackageParser$Provider parseProvider(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])
android.content.pm.PackageParser$Activity parseActivityAlias(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])
android.os.Bundle parseMetaData(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.os.Bundle,java.lang.String[])
boolean parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,android.content.pm.PackageParser$IntentInfo,java.lang.String[],boolean)
int countActions()
void <init>(android.content.pm.PackageParser$ParseComponentArgs,android.content.pm.ProviderInfo)
boolean parseProviderTags(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.pm.PackageParser$Provider,java.lang.String[])
boolean hasCategory(java.lang.String)
boolean copyNeeded(int,android.content.pm.PackageParser$Package,android.os.Bundle)
void disableCompatibilityMode()
void <init>(android.content.pm.PermissionInfo)
android.content.pm.PermissionGroupInfo generatePermissionGroupInfo(android.content.pm.PackageParser$PermissionGroup,int)
void setCompatibilityModeEnabled(boolean)
java.lang.String access$000(java.lang.String,java.lang.CharSequence,java.lang.String[])
java.lang.String access$100(java.lang.String,java.lang.String,java.lang.CharSequence,int,java.lang.String[],java.lang.String[])
int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)
void <init>(android.os.Parcel,android.content.pm.ResolveInfo$1)
android.content.pm.ResolveInfo createFromParcel(android.os.Parcel)
android.content.pm.ResolveInfo[] newArray(int)
android.content.pm.PathPermission createFromParcel(android.os.Parcel)
android.content.pm.PathPermission[] newArray(int)
void <init>(android.content.pm.PackageParser$Package,android.content.pm.PermissionGroupInfo)
android.content.pm.PackageStats createFromParcel(android.os.Parcel)
android.content.pm.PackageStats[] newArray(int)
int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)
void <init>(android.content.pm.PackageParser$Component)
void <init>(android.content.pm.PackageParser$Provider)
void <init>(android.os.Parcel,android.content.pm.PackageInfo$1)
void <init>(android.content.pm.FeatureInfo)
android.content.pm.PackageInfo createFromParcel(android.os.Parcel)
android.content.pm.PackageInfo[] newArray(int)
void <init>(android.os.Parcel,android.content.pm.PermissionInfo$1)
android.content.pm.PermissionInfo createFromParcel(android.os.Parcel)
android.content.pm.PermissionInfo[] newArray(int)
boolean isPackageUnavailable(android.content.pm.PackageManager)
android.content.pm.Signature createFromParcel(android.os.Parcel)
android.content.pm.Signature[] newArray(int)
void <init>(android.content.AbstractThreadedSyncAdapter)
android.content.AbstractThreadedSyncAdapter$SyncThread access$200(android.content.AbstractThreadedSyncAdapter)
boolean access$300(android.content.AbstractThreadedSyncAdapter)
java.util.concurrent.atomic.AtomicInteger access$400(android.content.AbstractThreadedSyncAdapter)
void onSyncCanceled()
void <init>(android.content.AbstractThreadedSyncAdapter,android.content.AbstractThreadedSyncAdapter$1)
void <init>(android.os.Parcel,android.content.SyncResult$1)
android.content.SyncResult createFromParcel(android.os.Parcel)
android.content.SyncResult[] newArray(int)
android.content.SyncStats createFromParcel(android.os.Parcel)
android.content.SyncStats[] newArray(int)
void <init>(android.accounts.Account,java.lang.String,int)
void enforceReadPermission(android.net.Uri)
boolean hasWritePermission(android.net.Uri)
android.database.IBulkCursor bulkQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.database.IContentObserver,android.database.CursorWindow)
void enforceWritePermission(android.net.Uri)
void onBootCompleted()
void waitUntilReadyToRun()
void <init>(android.content.SyncManager$SyncHandler)
java.lang.Long scheduleReadyPeriodicSyncs()
void runSyncFinishedOrCanceled(android.content.SyncResult)
void runStateIdle()
void runBoundToSyncAdapter(android.content.ISyncAdapter)
void runStateSyncing()
void manageSyncNotification()
void manageErrorNotification()
void manageSyncAlarm(java.lang.Long)
java.util.ArrayList getAuthorities()
void setPeriodicSyncTime(int,long)
long insertStartSyncEvent(android.content.SyncOperation)
void setActiveSync(android.content.SyncManager$ActiveSyncContext)
boolean hasError()
int syncResultToErrorNumber(android.content.SyncResult)
void stopSyncEvent(long,android.content.SyncOperation,java.lang.String,int,int,long)
void installHandleTooManyDeletesNotification(android.accounts.Account,java.lang.String,long)
void sendSyncStateIntent()
long getInitialSyncFailureTime()
boolean isActivityAvailable(android.content.Intent)
long insertStartSyncEvent(android.accounts.Account,java.lang.String,long,int)
void stopSyncEvent(long,long,java.lang.String,long,long)
android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)
void <init>(android.content.Intent,boolean)
android.content.Intent cloneFilter()
void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)
android.content.Intent parseUri(java.lang.String,int)
boolean startsWith(java.lang.String,int)
android.content.Intent getIntentOld(java.lang.String)
java.lang.Integer decode(java.lang.String)
boolean parseBoolean(java.lang.String)
byte parseByte(java.lang.String)
void <init>(java.lang.String,java.lang.String,int)
java.lang.String getDataString()
java.lang.String resolveType(android.content.ContentResolver)
boolean hasExtra(java.lang.String)
java.lang.Object getExtra(java.lang.String,java.lang.Object)
java.lang.Object getExtra(java.lang.String)
byte getByteExtra(java.lang.String,byte)
short getShortExtra(java.lang.String,short)
char getCharExtra(java.lang.String,char)
float getFloatExtra(java.lang.String,float)
double getDoubleExtra(java.lang.String,double)
java.util.ArrayList getParcelableArrayListExtra(java.lang.String)
java.util.ArrayList getIntegerArrayListExtra(java.lang.String)
java.util.ArrayList getStringArrayListExtra(java.lang.String)
java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)
boolean[] getBooleanArrayExtra(java.lang.String)
byte[] getByteArrayExtra(java.lang.String)
short[] getShortArrayExtra(java.lang.String)
char[] getCharArrayExtra(java.lang.String)
int[] getIntArrayExtra(java.lang.String)
long[] getLongArrayExtra(java.lang.String)
float[] getFloatArrayExtra(java.lang.String)
double[] getDoubleArrayExtra(java.lang.String)
java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)
android.os.Bundle getBundleExtra(java.lang.String)
android.os.IBinder getIBinderExtra(java.lang.String)
android.graphics.Rect getSourceBounds()
android.content.Intent putExtra(java.lang.String,byte)
android.content.Intent putExtra(java.lang.String,char)
android.content.Intent putExtra(java.lang.String,float)
android.content.Intent putExtra(java.lang.String,double)
android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)
android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)
android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)
android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)
android.content.Intent putExtra(java.lang.String,boolean[])
android.content.Intent putExtra(java.lang.String,short[])
android.content.Intent putExtra(java.lang.String,char[])
android.content.Intent putExtra(java.lang.String,int[])
android.content.Intent putExtra(java.lang.String,long[])
android.content.Intent putExtra(java.lang.String,float[])
android.content.Intent putExtra(java.lang.String,double[])
android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])
android.content.Intent putExtra(java.lang.String,android.os.IBinder)
android.content.Intent putExtras(android.content.Intent)
android.content.Intent replaceExtras(android.content.Intent)
android.content.Intent replaceExtras(android.os.Bundle)
void removeExtra(java.lang.String)
android.content.Intent setClassName(android.content.Context,java.lang.String)
int fillIn(android.content.Intent,int)
void toShortString(java.lang.StringBuilder,boolean,boolean)
java.lang.String toShortString(boolean,boolean)
android.content.ContentProviderResult createFromParcel(android.os.Parcel)
android.content.ContentProviderResult[] newArray(int)
void <init>(android.content.SyncStorageEngine$PendingOperation)
android.content.ContentProvider getLocalContentProvider()
int getLastFailureMesgAsInt(int)
void ensurePeriodicSyncTimeSize(int)
void removePeriodicSyncTime(int)
int findStringInSet(java.lang.String[],java.lang.String,int[],int)
java.lang.String[] addStringToSet(java.lang.String[],java.lang.String,int[],int)
java.lang.String[] removeStringFromSet(java.lang.String[],java.lang.String,int[],int)
android.content.IntentFilter create(java.lang.String,java.lang.String)
void <init>(android.content.IntentFilter)
java.lang.String getAction(int)
boolean hasAction(java.lang.String)
boolean matchAction(java.lang.String)
java.util.Iterator actionsIterator()
boolean findMimeType(java.lang.String)
boolean hasDataType(java.lang.String)
int countDataTypes()
java.lang.String getDataType(int)
java.util.Iterator typesIterator()
int countDataSchemes()
java.lang.String getDataScheme(int)
boolean hasDataScheme(java.lang.String)
java.util.Iterator schemesIterator()
int countDataAuthorities()
android.content.IntentFilter$AuthorityEntry getDataAuthority(int)
int matchDataAuthority(android.net.Uri)
boolean hasDataAuthority(android.net.Uri)
int countDataPaths()
android.os.PatternMatcher getDataPath(int)
boolean hasDataPath(java.lang.String)
int matchData(java.lang.String,java.lang.String,android.net.Uri)
int countCategories()
java.lang.String getCategory(int)
java.util.Iterator categoriesIterator()
java.lang.String matchCategories(java.util.Set)
int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)
void writeToXml(org.xmlpull.v1.XmlSerializer)
void readFromXml(org.xmlpull.v1.XmlPullParser)
boolean debugCheck()
void insert(android.content.ContentResolver,java.io.InputStream)
void insert(android.content.ContentResolver,java.lang.String)
java.lang.Object lastElement()
void parseRow(org.xml.sax.Attributes)
android.net.Uri insertRow()
java.lang.String getValue(int)
android.content.ISyncContext asInterface(android.os.IBinder)
android.content.SyncAdapterType createFromParcel(android.os.Parcel)
android.content.SyncAdapterType[] newArray(int)
void writeAsXml(android.content.SyncAdapterType,org.xmlpull.v1.XmlSerializer)
android.content.SyncAdapterType createFromXml(org.xmlpull.v1.XmlPullParser)
int getNumSuccessfulYieldPoints()
android.content.ComponentName createFromParcel(android.os.Parcel)
android.content.ComponentName[] newArray(int)
android.content.ContentValues getEntityValues()
void <init>(android.net.Uri,android.content.ContentValues)
void <init>(int,android.net.Uri)
android.content.ContentProviderOperation$Builder withValueBackReferences(android.content.ContentValues)
android.content.ContentProviderOperation$Builder withSelectionBackReference(int,int)
android.content.ContentProviderOperation$Builder withSelection(java.lang.String,java.lang.String[])
android.content.ContentProviderOperation$Builder withExpectedCount(int)
android.content.ContentProviderOperation$Builder withYieldAllowed(boolean)
void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)
void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)
android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel)
android.database.IBulkCursor bulkQueryInternal(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.database.IContentObserver,android.database.CursorWindow,android.database.BulkCursorToCursorAdaptor)
void setBaseContext(android.content.Context)
boolean equals(android.os.Bundle,android.os.Bundle)
android.content.SyncAdapterType parseServiceAttributes(android.content.res.Resources,java.lang.String,android.util.AttributeSet)
int countObservers()
android.os.IBinder getSyncAdapterBinder()
boolean hasHardError()
java.lang.StringBuffer append(long)
java.lang.String toDebugString()
void writeAllState()
android.os.IBinder peekService(android.content.Context,android.content.Intent)
void checkSynchronousHint()
void setResultData(java.lang.String)
void setResultExtras(android.os.Bundle)
boolean isOrderedBroadcast()
boolean isInitialStickyBroadcast()
void setDebugUnregister(boolean)
android.content.SyncInfo createFromParcel(android.os.Parcel)
android.content.SyncInfo[] newArray(int)
android.content.ContentProviderOperation createFromParcel(android.os.Parcel)
android.content.ContentProviderOperation[] newArray(int)
void readAccountInfoLocked()
void readStatusLocked()
void readPendingOperationsLocked()
void readStatisticsLocked()
void readAndDeleteLegacyAccountInfoLocked()
void writeAccountInfoLocked()
void writeStatusLocked()
void writePendingOperationsLocked()
void writeStatisticsLocked()
void <init>(android.content.Context,java.io.File)
android.content.SyncStorageEngine newTestInstance(android.content.Context)
void reportChange(int)
android.content.SyncStorageEngine$AuthorityInfo getAuthorityLocked(android.accounts.Account,java.lang.String,java.lang.String)
android.content.SyncStorageEngine$AuthorityInfo getOrCreateAuthorityLocked(android.accounts.Account,java.lang.String,int,boolean)
android.content.SyncStatusInfo getOrCreateSyncStatusLocked(int)
void updateOrRemovePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long,boolean)
void removeAuthorityLocked(android.accounts.Account,java.lang.String,boolean)
void appendPendingOperationLocked(android.content.SyncStorageEngine$PendingOperation)
int clearPending()
int getPendingOperationCount()
void reportActiveChange()
int getCurrentDayLocked()
java.util.ArrayList getSyncStatus()
void clearAndReadState()
android.content.SyncStorageEngine$AuthorityInfo parseAuthority(org.xmlpull.v1.XmlPullParser,int)
android.util.Pair parsePeriodicSync(org.xmlpull.v1.XmlPullParser,android.content.SyncStorageEngine$AuthorityInfo)
void parseExtra(org.xmlpull.v1.XmlPullParser,android.util.Pair)
boolean maybeMigrateSettingsForRenamedAuthorities()
java.lang.String toString(boolean)
int getIntColumn(android.database.Cursor,java.lang.String)
long getLongColumn(android.database.Cursor,java.lang.String)
android.os.Bundle unflattenBundle(byte[])
byte[] flattenBundle(android.os.Bundle)
void writePendingOperationLocked(android.content.SyncStorageEngine$PendingOperation,android.os.Parcel)
void <init>(java.lang.String,java.lang.String,int,int,int,int,boolean)
void <init>(java.lang.String,java.lang.String,int,int,int,int)
android.accounts.AuthenticatorDescription newKey(java.lang.String)
void <init>(android.os.Parcel,android.accounts.AuthenticatorDescription$1)
android.accounts.AccountManagerService getSingleton()
java.lang.String getAccountLabel(java.lang.String)
void <init>(android.accounts.GrantCredentialsPermissionActivity,android.widget.TextView)
void getAuthTokenLabel(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String)
android.view.View newPackageView(java.lang.String)
void grantAppPermission(android.accounts.Account,java.lang.String,int)
void setAccountAuthenticatorResult(android.os.Bundle)
void revokeAppPermission(android.accounts.Account,java.lang.String,int)
void <init>(android.accounts.AccountManager$AmsTask)
void doWork()
void set(android.os.Bundle)
java.lang.Exception access$400(android.accounts.AccountManager,int,java.lang.String)
void access$500(android.accounts.AccountManager$AmsTask,java.lang.Throwable)
void <init>(android.accounts.AccountManager$AmsTask,android.accounts.AccountManager$1)
void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback)
void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback,java.lang.String,java.lang.String[])
android.accounts.IAccountManager access$000(android.accounts.AccountManager)
void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])
android.accounts.Account[] bundleToResult(android.os.Bundle)
java.lang.Object bundleToResult(android.os.Bundle)
void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback)
void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String,boolean)
void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)
void <init>(android.accounts.AccountManager$BaseFutureTask)
void access$700(android.accounts.AccountManager$BaseFutureTask,java.lang.Object)
void access$800(android.accounts.AccountManager$BaseFutureTask,java.lang.Throwable)
void <init>(android.accounts.AccountManager)
java.util.HashMap access$1300(android.accounts.AccountManager)
void access$1400(android.accounts.AccountManager,android.os.Handler,android.accounts.OnAccountsUpdateListener,android.accounts.Account[])
void <init>(android.accounts.AccountManager,android.accounts.OnAccountsUpdateListener,android.accounts.Account[])
void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean)
void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,android.accounts.Account,android.os.Bundle)
void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)
java.lang.String toDebugString(long)
void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,java.lang.String[],android.os.Bundle,java.lang.String)
void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)
android.accounts.AccountAuthenticatorResponse createFromParcel(android.os.Parcel)
android.accounts.AccountAuthenticatorResponse[] newArray(int)
void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,android.os.Bundle,android.accounts.Account,java.lang.String,boolean,boolean,int,boolean)
void getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)
void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)
void <init>(android.accounts.IAccountAuthenticatorResponse)
android.content.Intent access$100(android.accounts.AccountManagerService,android.accounts.Account,int,android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String)
boolean access$200(android.accounts.AccountManagerService,android.accounts.Account,java.lang.String,java.lang.String)
void access$300(android.accounts.AccountManagerService,android.accounts.Account,java.lang.CharSequence,android.content.Intent)
void <init>(android.content.Context,android.accounts.IAccountManager,android.os.Handler)
android.os.Bundle sanitizeResult(android.os.Bundle)
java.lang.String getPassword(android.accounts.Account)
java.lang.String getUserData(android.accounts.Account,java.lang.String)
android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()
android.accounts.Account[] getAccounts(java.lang.String)
android.accounts.Account[] getAccountsByType(java.lang.String)
void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String[])
android.accounts.AccountManager$Future2Task start()
android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)
android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)
boolean addAccount(android.accounts.Account,java.lang.String,android.os.Bundle)
boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)
void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account)
android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)
void invalidateAuthToken(java.lang.String,java.lang.String)
java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)
void setPassword(android.accounts.Account,java.lang.String)
void clearPassword(android.accounts.Account)
void setUserData(android.accounts.Account,java.lang.String,java.lang.String)
void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)
android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)
java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)
void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String,android.os.Bundle)
android.accounts.AccountManagerFuture start()
android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)
void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle)
android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)
void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,android.os.Bundle,android.app.Activity)
android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)
void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String,android.app.Activity,android.os.Bundle)
android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)
void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,java.lang.String,android.app.Activity)
android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)
void ensureNotOnMainThread()
void <init>(android.accounts.AccountManager,android.accounts.AccountManagerCallback,android.accounts.AccountManagerFuture)
void postToHandler(android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.AccountManagerFuture)
void postToHandler(android.os.Handler,android.accounts.OnAccountsUpdateListener,android.accounts.Account[])
java.lang.Exception convertErrorToException(int,java.lang.String)
void <init>(android.accounts.AccountManager,java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)
android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)
void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener)
void access$200(android.accounts.AccountManager)
void access$300(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.AccountManagerFuture)
android.os.Handler access$600(android.accounts.AccountManager)
android.accounts.IAccountAuthenticator asInterface(android.os.IBinder)
android.accounts.IAccountAuthenticatorResponse asInterface(android.os.IBinder)
void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)
void editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)
void hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])
void getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)
void <init>(android.accounts.GrantCredentialsPermissionActivity$1,java.lang.String)
void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)
void <init>(android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask)
void access$900(android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask,java.lang.Throwable)
void access$1000(android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask,java.lang.Throwable)
void access$1100(android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask,java.lang.Throwable)
int access$1202(android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask,int)
void <init>(android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1)
void <init>(android.accounts.IAccountManagerResponse)
void run(android.accounts.AccountManagerFuture)
android.accounts.AccountManagerResponse createFromParcel(android.os.Parcel)
android.accounts.AccountManagerResponse[] newArray(int)
void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])
void checkAccount()
void sendResult()
android.accounts.IAccountManagerResponse getResponseAndClose()
void onRequestContinued()
android.accounts.AuthenticatorDescription createFromParcel(android.os.Parcel)
android.accounts.AuthenticatorDescription[] newArray(int)
android.accounts.AuthenticatorDescription parseServiceAttributes(android.content.res.Resources,java.lang.String,android.util.AttributeSet)
void <init>(android.accounts.AccountAuthenticatorCache$1)
void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])
java.lang.Boolean bundleToResult(android.os.Bundle)
void addAcount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,java.lang.String[],boolean,android.os.Bundle)
void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,android.accounts.Account,java.lang.String)
android.os.Bundle call()
void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)
java.util.LinkedHashMap access$400(android.accounts.AccountManagerService)
void cancelTimeout()
void unbind()
boolean bindToAuthenticator(java.lang.String)
void bind()
android.content.Context access$500(android.accounts.AccountManagerService)
android.accounts.AccountManagerService$MessageHandler access$600(android.accounts.AccountManagerService)
void scheduleTimeout()
void onTimedOut()
java.lang.Integer access$700(android.accounts.AccountManagerService,android.accounts.Account)
void access$800(android.accounts.AccountManagerService,int)
android.accounts.AccountAuthenticatorCache access$900(android.accounts.AccountManagerService)
android.accounts.IAccountManagerResponse asInterface(android.os.IBinder)
void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)
void confirmCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean)
int computeHashCode()
void <init>(android.accounts.AccountManagerService,android.accounts.Account,java.lang.String)
android.accounts.Account createFromParcel(android.os.Parcel)
android.accounts.Account[] newArray(int)
void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])
void <init>(android.accounts.AccountManagerService,android.content.Context)
void <init>(android.accounts.AccountManagerService,android.os.Looper)
void validateAccounts()
void sendAccountsChangedBroadcast()
void onServiceChanged(android.accounts.AuthenticatorDescription,boolean)
void checkAuthenticateAccountsPermission(android.accounts.Account)
java.lang.String readPasswordFromDatabase(android.accounts.Account)
java.lang.String readUserDataFromDatabase(android.accounts.Account,java.lang.String)
boolean insertAccountIntoDatabase(android.accounts.Account,java.lang.String,android.os.Bundle)
long insertExtra(android.database.sqlite.SQLiteDatabase,long,java.lang.String,java.lang.String)
void checkReadAccountsPermission()
void checkManageAccountsPermission()
java.lang.Integer getSigninRequiredNotificationId(android.accounts.Account)
void cancelNotification(int)
void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,android.accounts.Account)
void removeAccount(android.accounts.Account)
void checkManageAccountsOrUseCredentialsPermissions()
void invalidateAuthToken(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)
boolean saveAuthTokenToDatabase(android.accounts.Account,java.lang.String,java.lang.String)
long getAccountId(android.database.sqlite.SQLiteDatabase,android.accounts.Account)
java.lang.String readAuthTokenFromDatabase(android.accounts.Account,java.lang.String)
void setPasswordInDB(android.accounts.Account,java.lang.String)
void writeUserdataIntoDatabase(android.accounts.Account,java.lang.String,java.lang.String)
long getExtrasId(android.database.sqlite.SQLiteDatabase,long,java.lang.String)
void onResult(android.accounts.IAccountManagerResponse,android.os.Bundle)
void checkBinderPermission(java.lang.String[])
boolean permissionIsGranted(android.accounts.Account,java.lang.String,int)
java.lang.Integer getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)
void createNoCredentialsPermissionNotification(android.accounts.Account,android.content.Intent)
android.content.Intent newGrantCredentialsPermissionIntent(android.accounts.Account,int,android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String)
void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,android.accounts.Account,java.lang.String,android.os.Bundle)
void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String)
java.lang.String getDatabaseName()
void setMetaValue(java.lang.String,java.lang.String)
java.lang.String getMetaValue(java.lang.String)
boolean scanArgs(java.lang.String[],java.lang.String)
void doNotification(android.accounts.Account,java.lang.CharSequence,android.content.Intent)
boolean hasAuthenticatorUid(java.lang.String,int)
boolean hasExplicitlyGrantedPermission(android.accounts.Account,java.lang.String)
void checkCallingUidAgainstAuthenticator(android.accounts.Account)
void access$000(android.accounts.AccountManagerService,android.accounts.Account)
java.lang.String access$1000()
void <init>(android.accounts.AccountManager,android.os.Handler)
void postRunnableToHandler(java.lang.Runnable)
void setException(java.lang.Throwable)
void startTask()
void <init>(android.accounts.AccountManager$Future2Task)
void <init>(android.accounts.AbstractAccountAuthenticator)
void access$000(android.accounts.AbstractAccountAuthenticator)
android.os.Bundle addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)
android.os.Bundle confirmCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)
java.lang.String getAuthTokenLabel(java.lang.String)
android.os.Bundle getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)
android.os.Bundle updateCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)
android.os.Bundle editProperties(android.accounts.AccountAuthenticatorResponse,java.lang.String)
android.os.Bundle hasFeatures(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])
android.os.Bundle getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)
void <init>(android.accounts.AbstractAccountAuthenticator,android.accounts.AbstractAccountAuthenticator$1)
java.lang.Object internalGetResult(java.lang.Long,java.util.concurrent.TimeUnit)
java.lang.Object getResult(long,java.util.concurrent.TimeUnit)
void checkBinderPermission()
android.os.IBinder getIBinder()
void createGrantsTable(android.database.sqlite.SQLiteDatabase)
void createAccountsDeletionTrigger(android.database.sqlite.SQLiteDatabase)
android.os.Bundle internalGetResult(java.lang.Long,java.util.concurrent.TimeUnit)
android.os.Bundle getResult()
android.os.Bundle getResult(long,java.util.concurrent.TimeUnit)
void writeAsXml(android.accounts.AuthenticatorDescription,org.xmlpull.v1.XmlSerializer)
android.accounts.AuthenticatorDescription createFromXml(org.xmlpull.v1.XmlPullParser)
void glVertexAttribPointerBounds(int,int,int,boolean,int,java.nio.Buffer,int)
void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)
void <init>(android.opengl.GLSurfaceView,int,int,int,int,int,int)
void <init>(android.opengl.GLSurfaceView,boolean)
android.opengl.ETC1Util$ETC1Texture createTexture(java.io.InputStream)
void loadTexture(int,int,int,int,int,android.opengl.ETC1Util$ETC1Texture)
void loadTexture(int,int,int,int,int,java.io.InputStream)
java.nio.ByteBuffer getData()
boolean isETC1Supported()
void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)
void decodeImage(java.nio.Buffer,java.nio.Buffer,int,int,int,int)
void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
void glGetIntegerv(int,int[],int)
boolean isValid(java.nio.Buffer)
int getWidth(java.nio.Buffer)
int getHeight(java.nio.Buffer)
int getEncodedDataSize(int,int)
void <init>(int,int,java.nio.ByteBuffer)
void encodeImage(java.nio.Buffer,int,int,int,int,java.nio.Buffer)
android.opengl.ETC1Util$ETC1Texture compressTexture(java.nio.Buffer,int,int,int,int)
void formatHeader(java.nio.Buffer,int,int)
void writeTexture(android.opengl.ETC1Util$ETC1Texture,java.io.OutputStream)
void <init>(android.opengl.GLSurfaceView,int[])
int findConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int)
javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[])
boolean eglGetConfigAttrib(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int[])
void <init>(android.opengl.GLSurfaceView)
android.opengl.GLSurfaceView$EGLConfigChooser access$300(android.opengl.GLSurfaceView)
javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay)
android.opengl.GLSurfaceView$EGLContextFactory access$400(android.opengl.GLSurfaceView)
javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)
void throwEglException(java.lang.String)
android.opengl.GLSurfaceView$EGLWindowSurfaceFactory access$500(android.opengl.GLSurfaceView)
void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface)
javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object)
void throwEglException(java.lang.String,int)
android.opengl.GLSurfaceView$GLWrapper access$600(android.opengl.GLSurfaceView)
javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL)
int access$700(android.opengl.GLSurfaceView)
javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL,int,java.io.Writer)
javax.microedition.khronos.opengles.GL createSurface(android.view.SurfaceHolder)
boolean swap()
void destroySurface()
void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext)
java.lang.String getErrorString(int)
int[] filterConfigSpec(int[])
int access$200(android.opengl.GLSurfaceView)
java.lang.String gluErrorString(int)
void setLookAtM(float[],int,float,float,float,float,float,float,float,float,float)
void glMultMatrixf(float[],int)
void gluLookAt(javax.microedition.khronos.opengles.GL10,float,float,float,float,float,float,float,float,float)
void glOrthof(float,float,float,float,float,float)
void gluOrtho2D(javax.microedition.khronos.opengles.GL10,float,float,float,float)
void glFrustumf(float,float,float,float,float,float)
void gluPerspective(javax.microedition.khronos.opengles.GL10,float,float,float,float)
void multiplyMM(float[],int,float[],int,float[],int)
void multiplyMV(float[],int,float[],int,float[],int)
int gluProject(float,float,float,float[],int,float[],int,int[],int,float[],int)
boolean invertM(float[],int,float[],int)
int gluUnProject(float,float,float,float[],int,float[],int,int[],int,float[],int)
int readInt16(java.io.InputStream)
void glGenTextures(int,int[],int)
void glClientActiveTexture(int)
void glBindTexture(int,int)
void glTexParameterf(int,int,float)
void glTexEnvf(int,int,float)
int loadTexture(javax.microedition.khronos.opengles.GL10,int,int,int,int,int,int,int,int,int,java.nio.Buffer)
void setTextureParameters(javax.microedition.khronos.opengles.GL10)
void <init>(android.opengl.GLSurfaceView,android.opengl.GLSurfaceView$Renderer)
void guardedRun()
android.opengl.GLSurfaceView$GLThreadManager access$800()
void threadExiting(android.opengl.GLSurfaceView$GLThread)
void stopEglSurfaceLocked()
void releaseEglContextLocked(android.opengl.GLSurfaceView$GLThread)
void stopEglContextLocked()
boolean shouldReleaseEGLContextWhenPausing()
boolean shouldTerminateEGLWhenPausing()
boolean readyToDraw()
boolean tryAcquireEglContextLocked(android.opengl.GLSurfaceView$GLThread)
boolean access$900(android.opengl.GLSurfaceView)
boolean access$902(android.opengl.GLSurfaceView,boolean)
void checkGLDriver(javax.microedition.khronos.opengles.GL10)
void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig)
void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int)
void onDrawFrame(javax.microedition.khronos.opengles.GL10)
boolean ableToDraw()
void setRenderMode(int)
int getRenderMode()
void requestRender()
void surfaceCreated()
void surfaceDestroyed()
android.opengl.GLSurfaceView$GLThread access$1000(android.opengl.GLSurfaceView)
void onWindowResize(int,int)
void requestExitAndWait()
void requestReleaseEglContextLocked()
boolean access$1102(android.opengl.GLSurfaceView$GLThread,boolean)
void <init>(javax.microedition.khronos.egl.EGL,int,java.io.Writer)
void begin(java.lang.String)
void arg(java.lang.String,javax.microedition.khronos.egl.EGLDisplay)
void arg(java.lang.String,int[])
void arg(java.lang.String,int)
void arg(java.lang.String,java.lang.Object[])
void returns(boolean)
void checkError()
void arg(java.lang.String,javax.microedition.khronos.egl.EGLSurface)
void arg(java.lang.String,java.lang.Object)
boolean eglCopyBuffers(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,java.lang.Object)
void arg(java.lang.String,javax.microedition.khronos.egl.EGLContext)
void returns(java.lang.Object)
boolean eglGetConfigs(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[],int,int[])
void returns(java.lang.String)
boolean eglQueryContext(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext,int,int[])
void returns(int)
java.lang.String eglQueryString(javax.microedition.khronos.egl.EGLDisplay,int)
boolean eglQuerySurface(javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface,int,int[])
boolean eglWaitGL()
boolean eglWaitNative(int,java.lang.Object)
void logLine(java.lang.String)
void arg(java.lang.String,java.lang.String)
java.lang.String toString(int,int[],int)
java.lang.String toString(int,java.lang.Object[],int)
java.lang.String getHex(int)
void <init>(android.opengl.Object3D)
android.opengl.Material getMaterial(java.lang.String)
java.nio.ShortBuffer asShortBuffer()
void <init>(android.opengl.Material,java.nio.ShortBuffer)
void load(java.io.DataInputStream)
java.nio.ShortBuffer getIndexBuffer()
int capacity()
int getNumTriangles()
void glDisableClientState(int)
java.nio.IntBuffer getVertexBuffer()
void glEnableClientState(int)
java.nio.IntBuffer getNormalBuffer()
boolean hasTexcoords()
java.nio.IntBuffer getTexcoordBuffer()
android.opengl.Material getMaterial()
void setMaterialParameters(javax.microedition.khronos.opengles.GL10)
java.lang.String getMap_Kd()
android.opengl.Texture getTexture(java.lang.String)
void glDrawElements(int,int,int,java.nio.Buffer)
void draw(javax.microedition.khronos.opengles.GL10)
void glMaterialfv(int,int,float[],int)
void glMaterialf(int,int,float)
void loadTexture(java.lang.String)
void <init>(android.opengl.GLSurfaceView,android.opengl.GLSurfaceView$1)
void flushBuilder()
void <init>(javax.microedition.khronos.opengles.GL,int)
void <init>(javax.microedition.khronos.opengles.GL,java.io.Writer,boolean)
javax.microedition.khronos.egl.EGL wrap(javax.microedition.khronos.egl.EGL,int,java.io.Writer)
void setGLWrapper(android.opengl.GLSurfaceView$GLWrapper)
void setDebugFlags(int)
int getDebugFlags()
void checkRenderThreadState()
void <init>(android.opengl.GLSurfaceView$1)
void setRenderer(android.opengl.GLSurfaceView$Renderer)
void setEGLContextFactory(android.opengl.GLSurfaceView$EGLContextFactory)
void setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView$EGLWindowSurfaceFactory)
void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser)
void setEGLConfigChooser(boolean)
void setEGLConfigChooser(int,int,int,int,int,int)
void setEGLContextClientVersion(int)
void checkGLESVersion()
void <init>(android.opengl.GLLogWrapper)
int glGetError()
void arg(java.lang.String,boolean)
void arg(java.lang.String,float)
java.lang.String toString(int,int,int[],int)
void arg(java.lang.String,int,int[],int)
java.lang.String toString(int,short[],int)
void arg(java.lang.String,int,short[],int)
java.lang.String toString(int,float[],int)
void arg(java.lang.String,int,float[],int)
void formattedAppend(java.lang.StringBuilder,int,int)
float get(int)
java.lang.String toString(int,java.nio.FloatBuffer)
java.lang.String toString(int,int,java.nio.IntBuffer)
short get(int)
java.lang.String toString(int,java.nio.ShortBuffer)
void arg(java.lang.String,int,java.nio.FloatBuffer)
void arg(java.lang.String,int,java.nio.IntBuffer)
void arg(java.lang.String,int,java.nio.ShortBuffer)
java.lang.String getPointerTypeName(int)
void argPointer(int,int,int,java.nio.Buffer)
java.lang.String getClearBufferMask(int)
java.lang.String getFactor(int)
java.lang.String getShadeModel(int)
java.lang.String getTextureTarget(int)
java.lang.String getTextureEnvTarget(int)
java.lang.String getTextureEnvPName(int)
int getTextureEnvParamCount(int)
java.lang.String getTextureEnvParamName(float)
java.lang.String getMatrixMode(int)
java.lang.String getClientState(int)
java.lang.String getCap(int)
java.lang.String getTexturePName(int)
java.lang.String getTextureParamName(float)
java.lang.String getFogPName(int)
int getFogParamCount(int)
java.lang.String getBeginMode(int)
java.lang.String getIndexType(int)
java.lang.String getIntegerStateName(int)
int getIntegerStateSize(int)
int getIntegerStateFormat(int)
java.lang.String getHintTarget(int)
java.lang.String getHintMode(int)
java.lang.String getFaceName(int)
java.lang.String getMaterialPName(int)
int getMaterialParamCount(int)
java.lang.String getLightName(int)
java.lang.String getLightPName(int)
int getLightParamCount(int)
java.lang.String getLightModelPName(int)
int getLightModelParamCount(int)
int limit()
java.nio.ByteOrder order()
java.nio.CharBuffer asCharBuffer()
char get()
java.nio.CharBuffer put(char)
short get()
java.nio.ShortBuffer put(short)
java.nio.IntBuffer asIntBuffer()
java.nio.IntBuffer put(int)
java.nio.FloatBuffer asFloatBuffer()
float get()
java.nio.FloatBuffer put(float)
java.nio.DoubleBuffer asDoubleBuffer()
double get()
java.nio.DoubleBuffer put(double)
java.nio.LongBuffer asLongBuffer()
long get()
java.nio.LongBuffer put(long)
java.nio.Buffer rewind()
java.nio.ByteBuffer toByteBuffer(int,java.nio.Buffer)
int arrayOffset()
java.nio.CharBuffer get(char[])
char[] toCharIndices(int,int,java.nio.Buffer)
int getStride()
int sizeof(int)
byte get(int)
void doArrayElement(java.lang.StringBuilder,boolean,java.lang.String,android.opengl.GLLogWrapper$PointerInfo,int)
void doElement(java.lang.StringBuilder,int,int)
void bindByteBuffer()
void bindArrays()
void unbindByteBuffer()
void unbindArrays()
void startLogIndices()
void endLogIndices()
void glActiveTexture(int)
void glAlphaFunc(int,float)
void glAlphaFuncx(int,int)
void glBlendFunc(int,int)
void glClearColorx(int,int,int,int)
void glClearDepthf(float)
void glClearDepthx(int)
void glClearStencil(int)
void glColor4f(float,float,float,float)
void glColor4x(int,int,int,int)
void glColorMask(boolean,boolean,boolean,boolean)
void <init>(android.opengl.GLLogWrapper,int,int,int,java.nio.Buffer)
void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
void glCopyTexImage2D(int,int,int,int,int,int,int,int)
void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)
void glCullFace(int)
void glDeleteTextures(int,int[],int)
void glDeleteTextures(int,java.nio.IntBuffer)
void glDepthFunc(int)
void glDepthMask(boolean)
void glDepthRangef(float,float)
void glDepthRangex(int,int)
void glDrawArrays(int,int,int)
void glFinish()
void glFlush()
void glFogf(int,float)
void glFogfv(int,float[],int)
void glFogfv(int,java.nio.FloatBuffer)
void glFogx(int,int)
void glFogxv(int,int[],int)
void glFogxv(int,java.nio.IntBuffer)
void glFrontFace(int)
void glFrustumx(int,int,int,int,int,int)
void glGenTextures(int,java.nio.IntBuffer)
void glGetIntegerv(int,java.nio.IntBuffer)
void glHint(int,int)
void glLightModelf(int,float)
void glLightModelfv(int,float[],int)
void glLightModelfv(int,java.nio.FloatBuffer)
void glLightModelx(int,int)
void glLightModelxv(int,int[],int)
void glLightModelxv(int,java.nio.IntBuffer)
void glLightf(int,int,float)
void glLightfv(int,int,float[],int)
void glLightfv(int,int,java.nio.FloatBuffer)
void glLightx(int,int,int)
void glLightxv(int,int,int[],int)
void glLightxv(int,int,java.nio.IntBuffer)
void glLineWidth(float)
void glLineWidthx(int)
void glLoadIdentity()
void glLoadMatrixf(float[],int)
void glLoadMatrixf(java.nio.FloatBuffer)
void glLoadMatrixx(int[],int)
void glLoadMatrixx(java.nio.IntBuffer)
void glLogicOp(int)
void glMaterialfv(int,int,java.nio.FloatBuffer)
void glMaterialx(int,int,int)
void glMaterialxv(int,int,int[],int)
void glMaterialxv(int,int,java.nio.IntBuffer)
void glMatrixMode(int)
void glMultMatrixf(java.nio.FloatBuffer)
void glMultMatrixx(int[],int)
void glMultMatrixx(java.nio.IntBuffer)
void glMultiTexCoord4f(int,float,float,float,float)
void glMultiTexCoord4x(int,int,int,int,int)
void glNormal3f(float,float,float)
void glNormal3x(int,int,int)
void glOrthox(int,int,int,int,int,int)
void glPixelStorei(int,int)
void glPointSize(float)
void glPointSizex(int)
void glPolygonOffset(float,float)
void glPolygonOffsetx(int,int)
void glPopMatrix()
void glPushMatrix()
void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)
void glRotatef(float,float,float,float)
void glRotatex(int,int,int,int)
void glSampleCoverage(float,boolean)
void glSampleCoveragex(int,boolean)
void glScalef(float,float,float)
void glScalex(int,int,int)
void glScissor(int,int,int,int)
void glShadeModel(int)
void glStencilFunc(int,int,int)
void glStencilMask(int)
void glStencilOp(int,int,int)
void glTexEnvfv(int,int,float[],int)
void glTexEnvfv(int,int,java.nio.FloatBuffer)
void glTexEnvx(int,int,int)
void glTexEnvxv(int,int,int[],int)
void glTexEnvxv(int,int,java.nio.IntBuffer)
void glTexParameterx(int,int,int)
void glTexParameteriv(int,int,int[],int)
void glTexParameteriv(int,int,java.nio.IntBuffer)
void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
void glTranslatef(float,float,float)
void glTranslatex(int,int,int)
void glViewport(int,int,int,int)
void glClipPlanef(int,float[],int)
void glClipPlanef(int,java.nio.FloatBuffer)
void glClipPlanex(int,int[],int)
void glClipPlanex(int,java.nio.IntBuffer)
void glDrawTexfOES(float,float,float,float,float)
void glDrawTexfvOES(float[],int)
void glDrawTexfvOES(java.nio.FloatBuffer)
void glDrawTexiOES(int,int,int,int,int)
void glDrawTexivOES(int[],int)
void glDrawTexivOES(java.nio.IntBuffer)
void glDrawTexsOES(short,short,short,short,short)
void glDrawTexsvOES(short[],int)
void glDrawTexsvOES(java.nio.ShortBuffer)
void glDrawTexxOES(int,int,int,int,int)
void glDrawTexxvOES(int[],int)
void glDrawTexxvOES(java.nio.IntBuffer)
int glQueryMatrixxOES(int[],int,int[],int)
int glQueryMatrixxOES(java.nio.IntBuffer,java.nio.IntBuffer)
void glBindBuffer(int,int)
void glBufferData(int,int,java.nio.Buffer,int)
void glBufferSubData(int,int,int,java.nio.Buffer)
void glColor4ub(byte,byte,byte,byte)
void glDeleteBuffers(int,int[],int)
void glDeleteBuffers(int,java.nio.IntBuffer)
void glGenBuffers(int,int[],int)
void glGenBuffers(int,java.nio.IntBuffer)
void glGetBooleanv(int,boolean[],int)
void glGetBooleanv(int,java.nio.IntBuffer)
void glGetBufferParameteriv(int,int,int[],int)
void glGetBufferParameteriv(int,int,java.nio.IntBuffer)
void glGetClipPlanef(int,float[],int)
void glGetClipPlanef(int,java.nio.FloatBuffer)
void glGetClipPlanex(int,int[],int)
void glGetClipPlanex(int,java.nio.IntBuffer)
void glGetFixedv(int,int[],int)
void glGetFixedv(int,java.nio.IntBuffer)
void glGetFloatv(int,float[],int)
void glGetFloatv(int,java.nio.FloatBuffer)
void glGetLightfv(int,int,float[],int)
void glGetLightfv(int,int,java.nio.FloatBuffer)
void glGetLightxv(int,int,int[],int)
void glGetLightxv(int,int,java.nio.IntBuffer)
void glGetMaterialfv(int,int,float[],int)
void glGetMaterialfv(int,int,java.nio.FloatBuffer)
void glGetMaterialxv(int,int,int[],int)
void glGetMaterialxv(int,int,java.nio.IntBuffer)
void glGetTexEnviv(int,int,int[],int)
void glGetTexEnviv(int,int,java.nio.IntBuffer)
void glGetTexEnvxv(int,int,int[],int)
void glGetTexEnvxv(int,int,java.nio.IntBuffer)
void glGetTexParameterfv(int,int,float[],int)
void glGetTexParameterfv(int,int,java.nio.FloatBuffer)
void glGetTexParameteriv(int,int,int[],int)
void glGetTexParameteriv(int,int,java.nio.IntBuffer)
void glGetTexParameterxv(int,int,int[],int)
void glGetTexParameterxv(int,int,java.nio.IntBuffer)
boolean glIsBuffer(int)
boolean glIsEnabled(int)
boolean glIsTexture(int)
void glPointParameterf(int,float)
void glPointParameterfv(int,float[],int)
void glPointParameterfv(int,java.nio.FloatBuffer)
void glPointParameterx(int,int)
void glPointParameterxv(int,int[],int)
void glPointParameterxv(int,java.nio.IntBuffer)
void glTexEnvi(int,int,int)
void glTexEnviv(int,int,int[],int)
void glTexEnviv(int,int,java.nio.IntBuffer)
void glTexParameterfv(int,int,float[],int)
void glTexParameterfv(int,int,java.nio.FloatBuffer)
void glTexParameteri(int,int,int)
void glTexParameterxv(int,int,int[],int)
void glTexParameterxv(int,int,java.nio.IntBuffer)
void glColorPointer(int,int,int,int)
void glDrawElements(int,int,int,int)
void glNormalPointer(int,int,int)
void glTexCoordPointer(int,int,int,int)
void glVertexPointer(int,int,int,int)
void glCurrentPaletteMatrixOES(int)
void glLoadPaletteFromModelViewMatrixOES()
void glMatrixIndexPointerOES(int,int,int,int)
void glWeightPointerOES(int,int,int,int)
java.nio.ByteBuffer access$000(android.opengl.GLLogWrapper,int,java.nio.Buffer)
float getBoundsMinX()
float getBoundsMaxX()
float getBoundsMinY()
float getBoundsMaxY()
float getBoundsMinZ()
float getBoundsMaxZ()
java.io.InputStream readFile(java.lang.String)
void verifyByte(java.io.DataInputStream,int)
java.nio.ByteBuffer slice()
void load(java.lang.String)
void transposeM(float[],int,float[],int)
void orthoM(float[],int,float,float,float,float,float,float)
void frustumM(float[],int,float,float,float,float,float,float)
float length(float,float,float)
void setIdentityM(float[],int)
void scaleM(float[],int,float[],int,float,float,float)
void scaleM(float[],int,float,float,float)
void translateM(float[],int,float[],int,float,float,float)
void translateM(float[],int,float,float,float)
void setRotateM(float[],int,float,float,float,float)
void rotateM(float[],int,float[],int,float,float,float,float)
void rotateM(float[],int,float,float,float,float)
void setRotateEulerM(float[],int,float,float,float)
int native_getInternalFormat(android.graphics.Bitmap)
int getInternalFormat(android.graphics.Bitmap)
int native_getType(android.graphics.Bitmap)
int getType(android.graphics.Bitmap)
int native_texImage2D(int,int,int,android.graphics.Bitmap,int,int)
void texImage2D(int,int,int,android.graphics.Bitmap,int)
void texImage2D(int,int,int,android.graphics.Bitmap,int,int)
void texImage2D(int,int,android.graphics.Bitmap,int)
int native_texSubImage2D(int,int,int,int,android.graphics.Bitmap,int,int)
void texSubImage2D(int,int,int,int,android.graphics.Bitmap)
void texSubImage2D(int,int,int,int,android.graphics.Bitmap,int,int)
int getError()
void <init>(android.drm.mobile1.DrmRawContent,android.drm.mobile1.DrmRights)
int access$000(android.drm.mobile1.DrmRawContent)
int access$100(android.drm.mobile1.DrmRawContent,byte[],int,int,int)
int nativeConstructDrmContent(java.io.InputStream,int,int)
java.lang.String nativeGetRightsAddress()
int nativeGetDeliveryMethod()
java.lang.String nativeGetContentType()
java.lang.String getRightsAddress()
int getRawType()
int nativeGetContentLength()
int getContentLength(android.drm.mobile1.DrmRights)
int nativeReadContent(byte[],int,int,int)
int nativeInstallDrmRights(java.io.InputStream,int,int,android.drm.mobile1.DrmRights)
android.drm.mobile1.DrmRights installRights(java.io.InputStream,int,java.lang.String)
int nativeQueryRights(android.drm.mobile1.DrmRawContent,android.drm.mobile1.DrmRights)
int nativeGetNumOfRights()
int nativeGetRightsList(android.drm.mobile1.DrmRights[],int)
java.util.List getRightsList()
int nativeDeleteRights(android.drm.mobile1.DrmRights)
void deleteRights(android.drm.mobile1.DrmRights)
int nativeGetConstraintInfo(int,android.drm.mobile1.DrmConstraintInfo)
android.drm.mobile1.DrmConstraintInfo getConstraint(int)
int nativeConsumeRights(int)
boolean consumeRights(int)
java.util.Date getStartDate()
java.util.Date getEndDate()
long getInterval()
boolean[][] $VRi()
boolean getBooleanArgument(android.os.Bundle,java.lang.String)
void setFinishListener(com.google.android.opengles.triangle.EmmaInstrument.FinishListener)
java.lang.String getCoverageFilePath()
void reportEmmaError(java.lang.String,java.lang.Exception)
void reportEmmaError(java.lang.Exception)
void generateCoverageReport()
boolean setCoverageFilePath(java.lang.String)
void onActivityFinished()
void dumpIntermediateCoverage(java.lang.String)
void r(boolean[][],java.lang.String,long)
void <init>(com.google.android.opengles.triangle.EmmaInstrument.InstrumentedActivity)
com.google.android.opengles.triangle.EmmaInstrument.FinishListener access$000(com.google.android.opengles.triangle.EmmaInstrument.InstrumentedActivity)
void <init>(com.google.android.opengles.triangle.GLView)
void start(int[])
com.google.android.opengles.triangle.GLView$GLWrapper access$000(com.google.android.opengles.triangle.GLView)
void <init>(com.google.android.opengles.triangle.GLView,com.google.android.opengles.triangle.GLView$Renderer)
java.util.concurrent.Semaphore access$100()
int[] getConfigSpec()
java.lang.Runnable getEvent()
boolean needToWait()
boolean access$200(com.google.android.opengles.triangle.GLView)
boolean access$202(com.google.android.opengles.triangle.GLView,boolean)
android.view.SurfaceHolder access$300(com.google.android.opengles.triangle.GLView)
void surfaceCreated(javax.microedition.khronos.opengles.GL10)
void sizeChanged(javax.microedition.khronos.opengles.GL10,int,int)
void drawFrame(javax.microedition.khronos.opengles.GL10)
void setGLWrapper(com.google.android.opengles.triangle.GLView$GLWrapper)
void setRenderer(com.google.android.opengles.triangle.GLView$Renderer)
void <init>(com.google.android.opengles.triangle.TriangleActivity)
